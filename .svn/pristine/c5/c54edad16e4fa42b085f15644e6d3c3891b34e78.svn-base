<?php
//Include Common Files @1-F092B764
define("RelativePath", ".");
define("PathToCurrentPage", "/");
define("FileName", "report_f21_district.php");
include_once(RelativePath . "/Common.php");
include_once(RelativePath . "/Template.php");
include_once(RelativePath . "/Sorter.php");
include_once(RelativePath . "/Navigator.php");
//End Include Common Files

//Include Page implementation @2-203FAEA1
include_once(RelativePath . "/topmenu.php");
//End Include Page implementation

class clsRecordpregnancySearch { //pregnancySearch Class @9-F8777AB7

//Variables @9-9E315808

    // Public variables
    public $ComponentType = "Record";
    public $ComponentName;
    public $Parent;
    public $HTMLFormAction;
    public $PressedButton;
    public $Errors;
    public $ErrorBlock;
    public $FormSubmitted;
    public $FormEnctype;
    public $Visible;
    public $IsEmpty;

    public $CCSEvents = "";
    public $CCSEventResult;

    public $RelativePath = "";

    public $InsertAllowed = false;
    public $UpdateAllowed = false;
    public $DeleteAllowed = false;
    public $ReadAllowed   = false;
    public $EditMode      = false;
    public $ds;
    public $DataSource;
    public $ValidatingControls;
    public $Controls;
    public $Attributes;

    // Class variables
//End Variables

//Class_Initialize Event @9-87F12D91
    function clsRecordpregnancySearch($RelativePath, & $Parent)
    {

        global $FileName;
        global $CCSLocales;
        global $DefaultDateFormat;
        $this->Visible = true;
        $this->Parent = & $Parent;
        $this->RelativePath = $RelativePath;
        $this->Errors = new clsErrors();
        $this->ErrorBlock = "Record pregnancySearch/Error";
        $this->ReadAllowed = true;
        if($this->Visible)
        {
            $this->ComponentName = "pregnancySearch";
            $this->Attributes = new clsAttributes($this->ComponentName . ":");
            $CCSForm = explode(":", CCGetFromGet("ccsForm", ""), 2);
            if(sizeof($CCSForm) == 1)
                $CCSForm[1] = "";
            list($FormName, $FormMethod) = $CCSForm;
            $this->FormEnctype = "application/x-www-form-urlencoded";
            $this->FormSubmitted = ($FormName == $this->ComponentName);
            $Method = $this->FormSubmitted ? ccsPost : ccsGet;
            $this->Button_DoSearch = new clsButton("Button_DoSearch", $Method, $this);
            $this->s_PregRegDate = new clsControl(ccsTextBox, "s_PregRegDate", "s_PregRegDate", ccsDate, array("ShortDate"), CCGetRequestParam("s_PregRegDate", $Method, NULL), $this);
            $this->DatePicker_s_PregRegDate = new clsDatePicker("DatePicker_s_PregRegDate", "pregnancySearch", "s_PregRegDate", $this);
            $this->s_PregRegDateTo = new clsControl(ccsTextBox, "s_PregRegDateTo", "s_PregRegDateTo", ccsDate, array("ShortDate"), CCGetRequestParam("s_PregRegDateTo", $Method, NULL), $this);
            $this->DatePicker_s_PregRegDateTo = new clsDatePicker("DatePicker_s_PregRegDateTo", "pregnancySearch", "s_PregRegDateTo", $this);
            $this->s_FacilityName = new clsControl(ccsListBox, "s_FacilityName", "s_FacilityName", ccsText, "", CCGetRequestParam("s_FacilityName", $Method, NULL), $this);
            $this->s_FacilityName->DSType = dsTable;
            $this->s_FacilityName->DataSource = new clsDBregistry_db();
            $this->s_FacilityName->ds = & $this->s_FacilityName->DataSource;
            $this->s_FacilityName->DataSource->SQL = "SELECT * \n" .
"FROM facilities {SQL_Where} {SQL_OrderBy}";
            list($this->s_FacilityName->BoundColumn, $this->s_FacilityName->TextColumn, $this->s_FacilityName->DBFormat) = array("FacilityName", "FacilityName", "");
        }
    }
//End Class_Initialize Event

//Validate Method @9-73ABC91D
    function Validate()
    {
        global $CCSLocales;
        $Validation = true;
        $Where = "";
        $Validation = ($this->s_PregRegDate->Validate() && $Validation);
        $Validation = ($this->s_PregRegDateTo->Validate() && $Validation);
        $Validation = ($this->s_FacilityName->Validate() && $Validation);
        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "OnValidate", $this);
        $Validation =  $Validation && ($this->s_PregRegDate->Errors->Count() == 0);
        $Validation =  $Validation && ($this->s_PregRegDateTo->Errors->Count() == 0);
        $Validation =  $Validation && ($this->s_FacilityName->Errors->Count() == 0);
        return (($this->Errors->Count() == 0) && $Validation);
    }
//End Validate Method

//CheckErrors Method @9-FFF8A021
    function CheckErrors()
    {
        $errors = false;
        $errors = ($errors || $this->s_PregRegDate->Errors->Count());
        $errors = ($errors || $this->DatePicker_s_PregRegDate->Errors->Count());
        $errors = ($errors || $this->s_PregRegDateTo->Errors->Count());
        $errors = ($errors || $this->DatePicker_s_PregRegDateTo->Errors->Count());
        $errors = ($errors || $this->s_FacilityName->Errors->Count());
        $errors = ($errors || $this->Errors->Count());
        return $errors;
    }
//End CheckErrors Method

//MasterDetail @9-ED598703
function SetPrimaryKeys($keyArray)
{
    $this->PrimaryKeys = $keyArray;
}
function GetPrimaryKeys()
{
    return $this->PrimaryKeys;
}
function GetPrimaryKey($keyName)
{
    return $this->PrimaryKeys[$keyName];
}
//End MasterDetail

//Operation Method @9-6EBF88C0
    function Operation()
    {
        if(!$this->Visible)
            return;

        global $Redirect;
        global $FileName;

        if(!$this->FormSubmitted) {
            return;
        }

        if($this->FormSubmitted) {
            $this->PressedButton = "Button_DoSearch";
            if($this->Button_DoSearch->Pressed) {
                $this->PressedButton = "Button_DoSearch";
            }
        }
        $Redirect = "report_f21_district.php";
        if($this->Validate()) {
            if($this->PressedButton == "Button_DoSearch") {
                $Redirect = "report_f21_district.php" . "?" . CCMergeQueryStrings(CCGetQueryString("Form", array("Button_DoSearch", "Button_DoSearch_x", "Button_DoSearch_y")));
                if(!CCGetEvent($this->Button_DoSearch->CCSEvents, "OnClick", $this->Button_DoSearch)) {
                    $Redirect = "";
                }
            }
        } else {
            $Redirect = "";
        }
    }
//End Operation Method

//Show Method @9-174E4B0D
    function Show()
    {
        global $CCSUseAmp;
        global $Tpl;
        global $FileName;
        global $CCSLocales;
        $Error = "";

        if(!$this->Visible)
            return;

        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeSelect", $this);

        $this->s_FacilityName->Prepare();

        $RecordBlock = "Record " . $this->ComponentName;
        $ParentPath = $Tpl->block_path;
        $Tpl->block_path = $ParentPath . "/" . $RecordBlock;
        $this->EditMode = $this->EditMode && $this->ReadAllowed;
        if (!$this->FormSubmitted) {
        }

        if($this->FormSubmitted || $this->CheckErrors()) {
            $Error = "";
            $Error = ComposeStrings($Error, $this->s_PregRegDate->Errors->ToString());
            $Error = ComposeStrings($Error, $this->DatePicker_s_PregRegDate->Errors->ToString());
            $Error = ComposeStrings($Error, $this->s_PregRegDateTo->Errors->ToString());
            $Error = ComposeStrings($Error, $this->DatePicker_s_PregRegDateTo->Errors->ToString());
            $Error = ComposeStrings($Error, $this->s_FacilityName->Errors->ToString());
            $Error = ComposeStrings($Error, $this->Errors->ToString());
            $Tpl->SetVar("Error", $Error);
            $Tpl->Parse("Error", false);
        }
        $CCSForm = $this->EditMode ? $this->ComponentName . ":" . "Edit" : $this->ComponentName;
        $this->HTMLFormAction = $FileName . "?" . CCAddParam(CCGetQueryString("QueryString", ""), "ccsForm", $CCSForm);
        $Tpl->SetVar("Action", !$CCSUseAmp ? $this->HTMLFormAction : str_replace("&", "&amp;", $this->HTMLFormAction));
        $Tpl->SetVar("HTMLFormName", $this->ComponentName);
        $Tpl->SetVar("HTMLFormEnctype", $this->FormEnctype);

        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeShow", $this);
        $this->Attributes->Show();
        if(!$this->Visible) {
            $Tpl->block_path = $ParentPath;
            return;
        }

        $this->Button_DoSearch->Show();
        $this->s_PregRegDate->Show();
        $this->DatePicker_s_PregRegDate->Show();
        $this->s_PregRegDateTo->Show();
        $this->DatePicker_s_PregRegDateTo->Show();
        $this->s_FacilityName->Show();
        $Tpl->parse();
        $Tpl->block_path = $ParentPath;
    }
//End Show Method

} //End pregnancySearch Class @9-FCB6E20C

//pregnancy1 ReportGroup class @132-2509A2FA
class clsReportGrouppregnancy1 {
    public $GroupType;
    public $mode; //1 - open, 2 - close
    public $TotalCount_PregnancyID, $_TotalCount_PregnancyIDAttributes;
    public $Attributes;
    public $ReportTotalIndex = 0;
    public $PageTotalIndex;
    public $PageNumber;
    public $RowNumber;
    public $Parent;

    function clsReportGrouppregnancy1(& $parent) {
        $this->Parent = & $parent;
        $this->Attributes = $this->Parent->Attributes->GetAsArray();
    }
    function SetControls($PrevGroup = "") {
        $this->TotalCount_PregnancyID = $this->Parent->TotalCount_PregnancyID->Value;
    }

    function SetTotalControls($mode = "", $PrevGroup = "") {
        $this->_TotalCount_PregnancyIDAttributes = $this->Parent->TotalCount_PregnancyID->Attributes->GetAsArray();
    }
    function SyncWithHeader(& $Header) {
        $this->TotalCount_PregnancyID = $Header->TotalCount_PregnancyID;
        $Header->_TotalCount_PregnancyIDAttributes = $this->_TotalCount_PregnancyIDAttributes;
        $this->Parent->TotalCount_PregnancyID->Value = $Header->TotalCount_PregnancyID;
        $this->Parent->TotalCount_PregnancyID->Attributes->RestoreFromArray($Header->_TotalCount_PregnancyIDAttributes);
    }
    function ChangeTotalControls() {
    }
}
//End pregnancy1 ReportGroup class

//pregnancy1 GroupsCollection class @132-36751F1E
class clsGroupsCollectionpregnancy1 {
    public $Groups;
    public $mPageCurrentHeaderIndex;
    public $PageSize;
    public $TotalPages = 0;
    public $TotalRows = 0;
    public $CurrentPageSize = 0;
    public $Pages;
    public $Parent;
    public $LastDetailIndex;

    function clsGroupsCollectionpregnancy1(& $parent) {
        $this->Parent = & $parent;
        $this->Groups = array();
        $this->Pages  = array();
        $this->mReportTotalIndex = 0;
        $this->mPageTotalIndex = 1;
    }

    function & InitGroup() {
        $group = new clsReportGrouppregnancy1($this->Parent);
        $group->RowNumber = $this->TotalRows + 1;
        $group->PageNumber = $this->TotalPages;
        $group->PageTotalIndex = $this->mPageCurrentHeaderIndex;
        return $group;
    }

    function RestoreValues() {
        $this->Parent->TotalCount_PregnancyID->Value = $this->Parent->TotalCount_PregnancyID->initialValue;
    }

    function OpenPage() {
        $this->TotalPages++;
        $Group = & $this->InitGroup();
        $this->Parent->Page_Header->CCSEventResult = CCGetEvent($this->Parent->Page_Header->CCSEvents, "OnInitialize", $this->Parent->Page_Header);
        if ($this->Parent->Page_Header->Visible)
            $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Page_Header->Height;
        $Group->SetTotalControls("GetNextValue");
        $this->Parent->Page_Header->CCSEventResult = CCGetEvent($this->Parent->Page_Header->CCSEvents, "OnCalculate", $this->Parent->Page_Header);
        $Group->SetControls();
        $Group->Mode = 1;
        $Group->GroupType = "Page";
        $Group->PageTotalIndex = count($this->Groups);
        $this->mPageCurrentHeaderIndex = count($this->Groups);
        $this->Groups[] =  & $Group;
        $this->Pages[] =  count($this->Groups) == 2 ? 0 : count($this->Groups) - 1;
    }

    function OpenGroup($groupName) {
        $Group = "";
        $OpenFlag = false;
        if ($groupName == "Report") {
            $Group = & $this->InitGroup(true);
            $this->Parent->Report_Header->CCSEventResult = CCGetEvent($this->Parent->Report_Header->CCSEvents, "OnInitialize", $this->Parent->Report_Header);
            if ($this->Parent->Report_Header->Visible) 
                $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Report_Header->Height;
                $Group->SetTotalControls("GetNextValue");
            $this->Parent->Report_Header->CCSEventResult = CCGetEvent($this->Parent->Report_Header->CCSEvents, "OnCalculate", $this->Parent->Report_Header);
            $Group->SetControls();
            $Group->Mode = 1;
            $Group->GroupType = "Report";
            $this->Groups[] = & $Group;
            $this->OpenPage();
        }
    }

    function ClosePage() {
        $Group = & $this->InitGroup();
        $this->Parent->Page_Footer->CCSEventResult = CCGetEvent($this->Parent->Page_Footer->CCSEvents, "OnInitialize", $this->Parent->Page_Footer);
        $Group->SetTotalControls("GetPrevValue");
        $Group->SyncWithHeader($this->Groups[$this->mPageCurrentHeaderIndex]);
        $this->Parent->Page_Footer->CCSEventResult = CCGetEvent($this->Parent->Page_Footer->CCSEvents, "OnCalculate", $this->Parent->Page_Footer);
        $Group->SetControls();
        $this->RestoreValues();
        $this->CurrentPageSize = 0;
        $Group->Mode = 2;
        $Group->GroupType = "Page";
        $this->Groups[] = & $Group;
    }

    function CloseGroup($groupName)
    {
        $Group = "";
        if ($groupName == "Report") {
            $Group = & $this->InitGroup(true);
            $this->Parent->Report_Footer->CCSEventResult = CCGetEvent($this->Parent->Report_Footer->CCSEvents, "OnInitialize", $this->Parent->Report_Footer);
            if ($this->Parent->Page_Footer->Visible) 
                $OverSize = $this->Parent->Report_Footer->Height + $this->Parent->Page_Footer->Height;
            else
                $OverSize = $this->Parent->Report_Footer->Height;
            if (($this->PageSize > 0) and $this->Parent->Report_Footer->Visible and ($this->CurrentPageSize + $OverSize > $this->PageSize)) {
                $this->ClosePage();
                $this->OpenPage();
            }
            $Group->SetTotalControls("GetPrevValue");
            $Group->SyncWithHeader($this->Groups[0]);
            if ($this->Parent->Report_Footer->Visible)
                $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Report_Footer->Height;
            $this->Parent->Report_Footer->CCSEventResult = CCGetEvent($this->Parent->Report_Footer->CCSEvents, "OnCalculate", $this->Parent->Report_Footer);
            $Group->SetControls();
            $this->RestoreValues();
            $Group->Mode = 2;
            $Group->GroupType = "Report";
            $this->Groups[] = & $Group;
            $this->ClosePage();
            return;
        }
    }

    function AddItem()
    {
        $Group = & $this->InitGroup(true);
        $this->Parent->Detail->CCSEventResult = CCGetEvent($this->Parent->Detail->CCSEvents, "OnInitialize", $this->Parent->Detail);
        if ($this->Parent->Page_Footer->Visible) 
            $OverSize = $this->Parent->Detail->Height + $this->Parent->Page_Footer->Height;
        else
            $OverSize = $this->Parent->Detail->Height;
        if (($this->PageSize > 0) and $this->Parent->Detail->Visible and ($this->CurrentPageSize + $OverSize > $this->PageSize)) {
            $this->ClosePage();
            $this->OpenPage();
        }
        $this->TotalRows++;
        if ($this->LastDetailIndex)
            $PrevGroup = & $this->Groups[$this->LastDetailIndex];
        else
            $PrevGroup = "";
        $Group->SetTotalControls("", $PrevGroup);
        if ($this->Parent->Detail->Visible)
            $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Detail->Height;
        $this->Parent->Detail->CCSEventResult = CCGetEvent($this->Parent->Detail->CCSEvents, "OnCalculate", $this->Parent->Detail);
        $Group->SetControls($PrevGroup);
        $this->LastDetailIndex = count($this->Groups);
        $this->Groups[] = & $Group;
    }
}
//End pregnancy1 GroupsCollection class

class clsReportpregnancy1 { //pregnancy1 Class @132-F06BA686

//pregnancy1 Variables @132-944D286E

    public $ComponentType = "Report";
    public $PageSize;
    public $ComponentName;
    public $Visible;
    public $Errors;
    public $CCSEvents = array();
    public $CCSEventResult;
    public $RelativePath = "";
    public $ViewMode = "Web";
    public $TemplateBlock;
    public $PageNumber;
    public $RowNumber;
    public $TotalRows;
    public $TotalPages;
    public $ControlsVisible = array();
    public $IsEmpty;
    public $Attributes;
    public $DetailBlock, $Detail;
    public $Report_FooterBlock, $Report_Footer;
    public $Report_HeaderBlock, $Report_Header;
    public $Page_FooterBlock, $Page_Footer;
    public $Page_HeaderBlock, $Page_Header;
    public $SorterName, $SorterDirection;

    public $ds;
    public $DataSource;
    public $UseClientPaging = false;

    //Report Controls
    public $StaticControls, $RowControls, $Report_FooterControls, $Report_HeaderControls;
    public $Page_FooterControls, $Page_HeaderControls;
//End pregnancy1 Variables

//Class_Initialize Event @132-9C4327FC
    function clsReportpregnancy1($RelativePath = "", & $Parent)
    {
        global $FileName;
        global $CCSLocales;
        global $DefaultDateFormat;
        $this->ComponentName = "pregnancy1";
        $this->Visible = True;
        $this->Parent = & $Parent;
        $this->RelativePath = $RelativePath;
        $this->Attributes = new clsAttributes($this->ComponentName . ":");
        $this->Detail = new clsSection($this);
        $MinPageSize = 0;
        $MaxSectionSize = 0;
        $this->Detail->Height = 1;
        $MaxSectionSize = max($MaxSectionSize, $this->Detail->Height);
        $this->Report_Footer = new clsSection($this);
        $this->Report_Footer->Height = 1;
        $MaxSectionSize = max($MaxSectionSize, $this->Report_Footer->Height);
        $this->Report_Header = new clsSection($this);
        $this->Page_Footer = new clsSection($this);
        $this->Page_Footer->Height = 1;
        $MinPageSize += $this->Page_Footer->Height;
        $this->Page_Header = new clsSection($this);
        $this->Page_Header->Height = 1;
        $MinPageSize += $this->Page_Header->Height;
        $this->Errors = new clsErrors();
        $this->DataSource = new clspregnancy1DataSource($this);
        $this->ds = & $this->DataSource;
        $PageSize = CCGetParam($this->ComponentName . "PageSize", "");
        if(is_numeric($PageSize) && $PageSize > 0) {
            $this->PageSize = $PageSize;
        } else {
            if (!is_numeric($PageSize) || $PageSize < 0)
                $this->PageSize = 40;
             else if ($PageSize == "0")
                $this->PageSize = 100;
             else 
                $this->PageSize = min(100, $PageSize);
        }
        $MinPageSize += $MaxSectionSize;
        if ($this->PageSize && $MinPageSize && $this->PageSize < $MinPageSize)
            $this->PageSize = $MinPageSize;
        $this->PageNumber = $this->ViewMode == "Print" ? 1 : intval(CCGetParam($this->ComponentName . "Page", 1));
        if ($this->PageNumber <= 0 ) {
            $this->PageNumber = 1;
        }

        $this->NoRecords = new clsPanel("NoRecords", $this);
        $this->TotalCount_PregnancyID = new clsControl(ccsReportLabel, "TotalCount_PregnancyID", "TotalCount_PregnancyID", ccsInteger, "", "", $this);
    }
//End Class_Initialize Event

//Initialize Method @132-6C59EE65
    function Initialize()
    {
        if(!$this->Visible) return;

        $this->DataSource->PageSize = $this->PageSize;
        $this->DataSource->AbsolutePage = $this->PageNumber;
        $this->DataSource->SetOrder($this->SorterName, $this->SorterDirection);
    }
//End Initialize Method

//CheckErrors Method @132-EFE7E567
    function CheckErrors()
    {
        $errors = false;
        $errors = ($errors || $this->TotalCount_PregnancyID->Errors->Count());
        $errors = ($errors || $this->Errors->Count());
        $errors = ($errors || $this->DataSource->Errors->Count());
        return $errors;
    }
//End CheckErrors Method

//GetErrors Method @132-CB096301
    function GetErrors()
    {
        $errors = "";
        $errors = ComposeStrings($errors, $this->TotalCount_PregnancyID->Errors->ToString());
        $errors = ComposeStrings($errors, $this->Errors->ToString());
        $errors = ComposeStrings($errors, $this->DataSource->Errors->ToString());
        return $errors;
    }
//End GetErrors Method

//Show Method @132-EF45E9D4
    function Show()
    {
        global $Tpl;
        global $CCSLocales;
        if(!$this->Visible) return;

        $ShownRecords = 0;

        $this->DataSource->Parameters["urls_PregRegDate"] = CCGetFromGet("s_PregRegDate", NULL);
        $this->DataSource->Parameters["urls_PregRegDateTo"] = CCGetFromGet("s_PregRegDateTo", NULL);
        $this->DataSource->Parameters["urls_FacilityName"] = CCGetFromGet("s_FacilityName", NULL);

        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeSelect", $this);


        $this->DataSource->Prepare();
        $this->DataSource->Open();

        $Groups = new clsGroupsCollectionpregnancy1($this);
        $Groups->PageSize = $this->PageSize > 0 ? $this->PageSize : 0;

        $is_next_record = $this->DataSource->next_record();
        $this->IsEmpty = ! $is_next_record;
        while($is_next_record) {
            $this->DataSource->SetValues();
            $this->TotalCount_PregnancyID->SetValue($this->DataSource->TotalCount_PregnancyID->GetValue());
            if (count($Groups->Groups) == 0) $Groups->OpenGroup("Report");
            $Groups->AddItem();
            $is_next_record = $this->DataSource->next_record();
        }
        if (!count($Groups->Groups)) 
            $Groups->OpenGroup("Report");
        else
            $this->NoRecords->Visible = false;
        $Groups->CloseGroup("Report");
        $this->TotalPages = $Groups->TotalPages;
        $this->TotalRows = $Groups->TotalRows;

        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeShow", $this);
        if(!$this->Visible) return;

        $this->Attributes->Show();
        $ReportBlock = "Report " . $this->ComponentName;
        $ParentPath = $Tpl->block_path;
        $Tpl->block_path = $ParentPath . "/" . $ReportBlock;

        if($this->CheckErrors()) {
            $Tpl->replaceblock("", $this->GetErrors());
            $Tpl->block_path = $ParentPath;
            return;
        } else {
            $items = & $Groups->Groups;
            $i = $Groups->Pages[min($this->PageNumber, $Groups->TotalPages) - 1];
            do {
                $this->Attributes->RestoreFromArray($items[$i]->Attributes);
                $this->RowNumber = $items[$i]->RowNumber;
                switch ($items[$i]->GroupType) {
                    Case "":
                        $this->Detail->CCSEventResult = CCGetEvent($this->Detail->CCSEvents, "BeforeShow", $this->Detail);
                        if ($this->Detail->Visible) {
                            $this->Attributes->Show();
                            $Tpl->parseto("Section Detail", true, "Section Detail");
                        }
                        break;
                    case "Report":
                        if ($items[$i]->Mode == 1) {
                            $this->Report_Header->CCSEventResult = CCGetEvent($this->Report_Header->CCSEvents, "BeforeShow", $this->Report_Header);
                            if ($this->Report_Header->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Report_Header";
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Report_Header", true, "Section Detail");
                            }
                        }
                        if ($items[$i]->Mode == 2) {
                            $this->TotalCount_PregnancyID->SetValue($items[$i]->TotalCount_PregnancyID);
                            $this->TotalCount_PregnancyID->Attributes->RestoreFromArray($items[$i]->_TotalCount_PregnancyIDAttributes);
                            $this->Report_Footer->CCSEventResult = CCGetEvent($this->Report_Footer->CCSEvents, "BeforeShow", $this->Report_Footer);
                            if ($this->Report_Footer->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Report_Footer";
                                $this->NoRecords->Show();
                                $this->TotalCount_PregnancyID->Show();
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Report_Footer", true, "Section Detail");
                            }
                        }
                        break;
                    case "Page":
                        if ($items[$i]->Mode == 1) {
                            $this->Page_Header->CCSEventResult = CCGetEvent($this->Page_Header->CCSEvents, "BeforeShow", $this->Page_Header);
                            if ($this->Page_Header->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Page_Header";
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Page_Header", true, "Section Detail");
                            }
                        }
                        if ($items[$i]->Mode == 2 && !$this->UseClientPaging || $items[$i]->Mode == 1 && $this->UseClientPaging) {
                            $this->Page_Footer->CCSEventResult = CCGetEvent($this->Page_Footer->CCSEvents, "BeforeShow", $this->Page_Footer);
                            if ($this->Page_Footer->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Page_Footer";
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Page_Footer", true, "Section Detail");
                            }
                        }
                        break;
                }
                $i++;
            } while ($i < count($items) && ($this->ViewMode == "Print" ||  !($i > 1 && $items[$i]->GroupType == 'Page' && $items[$i]->Mode == 1)));
            $Tpl->block_path = $ParentPath;
            $Tpl->parse($ReportBlock);
            $this->DataSource->close();
        }

    }
//End Show Method

} //End pregnancy1 Class @132-FCB6E20C

class clspregnancy1DataSource extends clsDBregistry_db {  //pregnancy1DataSource Class @132-9DC65070

//DataSource Variables @132-27A3E741
    public $Parent = "";
    public $CCSEvents = "";
    public $CCSEventResult;
    public $ErrorBlock;
    public $CmdExecution;

    public $wp;


    // Datasource fields
    public $TotalCount_PregnancyID;
//End DataSource Variables

//DataSourceClass_Initialize Event @132-5D205F3A
    function clspregnancy1DataSource(& $Parent)
    {
        $this->Parent = & $Parent;
        $this->ErrorBlock = "Report pregnancy1";
        $this->Initialize();
        $this->TotalCount_PregnancyID = new clsField("TotalCount_PregnancyID", ccsInteger, "");
        

    }
//End DataSourceClass_Initialize Event

//SetOrder Method @132-9E1383D1
    function SetOrder($SorterName, $SorterDirection)
    {
        $this->Order = "";
        $this->Order = CCGetOrder($this->Order, $SorterName, $SorterDirection, 
            "");
    }
//End SetOrder Method

//Prepare Method @132-081B9768
    function Prepare()
    {
        global $CCSLocales;
        global $DefaultDateFormat;
        $this->wp = new clsSQLParameters($this->ErrorBlock);
        $this->wp->AddParameter("1", "urls_PregRegDate", ccsDate, array("ShortDate"), array("yyyy", "-", "mm", "-", "dd", " ", "HH", ":", "nn", ":", "ss"), $this->Parameters["urls_PregRegDate"], CCFormatDate(CCParseDate("1000-01-01",array("yyyy","-","mm","-","dd")),array("ShortDate")), false);
        $this->wp->AddParameter("2", "urls_PregRegDateTo", ccsDate, array("ShortDate"), array("yyyy", "-", "mm", "-", "dd", " ", "HH", ":", "nn", ":", "ss"), $this->Parameters["urls_PregRegDateTo"], CCFormatDate(CCParseDate("2999-01-01",array("yyyy","-","mm","-","dd")),array("ShortDate")), false);
        $this->wp->AddParameter("3", "urls_FacilityName", ccsText, "", "", $this->Parameters["urls_FacilityName"], "", false);
    }
//End Prepare Method

//Open Method @132-D8CCDF86
    function Open()
    {
        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeBuildSelect", $this->Parent);
        $this->SQL = "SELECT COUNT(DISTINCT pregnancy.PregnancyID) AS pregnancy_PregnancyID\n" .
        "FROM (delivery LEFT JOIN pregnancy ON\n" .
        "delivery.PregnancyID = pregnancy.PregnancyID) LEFT JOIN facilities ON\n" .
        "pregnancy.FacilityID = facilities.FacilityID \n" .
        "WHERE delivery.DataDelivery >= '" . $this->SQLValue($this->wp->GetDBValue("1"), ccsDate) . "'\n" .
        "AND delivery.DataDelivery <= '" . $this->SQLValue($this->wp->GetDBValue("2"), ccsDate) . "'\n" .
        "AND ((delivery.PregnancyOutcome1ID>0 AND delivery.PregnancyOutcome1ID<3)\n" .
        "OR (delivery.PregnancyOutcome2ID>0 AND delivery.PregnancyOutcome2ID<3)\n" .
        "OR (delivery.PregnancyOutcome3ID>0 AND delivery.PregnancyOutcome3ID<3))\n" .
        "AND facilities.FacilityName LIKE '%" . $this->SQLValue($this->wp->GetDBValue("3"), ccsText) . "%'";
        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeExecuteSelect", $this->Parent);
        $this->query(CCBuildSQL($this->SQL, $this->Where, $this->Order));
        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "AfterExecuteSelect", $this->Parent);
    }
//End Open Method

//SetValues Method @132-57EFFE32
    function SetValues()
    {
        $this->TotalCount_PregnancyID->SetDBValue(trim($this->f("pregnancy_PregnancyID")));
    }
//End SetValues Method

} //End pregnancy1DataSource Class @132-FCB6E20C

//Report1 ReportGroup class @209-F26E3CDA
class clsReportGroupReport1 {
    public $GroupType;
    public $mode; //1 - open, 2 - close
    public $Age, $_AgeAttributes;
    public $TotalPreg, $_TotalPregAttributes;
    public $TotalPreg1, $TotalPreg1217Rel, $_TotalPreg1Attributes;
    public $TotalSum_TotalPreg, $_TotalSum_TotalPregAttributes;
    public $Attributes;
    public $ReportTotalIndex = 0;
    public $PageTotalIndex;
    public $PageNumber;
    public $RowNumber;
    public $Parent;

    function clsReportGroupReport1(& $parent) {
        $this->Parent = & $parent;
        $this->Attributes = $this->Parent->Attributes->GetAsArray();
    }
    function SetControls($PrevGroup = "") {
        $this->Age = $this->Parent->Age->Value;
        $this->TotalPreg = $this->Parent->TotalPreg->Value;
        $this->TotalPreg1 = $this->Parent->TotalPreg1->Value;
    }

    function SetTotalControls($mode = "", $PrevGroup = "") {
        $this->TotalSum_TotalPreg = $this->Parent->TotalSum_TotalPreg->GetTotalValue($mode);
        $this->Parent->TotalPreg1->GetTotalValue($mode);
        $this->TotalPreg1217Rel = $this->Parent->TotalPreg1->ValueRelative;
        $this->_Sorter_TotalPregAttributes = $this->Parent->Sorter_TotalPreg->Attributes->GetAsArray();
        $this->_AgeAttributes = $this->Parent->Age->Attributes->GetAsArray();
        $this->_TotalPregAttributes = $this->Parent->TotalPreg->Attributes->GetAsArray();
        $this->_TotalPreg1Attributes = $this->Parent->TotalPreg1->Attributes->GetAsArray();
        $this->_TotalSum_TotalPregAttributes = $this->Parent->TotalSum_TotalPreg->Attributes->GetAsArray();
    }
    function SyncWithHeader(& $Header) {
        $Header->TotalSum_TotalPreg = $this->TotalSum_TotalPreg;
        $Header->_TotalSum_TotalPregAttributes = $this->_TotalSum_TotalPregAttributes;
        $this->Age = $Header->Age;
        $Header->_AgeAttributes = $this->_AgeAttributes;
        $this->Parent->Age->Value = $Header->Age;
        $this->Parent->Age->Attributes->RestoreFromArray($Header->_AgeAttributes);
        $this->TotalPreg = $Header->TotalPreg;
        $Header->_TotalPregAttributes = $this->_TotalPregAttributes;
        $this->Parent->TotalPreg->Value = $Header->TotalPreg;
        $this->Parent->TotalPreg->Attributes->RestoreFromArray($Header->_TotalPregAttributes);
        $this->TotalPreg1 = $Header->TotalPreg1;
        $Header->_TotalPreg1Attributes = $this->_TotalPreg1Attributes;
        $this->Parent->TotalPreg1->Value = $Header->TotalPreg1;
        $this->Parent->TotalPreg1->Attributes->RestoreFromArray($Header->_TotalPreg1Attributes);
        $Header->TotalPreg1217Rel = $this->TotalPreg1217Rel;
    }
    function ChangeTotalControls() {
        $this->TotalPreg1 = $this->Parent->TotalPreg1->GetValue();
        $this->TotalSum_TotalPreg = $this->Parent->TotalSum_TotalPreg->GetValue();
    }
}
//End Report1 ReportGroup class

//Report1 GroupsCollection class @209-A8E7C1C5
class clsGroupsCollectionReport1 {
    public $Groups;
    public $mPageCurrentHeaderIndex;
    public $PageSize;
    public $TotalPages = 0;
    public $TotalRows = 0;
    public $CurrentPageSize = 0;
    public $Pages;
    public $Parent;
    public $LastDetailIndex;

    function clsGroupsCollectionReport1(& $parent) {
        $this->Parent = & $parent;
        $this->Groups = array();
        $this->Pages  = array();
        $this->mReportTotalIndex = 0;
        $this->mPageTotalIndex = 1;
    }

    function & InitGroup() {
        $group = new clsReportGroupReport1($this->Parent);
        $group->RowNumber = $this->TotalRows + 1;
        $group->PageNumber = $this->TotalPages;
        $group->PageTotalIndex = $this->mPageCurrentHeaderIndex;
        return $group;
    }

    function RestoreValues() {
        $this->Parent->Age->Value = $this->Parent->Age->initialValue;
        $this->Parent->TotalPreg->Value = $this->Parent->TotalPreg->initialValue;
        $this->Parent->TotalPreg1->Value = $this->Parent->TotalPreg1->initialValue;
        $this->Parent->TotalSum_TotalPreg->Value = $this->Parent->TotalSum_TotalPreg->initialValue;
    }

    function OpenPage() {
        $this->TotalPages++;
        $Group = & $this->InitGroup();
        $this->Parent->Page_Header->CCSEventResult = CCGetEvent($this->Parent->Page_Header->CCSEvents, "OnInitialize", $this->Parent->Page_Header);
        if ($this->Parent->Page_Header->Visible)
            $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Page_Header->Height;
        $Group->SetTotalControls("GetNextValue");
        $this->Parent->Page_Header->CCSEventResult = CCGetEvent($this->Parent->Page_Header->CCSEvents, "OnCalculate", $this->Parent->Page_Header);
        $Group->SetControls();
        $Group->Mode = 1;
        $Group->GroupType = "Page";
        $Group->PageTotalIndex = count($this->Groups);
        $this->mPageCurrentHeaderIndex = count($this->Groups);
        $this->Groups[] =  & $Group;
        $this->Pages[] =  count($this->Groups) == 2 ? 0 : count($this->Groups) - 1;
    }

    function OpenGroup($groupName) {
        $Group = "";
        $OpenFlag = false;
        if ($groupName == "Report") {
            $Group = & $this->InitGroup(true);
            $this->Parent->Report_Header->CCSEventResult = CCGetEvent($this->Parent->Report_Header->CCSEvents, "OnInitialize", $this->Parent->Report_Header);
            if ($this->Parent->Report_Header->Visible) 
                $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Report_Header->Height;
                $Group->SetTotalControls("GetNextValue");
            $this->Parent->Report_Header->CCSEventResult = CCGetEvent($this->Parent->Report_Header->CCSEvents, "OnCalculate", $this->Parent->Report_Header);
            $Group->SetControls();
            $Group->Mode = 1;
            $Group->GroupType = "Report";
            $this->Groups[] = & $Group;
            $this->OpenPage();
        }
    }

    function ClosePage() {
        $Group = & $this->InitGroup();
        $this->Parent->Page_Footer->CCSEventResult = CCGetEvent($this->Parent->Page_Footer->CCSEvents, "OnInitialize", $this->Parent->Page_Footer);
        $Group->SetTotalControls("GetPrevValue");
        $Group->SyncWithHeader($this->Groups[$this->mPageCurrentHeaderIndex]);
        $this->Parent->Page_Footer->CCSEventResult = CCGetEvent($this->Parent->Page_Footer->CCSEvents, "OnCalculate", $this->Parent->Page_Footer);
        $Group->SetControls();
        $this->RestoreValues();
        $this->CurrentPageSize = 0;
        $Group->Mode = 2;
        $Group->GroupType = "Page";
        $this->Groups[] = & $Group;
    }

    function CloseGroup($groupName)
    {
        $Group = "";
        if ($groupName == "Report") {
            $Group = & $this->InitGroup(true);
            $this->Parent->Report_Footer->CCSEventResult = CCGetEvent($this->Parent->Report_Footer->CCSEvents, "OnInitialize", $this->Parent->Report_Footer);
            if ($this->Parent->Page_Footer->Visible) 
                $OverSize = $this->Parent->Report_Footer->Height + $this->Parent->Page_Footer->Height;
            else
                $OverSize = $this->Parent->Report_Footer->Height;
            if (($this->PageSize > 0) and $this->Parent->Report_Footer->Visible and ($this->CurrentPageSize + $OverSize > $this->PageSize)) {
                $this->ClosePage();
                $this->OpenPage();
            }
            $Group->SetTotalControls("GetPrevValue");
            $Group->SyncWithHeader($this->Groups[0]);
            if ($this->Parent->Report_Footer->Visible)
                $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Report_Footer->Height;
            $this->Parent->Report_Footer->CCSEventResult = CCGetEvent($this->Parent->Report_Footer->CCSEvents, "OnCalculate", $this->Parent->Report_Footer);
            $Group->SetControls();
            $this->RestoreValues();
            $Group->Mode = 2;
            $Group->GroupType = "Report";
            $this->Groups[] = & $Group;
            $this->ClosePage();
            return;
        }
    }

    function AddItem()
    {
        $Group = & $this->InitGroup(true);
        $this->Parent->Detail->CCSEventResult = CCGetEvent($this->Parent->Detail->CCSEvents, "OnInitialize", $this->Parent->Detail);
        if ($this->Parent->Page_Footer->Visible) 
            $OverSize = $this->Parent->Detail->Height + $this->Parent->Page_Footer->Height;
        else
            $OverSize = $this->Parent->Detail->Height;
        if (($this->PageSize > 0) and $this->Parent->Detail->Visible and ($this->CurrentPageSize + $OverSize > $this->PageSize)) {
            $this->ClosePage();
            $this->OpenPage();
        }
        $this->TotalRows++;
        if ($this->LastDetailIndex)
            $PrevGroup = & $this->Groups[$this->LastDetailIndex];
        else
            $PrevGroup = "";
        $Group->SetTotalControls("", $PrevGroup);
        if ($this->Parent->Detail->Visible)
            $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Detail->Height;
        $this->Parent->Detail->CCSEventResult = CCGetEvent($this->Parent->Detail->CCSEvents, "OnCalculate", $this->Parent->Detail);
        $Group->SetControls($PrevGroup);
        $this->LastDetailIndex = count($this->Groups);
        $this->Groups[] = & $Group;
    }
}
//End Report1 GroupsCollection class

class clsReportReport1 { //Report1 Class @209-BC2FB08C

//Report1 Variables @209-A523C62E

    public $ComponentType = "Report";
    public $PageSize;
    public $ComponentName;
    public $Visible;
    public $Errors;
    public $CCSEvents = array();
    public $CCSEventResult;
    public $RelativePath = "";
    public $ViewMode = "Web";
    public $TemplateBlock;
    public $PageNumber;
    public $RowNumber;
    public $TotalRows;
    public $TotalPages;
    public $ControlsVisible = array();
    public $IsEmpty;
    public $Attributes;
    public $DetailBlock, $Detail;
    public $Report_FooterBlock, $Report_Footer;
    public $Report_HeaderBlock, $Report_Header;
    public $Page_FooterBlock, $Page_Footer;
    public $Page_HeaderBlock, $Page_Header;
    public $SorterName, $SorterDirection;

    public $ds;
    public $DataSource;
    public $UseClientPaging = false;

    //Report Controls
    public $StaticControls, $RowControls, $Report_FooterControls, $Report_HeaderControls;
    public $Page_FooterControls, $Page_HeaderControls;
    public $Sorter_TotalPreg;
//End Report1 Variables

//Class_Initialize Event @209-2542B68C
    function clsReportReport1($RelativePath = "", & $Parent)
    {
        global $FileName;
        global $CCSLocales;
        global $DefaultDateFormat;
        $this->ComponentName = "Report1";
        $this->Visible = True;
        $this->Parent = & $Parent;
        $this->RelativePath = $RelativePath;
        $this->Attributes = new clsAttributes($this->ComponentName . ":");
        $this->Detail = new clsSection($this);
        $MinPageSize = 0;
        $MaxSectionSize = 0;
        $this->Detail->Height = 1;
        $MaxSectionSize = max($MaxSectionSize, $this->Detail->Height);
        $this->Report_Footer = new clsSection($this);
        $this->Report_Footer->Height = 1;
        $MaxSectionSize = max($MaxSectionSize, $this->Report_Footer->Height);
        $this->Report_Header = new clsSection($this);
        $this->Page_Footer = new clsSection($this);
        $this->Page_Footer->Height = 1;
        $MinPageSize += $this->Page_Footer->Height;
        $this->Page_Header = new clsSection($this);
        $this->Page_Header->Height = 1;
        $MinPageSize += $this->Page_Header->Height;
        $this->Errors = new clsErrors();
        $this->DataSource = new clsReport1DataSource($this);
        $this->ds = & $this->DataSource;
        $PageSize = CCGetParam($this->ComponentName . "PageSize", "");
        if(is_numeric($PageSize) && $PageSize > 0) {
            $this->PageSize = $PageSize;
        } else {
            if (!is_numeric($PageSize) || $PageSize < 0)
                $this->PageSize = 40;
             else if ($PageSize == "0")
                $this->PageSize = 100;
             else 
                $this->PageSize = min(100, $PageSize);
        }
        $MinPageSize += $MaxSectionSize;
        if ($this->PageSize && $MinPageSize && $this->PageSize < $MinPageSize)
            $this->PageSize = $MinPageSize;
        $this->PageNumber = $this->ViewMode == "Print" ? 1 : intval(CCGetParam($this->ComponentName . "Page", 1));
        if ($this->PageNumber <= 0 ) {
            $this->PageNumber = 1;
        }
        $this->SorterName = CCGetParam("Report1Order", "");
        $this->SorterDirection = CCGetParam("Report1Dir", "");

        $this->Sorter_TotalPreg = new clsSorter($this->ComponentName, "Sorter_TotalPreg", $FileName, $this);
        $this->Age = new clsControl(ccsReportLabel, "Age", "Age", ccsText, "", "", $this);
        $this->TotalPreg = new clsControl(ccsReportLabel, "TotalPreg", "TotalPreg", ccsInteger, "", "", $this);
        $this->TotalPreg1 = new clsControl(ccsReportLabel, "TotalPreg1", "TotalPreg1", ccsFloat, "", "", $this);
        $this->TotalPreg1->IsPercent = true;
        $this->NoRecords = new clsPanel("NoRecords", $this);
        $this->TotalSum_TotalPreg = new clsControl(ccsReportLabel, "TotalSum_TotalPreg", "TotalSum_TotalPreg", ccsInteger, "", "", $this);
        $this->TotalSum_TotalPreg->TotalFunction = "Sum";
    }
//End Class_Initialize Event

//Initialize Method @209-6C59EE65
    function Initialize()
    {
        if(!$this->Visible) return;

        $this->DataSource->PageSize = $this->PageSize;
        $this->DataSource->AbsolutePage = $this->PageNumber;
        $this->DataSource->SetOrder($this->SorterName, $this->SorterDirection);
    }
//End Initialize Method

//CheckErrors Method @209-E49AEE3E
    function CheckErrors()
    {
        $errors = false;
        $errors = ($errors || $this->Age->Errors->Count());
        $errors = ($errors || $this->TotalPreg->Errors->Count());
        $errors = ($errors || $this->TotalPreg1->Errors->Count());
        $errors = ($errors || $this->TotalSum_TotalPreg->Errors->Count());
        $errors = ($errors || $this->Errors->Count());
        $errors = ($errors || $this->DataSource->Errors->Count());
        return $errors;
    }
//End CheckErrors Method

//GetErrors Method @209-BB86B1E9
    function GetErrors()
    {
        $errors = "";
        $errors = ComposeStrings($errors, $this->Age->Errors->ToString());
        $errors = ComposeStrings($errors, $this->TotalPreg->Errors->ToString());
        $errors = ComposeStrings($errors, $this->TotalPreg1->Errors->ToString());
        $errors = ComposeStrings($errors, $this->TotalSum_TotalPreg->Errors->ToString());
        $errors = ComposeStrings($errors, $this->Errors->ToString());
        $errors = ComposeStrings($errors, $this->DataSource->Errors->ToString());
        return $errors;
    }
//End GetErrors Method

//Show Method @209-BBC0598B
    function Show()
    {
        global $Tpl;
        global $CCSLocales;
        if(!$this->Visible) return;

        $ShownRecords = 0;

        $this->DataSource->Parameters["urls_PregRegDate"] = CCGetFromGet("s_PregRegDate", NULL);
        $this->DataSource->Parameters["urls_PregRegDateTo"] = CCGetFromGet("s_PregRegDateTo", NULL);
        $this->DataSource->Parameters["urls_FacilityName"] = CCGetFromGet("s_FacilityName", NULL);

        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeSelect", $this);


        $this->DataSource->Prepare();
        $this->DataSource->Open();

        $Groups = new clsGroupsCollectionReport1($this);
        $Groups->PageSize = $this->PageSize > 0 ? $this->PageSize : 0;

        $is_next_record = $this->DataSource->next_record();
        $this->IsEmpty = ! $is_next_record;
        while($is_next_record) {
            $this->DataSource->SetValues();
            $this->Age->SetValue($this->DataSource->Age->GetValue());
            $this->TotalPreg->SetValue($this->DataSource->TotalPreg->GetValue());
            $this->TotalPreg1->SetValue($this->DataSource->TotalPreg1->GetValue());
            $this->TotalSum_TotalPreg->SetValue($this->DataSource->TotalSum_TotalPreg->GetValue());
            if (count($Groups->Groups) == 0) $Groups->OpenGroup("Report");
            $Groups->AddItem();
            $is_next_record = $this->DataSource->next_record();
        }
        if (!count($Groups->Groups)) 
            $Groups->OpenGroup("Report");
        else
            $this->NoRecords->Visible = false;
        $Groups->CloseGroup("Report");
        $this->TotalPages = $Groups->TotalPages;
        $this->TotalRows = $Groups->TotalRows;

        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeShow", $this);
        if(!$this->Visible) return;

        $this->Attributes->Show();
        $ReportBlock = "Report " . $this->ComponentName;
        $ParentPath = $Tpl->block_path;
        $Tpl->block_path = $ParentPath . "/" . $ReportBlock;

        if($this->CheckErrors()) {
            $Tpl->replaceblock("", $this->GetErrors());
            $Tpl->block_path = $ParentPath;
            return;
        } else {
            $items = & $Groups->Groups;
            $i = $Groups->Pages[min($this->PageNumber, $Groups->TotalPages) - 1];
            $this->ControlsVisible["Age"] = $this->Age->Visible;
            $this->ControlsVisible["TotalPreg"] = $this->TotalPreg->Visible;
            $this->ControlsVisible["TotalPreg1"] = $this->TotalPreg1->Visible;
            do {
                $this->Attributes->RestoreFromArray($items[$i]->Attributes);
                $this->RowNumber = $items[$i]->RowNumber;
                switch ($items[$i]->GroupType) {
                    Case "":
                        $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Detail";
                        $this->Age->SetValue($items[$i]->Age);
                        $this->Age->Attributes->RestoreFromArray($items[$i]->_AgeAttributes);
                        $this->TotalPreg->SetValue($items[$i]->TotalPreg);
                        $this->TotalPreg->Attributes->RestoreFromArray($items[$i]->_TotalPregAttributes);
                        $this->TotalPreg1->SetValue($items[$items[$i]->ReportTotalIndex]->TotalPreg1217Rel && strval($items[$i]->TotalPreg1) != "" ? $items[$i]->TotalPreg1 / $items[$items[$i]->ReportTotalIndex]->TotalPreg1217Rel : "");
                        $this->TotalPreg1->Attributes->RestoreFromArray($items[$i]->_TotalPreg1Attributes);
                        $this->Detail->CCSEventResult = CCGetEvent($this->Detail->CCSEvents, "BeforeShow", $this->Detail);
                        $this->Attributes->Show();
                        $this->Age->Show();
                        $this->TotalPreg->Show();
                        $this->TotalPreg1->Show();
                        $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                        if ($this->Detail->Visible)
                            $Tpl->parseto("Section Detail", true, "Section Detail");
                        break;
                    case "Report":
                        if ($items[$i]->Mode == 1) {
                            $this->Report_Header->CCSEventResult = CCGetEvent($this->Report_Header->CCSEvents, "BeforeShow", $this->Report_Header);
                            if ($this->Report_Header->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Report_Header";
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Report_Header", true, "Section Detail");
                            }
                        }
                        if ($items[$i]->Mode == 2) {
                            $this->TotalSum_TotalPreg->SetValue($items[$i]->TotalSum_TotalPreg);
                            $this->TotalSum_TotalPreg->Attributes->RestoreFromArray($items[$i]->_TotalSum_TotalPregAttributes);
                            $this->Report_Footer->CCSEventResult = CCGetEvent($this->Report_Footer->CCSEvents, "BeforeShow", $this->Report_Footer);
                            if ($this->Report_Footer->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Report_Footer";
                                $this->NoRecords->Show();
                                $this->TotalSum_TotalPreg->Show();
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Report_Footer", true, "Section Detail");
                            }
                        }
                        break;
                    case "Page":
                        if ($items[$i]->Mode == 1) {
                            $this->Page_Header->CCSEventResult = CCGetEvent($this->Page_Header->CCSEvents, "BeforeShow", $this->Page_Header);
                            if ($this->Page_Header->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Page_Header";
                                $this->Attributes->Show();
                                $this->Sorter_TotalPreg->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Page_Header", true, "Section Detail");
                            }
                        }
                        if ($items[$i]->Mode == 2 && !$this->UseClientPaging || $items[$i]->Mode == 1 && $this->UseClientPaging) {
                            $this->Page_Footer->CCSEventResult = CCGetEvent($this->Page_Footer->CCSEvents, "BeforeShow", $this->Page_Footer);
                            if ($this->Page_Footer->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Page_Footer";
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Page_Footer", true, "Section Detail");
                            }
                        }
                        break;
                }
                $i++;
            } while ($i < count($items) && ($this->ViewMode == "Print" ||  !($i > 1 && $items[$i]->GroupType == 'Page' && $items[$i]->Mode == 1)));
            $Tpl->block_path = $ParentPath;
            $Tpl->parse($ReportBlock);
            $this->DataSource->close();
        }

    }
//End Show Method

} //End Report1 Class @209-FCB6E20C

class clsReport1DataSource extends clsDBregistry_db {  //Report1DataSource Class @209-1787F62C

//DataSource Variables @209-14B4B728
    public $Parent = "";
    public $CCSEvents = "";
    public $CCSEventResult;
    public $ErrorBlock;
    public $CmdExecution;

    public $wp;


    // Datasource fields
    public $Age;
    public $TotalPreg;
    public $TotalPreg1;
    public $TotalSum_TotalPreg;
//End DataSource Variables

//DataSourceClass_Initialize Event @209-421CD78F
    function clsReport1DataSource(& $Parent)
    {
        $this->Parent = & $Parent;
        $this->ErrorBlock = "Report Report1";
        $this->Initialize();
        $this->Age = new clsField("Age", ccsText, "");
        
        $this->TotalPreg = new clsField("TotalPreg", ccsInteger, "");
        
        $this->TotalPreg1 = new clsField("TotalPreg1", ccsFloat, "");
        
        $this->TotalSum_TotalPreg = new clsField("TotalSum_TotalPreg", ccsInteger, "");
        

    }
//End DataSourceClass_Initialize Event

//SetOrder Method @209-AE579760
    function SetOrder($SorterName, $SorterDirection)
    {
        $this->Order = "";
        $this->Order = CCGetOrder($this->Order, $SorterName, $SorterDirection, 
            array("Sorter_TotalPreg" => array("TotalPreg", "")));
    }
//End SetOrder Method

//Prepare Method @209-081B9768
    function Prepare()
    {
        global $CCSLocales;
        global $DefaultDateFormat;
        $this->wp = new clsSQLParameters($this->ErrorBlock);
        $this->wp->AddParameter("1", "urls_PregRegDate", ccsDate, array("ShortDate"), array("yyyy", "-", "mm", "-", "dd", " ", "HH", ":", "nn", ":", "ss"), $this->Parameters["urls_PregRegDate"], CCFormatDate(CCParseDate("1000-01-01",array("yyyy","-","mm","-","dd")),array("ShortDate")), false);
        $this->wp->AddParameter("2", "urls_PregRegDateTo", ccsDate, array("ShortDate"), array("yyyy", "-", "mm", "-", "dd", " ", "HH", ":", "nn", ":", "ss"), $this->Parameters["urls_PregRegDateTo"], CCFormatDate(CCParseDate("2999-01-01",array("yyyy","-","mm","-","dd")),array("ShortDate")), false);
        $this->wp->AddParameter("3", "urls_FacilityName", ccsText, "", "", $this->Parameters["urls_FacilityName"], "", false);
    }
//End Prepare Method

//Open Method @209-ACB6C3B1
    function Open()
    {
        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeBuildSelect", $this->Parent);
        $this->SQL = "SELECT 0 AS Age, COUNT(DISTINCT pregnancy.PregnancyID) AS TotalPreg\n" .
        "FROM (pregnancy LEFT JOIN delivery ON\n" .
        "delivery.PregnancyID = pregnancy.PregnancyID) LEFT JOIN facilities ON\n" .
        "pregnancy.FacilityID = facilities.FacilityID \n" .
        "WHERE pregnancy.GestationAge <= 12\n" .
        "AND ((delivery.PregnancyOutcome1ID>0 AND delivery.PregnancyOutcome1ID<3)\n" .
        "OR (delivery.PregnancyOutcome2ID>0 AND delivery.PregnancyOutcome2ID<3)\n" .
        "OR (delivery.PregnancyOutcome3ID>0 AND delivery.PregnancyOutcome3ID<3))\n" .
        "AND delivery.DataDelivery >= '" . $this->SQLValue($this->wp->GetDBValue("1"), ccsDate) . "'\n" .
        "AND delivery.DataDelivery <= '" . $this->SQLValue($this->wp->GetDBValue("2"), ccsDate) . "'\n" .
        "AND facilities.FacilityName LIKE '%" . $this->SQLValue($this->wp->GetDBValue("3"), ccsText) . "%' \n" .
        "\n" .
        "UNION\n" .
        "\n" .
        "SELECT 1 AS Age, (\n" .
        "(SELECT COUNT(DISTINCT pregnancy.PregnancyID) AS TotalPreg\n" .
        "FROM (pregnancy LEFT JOIN delivery ON\n" .
        "delivery.PregnancyID = pregnancy.PregnancyID) LEFT JOIN facilities ON\n" .
        "pregnancy.FacilityID = facilities.FacilityID \n" .
        "WHERE \n" .
        "delivery.DataDelivery >= '" . $this->SQLValue($this->wp->GetDBValue("1"), ccsDate) . "'\n" .
        "AND delivery.DataDelivery <= '" . $this->SQLValue($this->wp->GetDBValue("2"), ccsDate) . "'\n" .
        "AND ((delivery.PregnancyOutcome1ID>0 AND delivery.PregnancyOutcome1ID<3)\n" .
        "OR (delivery.PregnancyOutcome2ID>0 AND delivery.PregnancyOutcome2ID<3)\n" .
        "OR (delivery.PregnancyOutcome3ID>0 AND delivery.PregnancyOutcome3ID<3))\n" .
        "AND facilities.FacilityName LIKE '%" . $this->SQLValue($this->wp->GetDBValue("3"), ccsText) . "%'\n" .
        "\n" .
        ")\n" .
        "-\n" .
        "(SELECT COUNT(DISTINCT pregnancy.PregnancyID) AS TotalPreg\n" .
        "FROM (pregnancy LEFT JOIN delivery ON\n" .
        "delivery.PregnancyID = pregnancy.PregnancyID) LEFT JOIN facilities ON\n" .
        "pregnancy.FacilityID = facilities.FacilityID \n" .
        "WHERE pregnancy.GestationAge <= 12\n" .
        "AND ((delivery.PregnancyOutcome1ID>0 AND delivery.PregnancyOutcome1ID<3)\n" .
        "OR (delivery.PregnancyOutcome2ID>0 AND delivery.PregnancyOutcome2ID<3)\n" .
        "OR (delivery.PregnancyOutcome3ID>0 AND delivery.PregnancyOutcome3ID<3))\n" .
        "AND delivery.DataDelivery >= '" . $this->SQLValue($this->wp->GetDBValue("1"), ccsDate) . "'\n" .
        "AND delivery.DataDelivery <= '" . $this->SQLValue($this->wp->GetDBValue("2"), ccsDate) . "' \n" .
        "AND facilities.FacilityName LIKE '%" . $this->SQLValue($this->wp->GetDBValue("3"), ccsText) . "%'\n" .
        ")\n" .
        ")";
        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeExecuteSelect", $this->Parent);
        $this->query(CCBuildSQL($this->SQL, $this->Where, $this->Order));
        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "AfterExecuteSelect", $this->Parent);
    }
//End Open Method

//SetValues Method @209-28DC9A60
    function SetValues()
    {
        $this->Age->SetDBValue($this->f("Age"));
        $this->TotalPreg->SetDBValue(trim($this->f("TotalPreg")));
        $this->TotalPreg1->SetDBValue(trim($this->f("TotalPreg")));
        $this->TotalSum_TotalPreg->SetDBValue(trim($this->f("TotalPreg")));
    }
//End SetValues Method

} //End Report1DataSource Class @209-FCB6E20C

//Report3 ReportGroup class @22-5069953F
class clsReportGroupReport3 {
    public $GroupType;
    public $mode; //1 - open, 2 - close
    public $Admitted, $_AdmittedAttributes;
    public $Totalpatient, $_TotalpatientAttributes;
    public $Totalpatient1, $Totalpatient134Rel, $_Totalpatient1Attributes;
    public $TotalCount_Totalpatient, $_TotalCount_TotalpatientAttributes;
    public $Attributes;
    public $ReportTotalIndex = 0;
    public $PageTotalIndex;
    public $PageNumber;
    public $RowNumber;
    public $Parent;

    function clsReportGroupReport3(& $parent) {
        $this->Parent = & $parent;
        $this->Attributes = $this->Parent->Attributes->GetAsArray();
    }
    function SetControls($PrevGroup = "") {
        $this->Admitted = $this->Parent->Admitted->Value;
        $this->Totalpatient = $this->Parent->Totalpatient->Value;
        $this->Totalpatient1 = $this->Parent->Totalpatient1->Value;
    }

    function SetTotalControls($mode = "", $PrevGroup = "") {
        $this->TotalCount_Totalpatient = $this->Parent->TotalCount_Totalpatient->GetTotalValue($mode);
        $this->Parent->Totalpatient1->GetTotalValue($mode);
        $this->Totalpatient134Rel = $this->Parent->Totalpatient1->ValueRelative;
        $this->_AdmittedAttributes = $this->Parent->Admitted->Attributes->GetAsArray();
        $this->_TotalpatientAttributes = $this->Parent->Totalpatient->Attributes->GetAsArray();
        $this->_Totalpatient1Attributes = $this->Parent->Totalpatient1->Attributes->GetAsArray();
        $this->_TotalCount_TotalpatientAttributes = $this->Parent->TotalCount_Totalpatient->Attributes->GetAsArray();
    }
    function SyncWithHeader(& $Header) {
        $Header->TotalCount_Totalpatient = $this->TotalCount_Totalpatient;
        $Header->_TotalCount_TotalpatientAttributes = $this->_TotalCount_TotalpatientAttributes;
        $this->Admitted = $Header->Admitted;
        $Header->_AdmittedAttributes = $this->_AdmittedAttributes;
        $this->Parent->Admitted->Value = $Header->Admitted;
        $this->Parent->Admitted->Attributes->RestoreFromArray($Header->_AdmittedAttributes);
        $this->Totalpatient = $Header->Totalpatient;
        $Header->_TotalpatientAttributes = $this->_TotalpatientAttributes;
        $this->Parent->Totalpatient->Value = $Header->Totalpatient;
        $this->Parent->Totalpatient->Attributes->RestoreFromArray($Header->_TotalpatientAttributes);
        $this->Totalpatient1 = $Header->Totalpatient1;
        $Header->_Totalpatient1Attributes = $this->_Totalpatient1Attributes;
        $this->Parent->Totalpatient1->Value = $Header->Totalpatient1;
        $this->Parent->Totalpatient1->Attributes->RestoreFromArray($Header->_Totalpatient1Attributes);
        $Header->Totalpatient134Rel = $this->Totalpatient134Rel;
    }
    function ChangeTotalControls() {
        $this->Totalpatient1 = $this->Parent->Totalpatient1->GetValue();
        $this->TotalCount_Totalpatient = $this->Parent->TotalCount_Totalpatient->GetValue();
    }
}
//End Report3 ReportGroup class

//Report3 GroupsCollection class @22-F46B6240
class clsGroupsCollectionReport3 {
    public $Groups;
    public $mPageCurrentHeaderIndex;
    public $PageSize;
    public $TotalPages = 0;
    public $TotalRows = 0;
    public $CurrentPageSize = 0;
    public $Pages;
    public $Parent;
    public $LastDetailIndex;

    function clsGroupsCollectionReport3(& $parent) {
        $this->Parent = & $parent;
        $this->Groups = array();
        $this->Pages  = array();
        $this->mReportTotalIndex = 0;
        $this->mPageTotalIndex = 1;
    }

    function & InitGroup() {
        $group = new clsReportGroupReport3($this->Parent);
        $group->RowNumber = $this->TotalRows + 1;
        $group->PageNumber = $this->TotalPages;
        $group->PageTotalIndex = $this->mPageCurrentHeaderIndex;
        return $group;
    }

    function RestoreValues() {
        $this->Parent->Admitted->Value = $this->Parent->Admitted->initialValue;
        $this->Parent->Totalpatient->Value = $this->Parent->Totalpatient->initialValue;
        $this->Parent->Totalpatient1->Value = $this->Parent->Totalpatient1->initialValue;
        $this->Parent->TotalCount_Totalpatient->Value = $this->Parent->TotalCount_Totalpatient->initialValue;
    }

    function OpenPage() {
        $this->TotalPages++;
        $Group = & $this->InitGroup();
        $this->Parent->Page_Header->CCSEventResult = CCGetEvent($this->Parent->Page_Header->CCSEvents, "OnInitialize", $this->Parent->Page_Header);
        if ($this->Parent->Page_Header->Visible)
            $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Page_Header->Height;
        $Group->SetTotalControls("GetNextValue");
        $this->Parent->Page_Header->CCSEventResult = CCGetEvent($this->Parent->Page_Header->CCSEvents, "OnCalculate", $this->Parent->Page_Header);
        $Group->SetControls();
        $Group->Mode = 1;
        $Group->GroupType = "Page";
        $Group->PageTotalIndex = count($this->Groups);
        $this->mPageCurrentHeaderIndex = count($this->Groups);
        $this->Groups[] =  & $Group;
        $this->Pages[] =  count($this->Groups) == 2 ? 0 : count($this->Groups) - 1;
    }

    function OpenGroup($groupName) {
        $Group = "";
        $OpenFlag = false;
        if ($groupName == "Report") {
            $Group = & $this->InitGroup(true);
            $this->Parent->Report_Header->CCSEventResult = CCGetEvent($this->Parent->Report_Header->CCSEvents, "OnInitialize", $this->Parent->Report_Header);
            if ($this->Parent->Report_Header->Visible) 
                $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Report_Header->Height;
                $Group->SetTotalControls("GetNextValue");
            $this->Parent->Report_Header->CCSEventResult = CCGetEvent($this->Parent->Report_Header->CCSEvents, "OnCalculate", $this->Parent->Report_Header);
            $Group->SetControls();
            $Group->Mode = 1;
            $Group->GroupType = "Report";
            $this->Groups[] = & $Group;
            $this->OpenPage();
        }
    }

    function ClosePage() {
        $Group = & $this->InitGroup();
        $this->Parent->Page_Footer->CCSEventResult = CCGetEvent($this->Parent->Page_Footer->CCSEvents, "OnInitialize", $this->Parent->Page_Footer);
        $Group->SetTotalControls("GetPrevValue");
        $Group->SyncWithHeader($this->Groups[$this->mPageCurrentHeaderIndex]);
        $this->Parent->Page_Footer->CCSEventResult = CCGetEvent($this->Parent->Page_Footer->CCSEvents, "OnCalculate", $this->Parent->Page_Footer);
        $Group->SetControls();
        $this->RestoreValues();
        $this->CurrentPageSize = 0;
        $Group->Mode = 2;
        $Group->GroupType = "Page";
        $this->Groups[] = & $Group;
    }

    function CloseGroup($groupName)
    {
        $Group = "";
        if ($groupName == "Report") {
            $Group = & $this->InitGroup(true);
            $this->Parent->Report_Footer->CCSEventResult = CCGetEvent($this->Parent->Report_Footer->CCSEvents, "OnInitialize", $this->Parent->Report_Footer);
            if ($this->Parent->Page_Footer->Visible) 
                $OverSize = $this->Parent->Report_Footer->Height + $this->Parent->Page_Footer->Height;
            else
                $OverSize = $this->Parent->Report_Footer->Height;
            if (($this->PageSize > 0) and $this->Parent->Report_Footer->Visible and ($this->CurrentPageSize + $OverSize > $this->PageSize)) {
                $this->ClosePage();
                $this->OpenPage();
            }
            $Group->SetTotalControls("GetPrevValue");
            $Group->SyncWithHeader($this->Groups[0]);
            if ($this->Parent->Report_Footer->Visible)
                $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Report_Footer->Height;
            $this->Parent->Report_Footer->CCSEventResult = CCGetEvent($this->Parent->Report_Footer->CCSEvents, "OnCalculate", $this->Parent->Report_Footer);
            $Group->SetControls();
            $this->RestoreValues();
            $Group->Mode = 2;
            $Group->GroupType = "Report";
            $this->Groups[] = & $Group;
            $this->ClosePage();
            return;
        }
    }

    function AddItem()
    {
        $Group = & $this->InitGroup(true);
        $this->Parent->Detail->CCSEventResult = CCGetEvent($this->Parent->Detail->CCSEvents, "OnInitialize", $this->Parent->Detail);
        if ($this->Parent->Page_Footer->Visible) 
            $OverSize = $this->Parent->Detail->Height + $this->Parent->Page_Footer->Height;
        else
            $OverSize = $this->Parent->Detail->Height;
        if (($this->PageSize > 0) and $this->Parent->Detail->Visible and ($this->CurrentPageSize + $OverSize > $this->PageSize)) {
            $this->ClosePage();
            $this->OpenPage();
        }
        $this->TotalRows++;
        if ($this->LastDetailIndex)
            $PrevGroup = & $this->Groups[$this->LastDetailIndex];
        else
            $PrevGroup = "";
        $Group->SetTotalControls("", $PrevGroup);
        if ($this->Parent->Detail->Visible)
            $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Detail->Height;
        $this->Parent->Detail->CCSEventResult = CCGetEvent($this->Parent->Detail->CCSEvents, "OnCalculate", $this->Parent->Detail);
        $Group->SetControls($PrevGroup);
        $this->LastDetailIndex = count($this->Groups);
        $this->Groups[] = & $Group;
    }
}
//End Report3 GroupsCollection class

class clsReportReport3 { //Report3 Class @22-8E19D20E

//Report3 Variables @22-944D286E

    public $ComponentType = "Report";
    public $PageSize;
    public $ComponentName;
    public $Visible;
    public $Errors;
    public $CCSEvents = array();
    public $CCSEventResult;
    public $RelativePath = "";
    public $ViewMode = "Web";
    public $TemplateBlock;
    public $PageNumber;
    public $RowNumber;
    public $TotalRows;
    public $TotalPages;
    public $ControlsVisible = array();
    public $IsEmpty;
    public $Attributes;
    public $DetailBlock, $Detail;
    public $Report_FooterBlock, $Report_Footer;
    public $Report_HeaderBlock, $Report_Header;
    public $Page_FooterBlock, $Page_Footer;
    public $Page_HeaderBlock, $Page_Header;
    public $SorterName, $SorterDirection;

    public $ds;
    public $DataSource;
    public $UseClientPaging = false;

    //Report Controls
    public $StaticControls, $RowControls, $Report_FooterControls, $Report_HeaderControls;
    public $Page_FooterControls, $Page_HeaderControls;
//End Report3 Variables

//Class_Initialize Event @22-1AA178C7
    function clsReportReport3($RelativePath = "", & $Parent)
    {
        global $FileName;
        global $CCSLocales;
        global $DefaultDateFormat;
        $this->ComponentName = "Report3";
        $this->Visible = True;
        $this->Parent = & $Parent;
        $this->RelativePath = $RelativePath;
        $this->Attributes = new clsAttributes($this->ComponentName . ":");
        $this->Detail = new clsSection($this);
        $MinPageSize = 0;
        $MaxSectionSize = 0;
        $this->Detail->Height = 1;
        $MaxSectionSize = max($MaxSectionSize, $this->Detail->Height);
        $this->Report_Footer = new clsSection($this);
        $this->Report_Footer->Height = 1;
        $MaxSectionSize = max($MaxSectionSize, $this->Report_Footer->Height);
        $this->Report_Header = new clsSection($this);
        $this->Page_Footer = new clsSection($this);
        $this->Page_Header = new clsSection($this);
        $this->Page_Header->Height = 1;
        $MinPageSize += $this->Page_Header->Height;
        $this->Errors = new clsErrors();
        $this->DataSource = new clsReport3DataSource($this);
        $this->ds = & $this->DataSource;
        $PageSize = CCGetParam($this->ComponentName . "PageSize", "");
        if(is_numeric($PageSize) && $PageSize > 0) {
            $this->PageSize = $PageSize;
        } else {
            if (!is_numeric($PageSize) || $PageSize < 0)
                $this->PageSize = 40;
             else if ($PageSize == "0")
                $this->PageSize = 100;
             else 
                $this->PageSize = min(100, $PageSize);
        }
        $MinPageSize += $MaxSectionSize;
        if ($this->PageSize && $MinPageSize && $this->PageSize < $MinPageSize)
            $this->PageSize = $MinPageSize;
        $this->PageNumber = $this->ViewMode == "Print" ? 1 : intval(CCGetParam($this->ComponentName . "Page", 1));
        if ($this->PageNumber <= 0 ) {
            $this->PageNumber = 1;
        }

        $this->Admitted = new clsControl(ccsReportLabel, "Admitted", "Admitted", ccsText, "", "", $this);
        $this->Totalpatient = new clsControl(ccsReportLabel, "Totalpatient", "Totalpatient", ccsInteger, "", "", $this);
        $this->Totalpatient1 = new clsControl(ccsReportLabel, "Totalpatient1", "Totalpatient1", ccsFloat, "", "", $this);
        $this->Totalpatient1->IsPercent = true;
        $this->NoRecords = new clsPanel("NoRecords", $this);
        $this->TotalCount_Totalpatient = new clsControl(ccsReportLabel, "TotalCount_Totalpatient", "TotalCount_Totalpatient", ccsInteger, "", "", $this);
        $this->TotalCount_Totalpatient->TotalFunction = "Sum";
    }
//End Class_Initialize Event

//Initialize Method @22-6C59EE65
    function Initialize()
    {
        if(!$this->Visible) return;

        $this->DataSource->PageSize = $this->PageSize;
        $this->DataSource->AbsolutePage = $this->PageNumber;
        $this->DataSource->SetOrder($this->SorterName, $this->SorterDirection);
    }
//End Initialize Method

//CheckErrors Method @22-DB2A700D
    function CheckErrors()
    {
        $errors = false;
        $errors = ($errors || $this->Admitted->Errors->Count());
        $errors = ($errors || $this->Totalpatient->Errors->Count());
        $errors = ($errors || $this->Totalpatient1->Errors->Count());
        $errors = ($errors || $this->TotalCount_Totalpatient->Errors->Count());
        $errors = ($errors || $this->Errors->Count());
        $errors = ($errors || $this->DataSource->Errors->Count());
        return $errors;
    }
//End CheckErrors Method

//GetErrors Method @22-DB8C4E2E
    function GetErrors()
    {
        $errors = "";
        $errors = ComposeStrings($errors, $this->Admitted->Errors->ToString());
        $errors = ComposeStrings($errors, $this->Totalpatient->Errors->ToString());
        $errors = ComposeStrings($errors, $this->Totalpatient1->Errors->ToString());
        $errors = ComposeStrings($errors, $this->TotalCount_Totalpatient->Errors->ToString());
        $errors = ComposeStrings($errors, $this->Errors->ToString());
        $errors = ComposeStrings($errors, $this->DataSource->Errors->ToString());
        return $errors;
    }
//End GetErrors Method

//Show Method @22-7CF60DA6
    function Show()
    {
        global $Tpl;
        global $CCSLocales;
        if(!$this->Visible) return;

        $ShownRecords = 0;

        $this->DataSource->Parameters["urls_PregRegDate"] = CCGetFromGet("s_PregRegDate", NULL);
        $this->DataSource->Parameters["urls_PregRegDateTo"] = CCGetFromGet("s_PregRegDateTo", NULL);
        $this->DataSource->Parameters["urls_FacilityName"] = CCGetFromGet("s_FacilityName", NULL);

        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeSelect", $this);


        $this->DataSource->Prepare();
        $this->DataSource->Open();

        $Groups = new clsGroupsCollectionReport3($this);
        $Groups->PageSize = $this->PageSize > 0 ? $this->PageSize : 0;

        $is_next_record = $this->DataSource->next_record();
        $this->IsEmpty = ! $is_next_record;
        while($is_next_record) {
            $this->DataSource->SetValues();
            $this->Admitted->SetValue($this->DataSource->Admitted->GetValue());
            $this->Totalpatient->SetValue($this->DataSource->Totalpatient->GetValue());
            $this->Totalpatient1->SetValue($this->DataSource->Totalpatient1->GetValue());
            $this->TotalCount_Totalpatient->SetValue($this->DataSource->TotalCount_Totalpatient->GetValue());
            if (count($Groups->Groups) == 0) $Groups->OpenGroup("Report");
            $Groups->AddItem();
            $is_next_record = $this->DataSource->next_record();
        }
        if (!count($Groups->Groups)) 
            $Groups->OpenGroup("Report");
        else
            $this->NoRecords->Visible = false;
        $Groups->CloseGroup("Report");
        $this->TotalPages = $Groups->TotalPages;
        $this->TotalRows = $Groups->TotalRows;

        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeShow", $this);
        if(!$this->Visible) return;

        $this->Attributes->Show();
        $ReportBlock = "Report " . $this->ComponentName;
        $ParentPath = $Tpl->block_path;
        $Tpl->block_path = $ParentPath . "/" . $ReportBlock;

        if($this->CheckErrors()) {
            $Tpl->replaceblock("", $this->GetErrors());
            $Tpl->block_path = $ParentPath;
            return;
        } else {
            $items = & $Groups->Groups;
            $i = $Groups->Pages[min($this->PageNumber, $Groups->TotalPages) - 1];
            $this->ControlsVisible["Admitted"] = $this->Admitted->Visible;
            $this->ControlsVisible["Totalpatient"] = $this->Totalpatient->Visible;
            $this->ControlsVisible["Totalpatient1"] = $this->Totalpatient1->Visible;
            do {
                $this->Attributes->RestoreFromArray($items[$i]->Attributes);
                $this->RowNumber = $items[$i]->RowNumber;
                switch ($items[$i]->GroupType) {
                    Case "":
                        $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Detail";
                        $this->Admitted->SetValue($items[$i]->Admitted);
                        $this->Admitted->Attributes->RestoreFromArray($items[$i]->_AdmittedAttributes);
                        $this->Totalpatient->SetValue($items[$i]->Totalpatient);
                        $this->Totalpatient->Attributes->RestoreFromArray($items[$i]->_TotalpatientAttributes);
                        $this->Totalpatient1->SetValue($items[$items[$i]->ReportTotalIndex]->Totalpatient134Rel && strval($items[$i]->Totalpatient1) != "" ? $items[$i]->Totalpatient1 / $items[$items[$i]->ReportTotalIndex]->Totalpatient134Rel : "");
                        $this->Totalpatient1->Attributes->RestoreFromArray($items[$i]->_Totalpatient1Attributes);
                        $this->Detail->CCSEventResult = CCGetEvent($this->Detail->CCSEvents, "BeforeShow", $this->Detail);
                        $this->Attributes->Show();
                        $this->Admitted->Show();
                        $this->Totalpatient->Show();
                        $this->Totalpatient1->Show();
                        $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                        if ($this->Detail->Visible)
                            $Tpl->parseto("Section Detail", true, "Section Detail");
                        break;
                    case "Report":
                        if ($items[$i]->Mode == 1) {
                            $this->Report_Header->CCSEventResult = CCGetEvent($this->Report_Header->CCSEvents, "BeforeShow", $this->Report_Header);
                            if ($this->Report_Header->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Report_Header";
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Report_Header", true, "Section Detail");
                            }
                        }
                        if ($items[$i]->Mode == 2) {
                            $this->TotalCount_Totalpatient->SetValue($items[$i]->TotalCount_Totalpatient);
                            $this->TotalCount_Totalpatient->Attributes->RestoreFromArray($items[$i]->_TotalCount_TotalpatientAttributes);
                            $this->Report_Footer->CCSEventResult = CCGetEvent($this->Report_Footer->CCSEvents, "BeforeShow", $this->Report_Footer);
                            if ($this->Report_Footer->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Report_Footer";
                                $this->NoRecords->Show();
                                $this->TotalCount_Totalpatient->Show();
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Report_Footer", true, "Section Detail");
                            }
                        }
                        break;
                    case "Page":
                        if ($items[$i]->Mode == 1) {
                            $this->Page_Header->CCSEventResult = CCGetEvent($this->Page_Header->CCSEvents, "BeforeShow", $this->Page_Header);
                            if ($this->Page_Header->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Page_Header";
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Page_Header", true, "Section Detail");
                            }
                        }
                        if ($items[$i]->Mode == 2 && !$this->UseClientPaging || $items[$i]->Mode == 1 && $this->UseClientPaging) {
                            $this->Page_Footer->CCSEventResult = CCGetEvent($this->Page_Footer->CCSEvents, "BeforeShow", $this->Page_Footer);
                            if ($this->Page_Footer->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Page_Footer";
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Page_Footer", true, "Section Detail");
                            }
                        }
                        break;
                }
                $i++;
            } while ($i < count($items) && ($this->ViewMode == "Print" ||  !($i > 1 && $items[$i]->GroupType == 'Page' && $items[$i]->Mode == 1)));
            $Tpl->block_path = $ParentPath;
            $Tpl->parse($ReportBlock);
            $this->DataSource->close();
        }

    }
//End Show Method

} //End Report3 Class @22-FCB6E20C

class clsReport3DataSource extends clsDBregistry_db {  //Report3DataSource Class @22-53CADFFD

//DataSource Variables @22-2E42374F
    public $Parent = "";
    public $CCSEvents = "";
    public $CCSEventResult;
    public $ErrorBlock;
    public $CmdExecution;

    public $wp;


    // Datasource fields
    public $Admitted;
    public $Totalpatient;
    public $Totalpatient1;
    public $TotalCount_Totalpatient;
//End DataSource Variables

//DataSourceClass_Initialize Event @22-118B395D
    function clsReport3DataSource(& $Parent)
    {
        $this->Parent = & $Parent;
        $this->ErrorBlock = "Report Report3";
        $this->Initialize();
        $this->Admitted = new clsField("Admitted", ccsText, "");
        
        $this->Totalpatient = new clsField("Totalpatient", ccsInteger, "");
        
        $this->Totalpatient1 = new clsField("Totalpatient1", ccsFloat, "");
        
        $this->TotalCount_Totalpatient = new clsField("TotalCount_Totalpatient", ccsInteger, "");
        

    }
//End DataSourceClass_Initialize Event

//SetOrder Method @22-9E1383D1
    function SetOrder($SorterName, $SorterDirection)
    {
        $this->Order = "";
        $this->Order = CCGetOrder($this->Order, $SorterName, $SorterDirection, 
            "");
    }
//End SetOrder Method

//Prepare Method @22-081B9768
    function Prepare()
    {
        global $CCSLocales;
        global $DefaultDateFormat;
        $this->wp = new clsSQLParameters($this->ErrorBlock);
        $this->wp->AddParameter("1", "urls_PregRegDate", ccsDate, array("ShortDate"), array("yyyy", "-", "mm", "-", "dd", " ", "HH", ":", "nn", ":", "ss"), $this->Parameters["urls_PregRegDate"], CCFormatDate(CCParseDate("1000-01-01",array("yyyy","-","mm","-","dd")),array("ShortDate")), false);
        $this->wp->AddParameter("2", "urls_PregRegDateTo", ccsDate, array("ShortDate"), array("yyyy", "-", "mm", "-", "dd", " ", "HH", ":", "nn", ":", "ss"), $this->Parameters["urls_PregRegDateTo"], CCFormatDate(CCParseDate("2999-01-01",array("yyyy","-","mm","-","dd")),array("ShortDate")), false);
        $this->wp->AddParameter("3", "urls_FacilityName", ccsText, "", "", $this->Parameters["urls_FacilityName"], "", false);
    }
//End Prepare Method

//Open Method @22-78B90182
    function Open()
    {
        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeBuildSelect", $this->Parent);
        $this->SQL = "SELECT 0 AS Admitted, COUNT(DISTINCT pregnancy.PregnancyID) AS Totalpatient \n" .
        "FROM ((pregnancy INNER JOIN patient ON\n" .
        "pregnancy.PatientID = patient.PatientID) LEFT JOIN delivery ON\n" .
        "delivery.PregnancyID = pregnancy.PregnancyID) LEFT JOIN facilities ON\n" .
        "pregnancy.FacilityID = facilities.FacilityID \n" .
        "WHERE patient.Admitted = 1 \n" .
        "AND ((delivery.PregnancyOutcome1ID>0 AND delivery.PregnancyOutcome1ID<3)\n" .
        "OR (delivery.PregnancyOutcome2ID>0 AND delivery.PregnancyOutcome2ID<3)\n" .
        "OR (delivery.PregnancyOutcome3ID>0 AND delivery.PregnancyOutcome3ID<3))\n" .
        "AND delivery.DataDelivery >= '" . $this->SQLValue($this->wp->GetDBValue("1"), ccsDate) . "'\n" .
        "AND delivery.DataDelivery <= '" . $this->SQLValue($this->wp->GetDBValue("2"), ccsDate) . "' \n" .
        "AND facilities.FacilityName LIKE '%" . $this->SQLValue($this->wp->GetDBValue("3"), ccsText) . "%'\n" .
        "\n" .
        "UNION\n" .
        "\n" .
        "SELECT 1 AS Admitted,(\n" .
        "(SELECT COUNT(DISTINCT pregnancy.PregnancyID) AS Totalpatient \n" .
        "FROM ((pregnancy INNER JOIN patient ON\n" .
        "pregnancy.PatientID = patient.PatientID) LEFT JOIN delivery ON\n" .
        "delivery.PregnancyID = pregnancy.PregnancyID) LEFT JOIN facilities ON\n" .
        "pregnancy.FacilityID = facilities.FacilityID \n" .
        "WHERE \n" .
        "delivery.DataDelivery >= '" . $this->SQLValue($this->wp->GetDBValue("1"), ccsDate) . "'\n" .
        "AND delivery.DataDelivery <= '" . $this->SQLValue($this->wp->GetDBValue("2"), ccsDate) . "'\n" .
        "AND ((delivery.PregnancyOutcome1ID>0 AND delivery.PregnancyOutcome1ID<3)\n" .
        "OR (delivery.PregnancyOutcome2ID>0 AND delivery.PregnancyOutcome2ID<3)\n" .
        "OR (delivery.PregnancyOutcome3ID>0 AND delivery.PregnancyOutcome3ID<3))\n" .
        "AND facilities.FacilityName LIKE '%" . $this->SQLValue($this->wp->GetDBValue("3"), ccsText) . "%'\n" .
        "\n" .
        ")\n" .
        "-\n" .
        "(SELECT COUNT(DISTINCT pregnancy.PregnancyID) AS Totalpatient \n" .
        "FROM ((pregnancy INNER JOIN patient ON\n" .
        "pregnancy.PatientID = patient.PatientID) LEFT JOIN delivery ON\n" .
        "delivery.PregnancyID = pregnancy.PregnancyID) LEFT JOIN facilities ON\n" .
        "pregnancy.FacilityID = facilities.FacilityID \n" .
        "WHERE patient.Admitted = 1 \n" .
        "AND ((delivery.PregnancyOutcome1ID>0 AND delivery.PregnancyOutcome1ID<3)\n" .
        "OR (delivery.PregnancyOutcome2ID>0 AND delivery.PregnancyOutcome2ID<3)\n" .
        "OR (delivery.PregnancyOutcome3ID>0 AND delivery.PregnancyOutcome3ID<3))\n" .
        "AND delivery.DataDelivery >= '" . $this->SQLValue($this->wp->GetDBValue("1"), ccsDate) . "'\n" .
        "AND delivery.DataDelivery <= '" . $this->SQLValue($this->wp->GetDBValue("2"), ccsDate) . "'\n" .
        "AND facilities.FacilityName LIKE '%" . $this->SQLValue($this->wp->GetDBValue("3"), ccsText) . "%'\n" .
        "\n" .
        ")\n" .
        ")";
        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeExecuteSelect", $this->Parent);
        $this->query(CCBuildSQL($this->SQL, $this->Where, $this->Order));
        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "AfterExecuteSelect", $this->Parent);
    }
//End Open Method

//SetValues Method @22-642E3495
    function SetValues()
    {
        $this->Admitted->SetDBValue($this->f("Admitted"));
        $this->Totalpatient->SetDBValue(trim($this->f("Totalpatient")));
        $this->Totalpatient1->SetDBValue(trim($this->f("Totalpatient")));
        $this->TotalCount_Totalpatient->SetDBValue(trim($this->f("Totalpatient")));
    }
//End SetValues Method

} //End Report3DataSource Class @22-FCB6E20C

//Report4 ReportGroup class @228-B82F30A0
class clsReportGroupReport4 {
    public $GroupType;
    public $mode; //1 - open, 2 - close
    public $Discharged, $_DischargedAttributes;
    public $Totalpatient, $_TotalpatientAttributes;
    public $Attributes;
    public $ReportTotalIndex = 0;
    public $PageTotalIndex;
    public $PageNumber;
    public $RowNumber;
    public $Parent;

    function clsReportGroupReport4(& $parent) {
        $this->Parent = & $parent;
        $this->Attributes = $this->Parent->Attributes->GetAsArray();
    }
    function SetControls($PrevGroup = "") {
        $this->Discharged = $this->Parent->Discharged->Value;
        $this->Totalpatient = $this->Parent->Totalpatient->Value;
    }

    function SetTotalControls($mode = "", $PrevGroup = "") {
        $this->_DischargedAttributes = $this->Parent->Discharged->Attributes->GetAsArray();
        $this->_TotalpatientAttributes = $this->Parent->Totalpatient->Attributes->GetAsArray();
    }
    function SyncWithHeader(& $Header) {
        $this->Discharged = $Header->Discharged;
        $Header->_DischargedAttributes = $this->_DischargedAttributes;
        $this->Parent->Discharged->Value = $Header->Discharged;
        $this->Parent->Discharged->Attributes->RestoreFromArray($Header->_DischargedAttributes);
        $this->Totalpatient = $Header->Totalpatient;
        $Header->_TotalpatientAttributes = $this->_TotalpatientAttributes;
        $this->Parent->Totalpatient->Value = $Header->Totalpatient;
        $this->Parent->Totalpatient->Attributes->RestoreFromArray($Header->_TotalpatientAttributes);
    }
    function ChangeTotalControls() {
    }
}
//End Report4 ReportGroup class

//Report4 GroupsCollection class @228-B3361AD4
class clsGroupsCollectionReport4 {
    public $Groups;
    public $mPageCurrentHeaderIndex;
    public $PageSize;
    public $TotalPages = 0;
    public $TotalRows = 0;
    public $CurrentPageSize = 0;
    public $Pages;
    public $Parent;
    public $LastDetailIndex;

    function clsGroupsCollectionReport4(& $parent) {
        $this->Parent = & $parent;
        $this->Groups = array();
        $this->Pages  = array();
        $this->mReportTotalIndex = 0;
        $this->mPageTotalIndex = 1;
    }

    function & InitGroup() {
        $group = new clsReportGroupReport4($this->Parent);
        $group->RowNumber = $this->TotalRows + 1;
        $group->PageNumber = $this->TotalPages;
        $group->PageTotalIndex = $this->mPageCurrentHeaderIndex;
        return $group;
    }

    function RestoreValues() {
        $this->Parent->Discharged->Value = $this->Parent->Discharged->initialValue;
        $this->Parent->Totalpatient->Value = $this->Parent->Totalpatient->initialValue;
    }

    function OpenPage() {
        $this->TotalPages++;
        $Group = & $this->InitGroup();
        $this->Parent->Page_Header->CCSEventResult = CCGetEvent($this->Parent->Page_Header->CCSEvents, "OnInitialize", $this->Parent->Page_Header);
        if ($this->Parent->Page_Header->Visible)
            $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Page_Header->Height;
        $Group->SetTotalControls("GetNextValue");
        $this->Parent->Page_Header->CCSEventResult = CCGetEvent($this->Parent->Page_Header->CCSEvents, "OnCalculate", $this->Parent->Page_Header);
        $Group->SetControls();
        $Group->Mode = 1;
        $Group->GroupType = "Page";
        $Group->PageTotalIndex = count($this->Groups);
        $this->mPageCurrentHeaderIndex = count($this->Groups);
        $this->Groups[] =  & $Group;
        $this->Pages[] =  count($this->Groups) == 2 ? 0 : count($this->Groups) - 1;
    }

    function OpenGroup($groupName) {
        $Group = "";
        $OpenFlag = false;
        if ($groupName == "Report") {
            $Group = & $this->InitGroup(true);
            $this->Parent->Report_Header->CCSEventResult = CCGetEvent($this->Parent->Report_Header->CCSEvents, "OnInitialize", $this->Parent->Report_Header);
            if ($this->Parent->Report_Header->Visible) 
                $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Report_Header->Height;
                $Group->SetTotalControls("GetNextValue");
            $this->Parent->Report_Header->CCSEventResult = CCGetEvent($this->Parent->Report_Header->CCSEvents, "OnCalculate", $this->Parent->Report_Header);
            $Group->SetControls();
            $Group->Mode = 1;
            $Group->GroupType = "Report";
            $this->Groups[] = & $Group;
            $this->OpenPage();
        }
    }

    function ClosePage() {
        $Group = & $this->InitGroup();
        $this->Parent->Page_Footer->CCSEventResult = CCGetEvent($this->Parent->Page_Footer->CCSEvents, "OnInitialize", $this->Parent->Page_Footer);
        $Group->SetTotalControls("GetPrevValue");
        $Group->SyncWithHeader($this->Groups[$this->mPageCurrentHeaderIndex]);
        $this->Parent->Page_Footer->CCSEventResult = CCGetEvent($this->Parent->Page_Footer->CCSEvents, "OnCalculate", $this->Parent->Page_Footer);
        $Group->SetControls();
        $this->RestoreValues();
        $this->CurrentPageSize = 0;
        $Group->Mode = 2;
        $Group->GroupType = "Page";
        $this->Groups[] = & $Group;
    }

    function CloseGroup($groupName)
    {
        $Group = "";
        if ($groupName == "Report") {
            $Group = & $this->InitGroup(true);
            $this->Parent->Report_Footer->CCSEventResult = CCGetEvent($this->Parent->Report_Footer->CCSEvents, "OnInitialize", $this->Parent->Report_Footer);
            if ($this->Parent->Page_Footer->Visible) 
                $OverSize = $this->Parent->Report_Footer->Height + $this->Parent->Page_Footer->Height;
            else
                $OverSize = $this->Parent->Report_Footer->Height;
            if (($this->PageSize > 0) and $this->Parent->Report_Footer->Visible and ($this->CurrentPageSize + $OverSize > $this->PageSize)) {
                $this->ClosePage();
                $this->OpenPage();
            }
            $Group->SetTotalControls("GetPrevValue");
            $Group->SyncWithHeader($this->Groups[0]);
            if ($this->Parent->Report_Footer->Visible)
                $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Report_Footer->Height;
            $this->Parent->Report_Footer->CCSEventResult = CCGetEvent($this->Parent->Report_Footer->CCSEvents, "OnCalculate", $this->Parent->Report_Footer);
            $Group->SetControls();
            $this->RestoreValues();
            $Group->Mode = 2;
            $Group->GroupType = "Report";
            $this->Groups[] = & $Group;
            $this->ClosePage();
            return;
        }
    }

    function AddItem()
    {
        $Group = & $this->InitGroup(true);
        $this->Parent->Detail->CCSEventResult = CCGetEvent($this->Parent->Detail->CCSEvents, "OnInitialize", $this->Parent->Detail);
        if ($this->Parent->Page_Footer->Visible) 
            $OverSize = $this->Parent->Detail->Height + $this->Parent->Page_Footer->Height;
        else
            $OverSize = $this->Parent->Detail->Height;
        if (($this->PageSize > 0) and $this->Parent->Detail->Visible and ($this->CurrentPageSize + $OverSize > $this->PageSize)) {
            $this->ClosePage();
            $this->OpenPage();
        }
        $this->TotalRows++;
        if ($this->LastDetailIndex)
            $PrevGroup = & $this->Groups[$this->LastDetailIndex];
        else
            $PrevGroup = "";
        $Group->SetTotalControls("", $PrevGroup);
        if ($this->Parent->Detail->Visible)
            $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Detail->Height;
        $this->Parent->Detail->CCSEventResult = CCGetEvent($this->Parent->Detail->CCSEvents, "OnCalculate", $this->Parent->Detail);
        $Group->SetControls($PrevGroup);
        $this->LastDetailIndex = count($this->Groups);
        $this->Groups[] = & $Group;
    }
}
//End Report4 GroupsCollection class

class clsReportReport4 { //Report4 Class @228-C15844C9

//Report4 Variables @228-944D286E

    public $ComponentType = "Report";
    public $PageSize;
    public $ComponentName;
    public $Visible;
    public $Errors;
    public $CCSEvents = array();
    public $CCSEventResult;
    public $RelativePath = "";
    public $ViewMode = "Web";
    public $TemplateBlock;
    public $PageNumber;
    public $RowNumber;
    public $TotalRows;
    public $TotalPages;
    public $ControlsVisible = array();
    public $IsEmpty;
    public $Attributes;
    public $DetailBlock, $Detail;
    public $Report_FooterBlock, $Report_Footer;
    public $Report_HeaderBlock, $Report_Header;
    public $Page_FooterBlock, $Page_Footer;
    public $Page_HeaderBlock, $Page_Header;
    public $SorterName, $SorterDirection;

    public $ds;
    public $DataSource;
    public $UseClientPaging = false;

    //Report Controls
    public $StaticControls, $RowControls, $Report_FooterControls, $Report_HeaderControls;
    public $Page_FooterControls, $Page_HeaderControls;
//End Report4 Variables

//Class_Initialize Event @228-4F9812BC
    function clsReportReport4($RelativePath = "", & $Parent)
    {
        global $FileName;
        global $CCSLocales;
        global $DefaultDateFormat;
        $this->ComponentName = "Report4";
        $this->Visible = True;
        $this->Parent = & $Parent;
        $this->RelativePath = $RelativePath;
        $this->Attributes = new clsAttributes($this->ComponentName . ":");
        $this->Detail = new clsSection($this);
        $MinPageSize = 0;
        $MaxSectionSize = 0;
        $this->Detail->Height = 1;
        $MaxSectionSize = max($MaxSectionSize, $this->Detail->Height);
        $this->Report_Footer = new clsSection($this);
        $this->Report_Footer->Height = 1;
        $MaxSectionSize = max($MaxSectionSize, $this->Report_Footer->Height);
        $this->Report_Header = new clsSection($this);
        $this->Page_Footer = new clsSection($this);
        $this->Page_Header = new clsSection($this);
        $this->Page_Header->Height = 1;
        $MinPageSize += $this->Page_Header->Height;
        $this->Errors = new clsErrors();
        $this->DataSource = new clsReport4DataSource($this);
        $this->ds = & $this->DataSource;
        $PageSize = CCGetParam($this->ComponentName . "PageSize", "");
        if(is_numeric($PageSize) && $PageSize > 0) {
            $this->PageSize = $PageSize;
        } else {
            if (!is_numeric($PageSize) || $PageSize < 0)
                $this->PageSize = 40;
             else if ($PageSize == "0")
                $this->PageSize = 100;
             else 
                $this->PageSize = min(100, $PageSize);
        }
        $MinPageSize += $MaxSectionSize;
        if ($this->PageSize && $MinPageSize && $this->PageSize < $MinPageSize)
            $this->PageSize = $MinPageSize;
        $this->PageNumber = $this->ViewMode == "Print" ? 1 : intval(CCGetParam($this->ComponentName . "Page", 1));
        if ($this->PageNumber <= 0 ) {
            $this->PageNumber = 1;
        }

        $this->Discharged = new clsControl(ccsReportLabel, "Discharged", "Discharged", ccsInteger, "", "", $this);
        $this->Totalpatient = new clsControl(ccsReportLabel, "Totalpatient", "Totalpatient", ccsInteger, "", "", $this);
        $this->NoRecords = new clsPanel("NoRecords", $this);
    }
//End Class_Initialize Event

//Initialize Method @228-6C59EE65
    function Initialize()
    {
        if(!$this->Visible) return;

        $this->DataSource->PageSize = $this->PageSize;
        $this->DataSource->AbsolutePage = $this->PageNumber;
        $this->DataSource->SetOrder($this->SorterName, $this->SorterDirection);
    }
//End Initialize Method

//CheckErrors Method @228-1E4E8D61
    function CheckErrors()
    {
        $errors = false;
        $errors = ($errors || $this->Discharged->Errors->Count());
        $errors = ($errors || $this->Totalpatient->Errors->Count());
        $errors = ($errors || $this->Errors->Count());
        $errors = ($errors || $this->DataSource->Errors->Count());
        return $errors;
    }
//End CheckErrors Method

//GetErrors Method @228-9FDDA567
    function GetErrors()
    {
        $errors = "";
        $errors = ComposeStrings($errors, $this->Discharged->Errors->ToString());
        $errors = ComposeStrings($errors, $this->Totalpatient->Errors->ToString());
        $errors = ComposeStrings($errors, $this->Errors->ToString());
        $errors = ComposeStrings($errors, $this->DataSource->Errors->ToString());
        return $errors;
    }
//End GetErrors Method

//Show Method @228-F336EFD4
    function Show()
    {
        global $Tpl;
        global $CCSLocales;
        if(!$this->Visible) return;

        $ShownRecords = 0;

        $this->DataSource->Parameters["urls_PregRegDate"] = CCGetFromGet("s_PregRegDate", NULL);
        $this->DataSource->Parameters["urls_PregRegDateTo"] = CCGetFromGet("s_PregRegDateTo", NULL);
        $this->DataSource->Parameters["urls_FacilityName"] = CCGetFromGet("s_FacilityName", NULL);

        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeSelect", $this);


        $this->DataSource->Prepare();
        $this->DataSource->Open();

        $Groups = new clsGroupsCollectionReport4($this);
        $Groups->PageSize = $this->PageSize > 0 ? $this->PageSize : 0;

        $is_next_record = $this->DataSource->next_record();
        $this->IsEmpty = ! $is_next_record;
        while($is_next_record) {
            $this->DataSource->SetValues();
            $this->Discharged->SetValue($this->DataSource->Discharged->GetValue());
            $this->Totalpatient->SetValue($this->DataSource->Totalpatient->GetValue());
            if (count($Groups->Groups) == 0) $Groups->OpenGroup("Report");
            $Groups->AddItem();
            $is_next_record = $this->DataSource->next_record();
        }
        if (!count($Groups->Groups)) 
            $Groups->OpenGroup("Report");
        else
            $this->NoRecords->Visible = false;
        $Groups->CloseGroup("Report");
        $this->TotalPages = $Groups->TotalPages;
        $this->TotalRows = $Groups->TotalRows;

        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeShow", $this);
        if(!$this->Visible) return;

        $this->Attributes->Show();
        $ReportBlock = "Report " . $this->ComponentName;
        $ParentPath = $Tpl->block_path;
        $Tpl->block_path = $ParentPath . "/" . $ReportBlock;

        if($this->CheckErrors()) {
            $Tpl->replaceblock("", $this->GetErrors());
            $Tpl->block_path = $ParentPath;
            return;
        } else {
            $items = & $Groups->Groups;
            $i = $Groups->Pages[min($this->PageNumber, $Groups->TotalPages) - 1];
            $this->ControlsVisible["Discharged"] = $this->Discharged->Visible;
            $this->ControlsVisible["Totalpatient"] = $this->Totalpatient->Visible;
            do {
                $this->Attributes->RestoreFromArray($items[$i]->Attributes);
                $this->RowNumber = $items[$i]->RowNumber;
                switch ($items[$i]->GroupType) {
                    Case "":
                        $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Detail";
                        $this->Discharged->SetValue($items[$i]->Discharged);
                        $this->Discharged->Attributes->RestoreFromArray($items[$i]->_DischargedAttributes);
                        $this->Totalpatient->SetValue($items[$i]->Totalpatient);
                        $this->Totalpatient->Attributes->RestoreFromArray($items[$i]->_TotalpatientAttributes);
                        $this->Detail->CCSEventResult = CCGetEvent($this->Detail->CCSEvents, "BeforeShow", $this->Detail);
                        $this->Attributes->Show();
                        $this->Discharged->Show();
                        $this->Totalpatient->Show();
                        $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                        if ($this->Detail->Visible)
                            $Tpl->parseto("Section Detail", true, "Section Detail");
                        break;
                    case "Report":
                        if ($items[$i]->Mode == 1) {
                            $this->Report_Header->CCSEventResult = CCGetEvent($this->Report_Header->CCSEvents, "BeforeShow", $this->Report_Header);
                            if ($this->Report_Header->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Report_Header";
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Report_Header", true, "Section Detail");
                            }
                        }
                        if ($items[$i]->Mode == 2) {
                            $this->Report_Footer->CCSEventResult = CCGetEvent($this->Report_Footer->CCSEvents, "BeforeShow", $this->Report_Footer);
                            if ($this->Report_Footer->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Report_Footer";
                                $this->NoRecords->Show();
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Report_Footer", true, "Section Detail");
                            }
                        }
                        break;
                    case "Page":
                        if ($items[$i]->Mode == 1) {
                            $this->Page_Header->CCSEventResult = CCGetEvent($this->Page_Header->CCSEvents, "BeforeShow", $this->Page_Header);
                            if ($this->Page_Header->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Page_Header";
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Page_Header", true, "Section Detail");
                            }
                        }
                        if ($items[$i]->Mode == 2 && !$this->UseClientPaging || $items[$i]->Mode == 1 && $this->UseClientPaging) {
                            $this->Page_Footer->CCSEventResult = CCGetEvent($this->Page_Footer->CCSEvents, "BeforeShow", $this->Page_Footer);
                            if ($this->Page_Footer->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Page_Footer";
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Page_Footer", true, "Section Detail");
                            }
                        }
                        break;
                }
                $i++;
            } while ($i < count($items) && ($this->ViewMode == "Print" ||  !($i > 1 && $items[$i]->GroupType == 'Page' && $items[$i]->Mode == 1)));
            $Tpl->block_path = $ParentPath;
            $Tpl->parse($ReportBlock);
            $this->DataSource->close();
        }

    }
//End Show Method

} //End Report4 Class @228-FCB6E20C

class clsReport4DataSource extends clsDBregistry_db {  //Report4DataSource Class @228-5083B246

//DataSource Variables @228-D37DE831
    public $Parent = "";
    public $CCSEvents = "";
    public $CCSEventResult;
    public $ErrorBlock;
    public $CmdExecution;

    public $wp;


    // Datasource fields
    public $Discharged;
    public $Totalpatient;
//End DataSource Variables

//DataSourceClass_Initialize Event @228-ED5E265B
    function clsReport4DataSource(& $Parent)
    {
        $this->Parent = & $Parent;
        $this->ErrorBlock = "Report Report4";
        $this->Initialize();
        $this->Discharged = new clsField("Discharged", ccsInteger, "");
        
        $this->Totalpatient = new clsField("Totalpatient", ccsInteger, "");
        

    }
//End DataSourceClass_Initialize Event

//SetOrder Method @228-9E1383D1
    function SetOrder($SorterName, $SorterDirection)
    {
        $this->Order = "";
        $this->Order = CCGetOrder($this->Order, $SorterName, $SorterDirection, 
            "");
    }
//End SetOrder Method

//Prepare Method @228-081B9768
    function Prepare()
    {
        global $CCSLocales;
        global $DefaultDateFormat;
        $this->wp = new clsSQLParameters($this->ErrorBlock);
        $this->wp->AddParameter("1", "urls_PregRegDate", ccsDate, array("ShortDate"), array("yyyy", "-", "mm", "-", "dd", " ", "HH", ":", "nn", ":", "ss"), $this->Parameters["urls_PregRegDate"], CCFormatDate(CCParseDate("1000-01-01",array("yyyy","-","mm","-","dd")),array("ShortDate")), false);
        $this->wp->AddParameter("2", "urls_PregRegDateTo", ccsDate, array("ShortDate"), array("yyyy", "-", "mm", "-", "dd", " ", "HH", ":", "nn", ":", "ss"), $this->Parameters["urls_PregRegDateTo"], CCFormatDate(CCParseDate("2999-01-01",array("yyyy","-","mm","-","dd")),array("ShortDate")), false);
        $this->wp->AddParameter("3", "urls_FacilityName", ccsText, "", "", $this->Parameters["urls_FacilityName"], "", false);
    }
//End Prepare Method

//Open Method @228-29662E1D
    function Open()
    {
        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeBuildSelect", $this->Parent);
        $this->SQL = "SELECT 0 AS Discharged, COUNT(DISTINCT pregnancy.PregnancyID) AS Totalpatient \n" .
        "FROM ((pregnancy INNER JOIN patient ON\n" .
        "pregnancy.PatientID = patient.PatientID) LEFT JOIN delivery ON\n" .
        "delivery.PregnancyID = pregnancy.PregnancyID) LEFT JOIN facilities ON\n" .
        "pregnancy.FacilityID = facilities.FacilityID \n" .
        "WHERE patient.Discharged = 1 \n" .
        "AND pregnancy.PregRegDate >= '" . $this->SQLValue($this->wp->GetDBValue("1"), ccsDate) . "' \n" .
        "AND pregnancy.PregRegDate <= '" . $this->SQLValue($this->wp->GetDBValue("2"), ccsDate) . "'\n" .
        "AND facilities.FacilityName LIKE '%" . $this->SQLValue($this->wp->GetDBValue("3"), ccsText) . "%'\n" .
        "\n" .
        "";
        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeExecuteSelect", $this->Parent);
        $this->query(CCBuildSQL($this->SQL, $this->Where, $this->Order));
        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "AfterExecuteSelect", $this->Parent);
    }
//End Open Method

//SetValues Method @228-D5F3E601
    function SetValues()
    {
        $this->Discharged->SetDBValue(trim($this->f("Discharged")));
        $this->Totalpatient->SetDBValue(trim($this->f("Totalpatient")));
    }
//End SetValues Method

} //End Report4DataSource Class @228-FCB6E20C

//Report5 ReportGroup class @35-9EC58895
class clsReportGroupReport5 {
    public $GroupType;
    public $mode; //1 - open, 2 - close
    public $patient_PatientID, $_patient_PatientIDAttributes;
    public $F21HIV, $_F21HIVAttributes;
    public $patient_PatientID1, $patient_PatientID1246Rel, $_patient_PatientID1Attributes;
    public $TotalSum_patient_PatientID, $_TotalSum_patient_PatientIDAttributes;
    public $Attributes;
    public $ReportTotalIndex = 0;
    public $PageTotalIndex;
    public $PageNumber;
    public $RowNumber;
    public $Parent;

    function clsReportGroupReport5(& $parent) {
        $this->Parent = & $parent;
        $this->Attributes = $this->Parent->Attributes->GetAsArray();
    }
    function SetControls($PrevGroup = "") {
        $this->patient_PatientID = $this->Parent->patient_PatientID->Value;
        $this->F21HIV = $this->Parent->F21HIV->Value;
        $this->patient_PatientID1 = $this->Parent->patient_PatientID1->Value;
    }

    function SetTotalControls($mode = "", $PrevGroup = "") {
        $this->TotalSum_patient_PatientID = $this->Parent->TotalSum_patient_PatientID->GetTotalValue($mode);
        $this->Parent->patient_PatientID1->GetTotalValue($mode);
        $this->patient_PatientID1246Rel = $this->Parent->patient_PatientID1->ValueRelative;
        $this->_patient_PatientIDAttributes = $this->Parent->patient_PatientID->Attributes->GetAsArray();
        $this->_F21HIVAttributes = $this->Parent->F21HIV->Attributes->GetAsArray();
        $this->_patient_PatientID1Attributes = $this->Parent->patient_PatientID1->Attributes->GetAsArray();
        $this->_TotalSum_patient_PatientIDAttributes = $this->Parent->TotalSum_patient_PatientID->Attributes->GetAsArray();
    }
    function SyncWithHeader(& $Header) {
        $Header->TotalSum_patient_PatientID = $this->TotalSum_patient_PatientID;
        $Header->_TotalSum_patient_PatientIDAttributes = $this->_TotalSum_patient_PatientIDAttributes;
        $this->patient_PatientID = $Header->patient_PatientID;
        $Header->_patient_PatientIDAttributes = $this->_patient_PatientIDAttributes;
        $this->Parent->patient_PatientID->Value = $Header->patient_PatientID;
        $this->Parent->patient_PatientID->Attributes->RestoreFromArray($Header->_patient_PatientIDAttributes);
        $this->F21HIV = $Header->F21HIV;
        $Header->_F21HIVAttributes = $this->_F21HIVAttributes;
        $this->Parent->F21HIV->Value = $Header->F21HIV;
        $this->Parent->F21HIV->Attributes->RestoreFromArray($Header->_F21HIVAttributes);
        $this->patient_PatientID1 = $Header->patient_PatientID1;
        $Header->_patient_PatientID1Attributes = $this->_patient_PatientID1Attributes;
        $this->Parent->patient_PatientID1->Value = $Header->patient_PatientID1;
        $this->Parent->patient_PatientID1->Attributes->RestoreFromArray($Header->_patient_PatientID1Attributes);
        $Header->patient_PatientID1246Rel = $this->patient_PatientID1246Rel;
    }
    function ChangeTotalControls() {
        $this->patient_PatientID1 = $this->Parent->patient_PatientID1->GetValue();
        $this->TotalSum_patient_PatientID = $this->Parent->TotalSum_patient_PatientID->GetValue();
    }
}
//End Report5 ReportGroup class

//Report5 GroupsCollection class @35-27C0FAAA
class clsGroupsCollectionReport5 {
    public $Groups;
    public $mPageCurrentHeaderIndex;
    public $PageSize;
    public $TotalPages = 0;
    public $TotalRows = 0;
    public $CurrentPageSize = 0;
    public $Pages;
    public $Parent;
    public $LastDetailIndex;

    function clsGroupsCollectionReport5(& $parent) {
        $this->Parent = & $parent;
        $this->Groups = array();
        $this->Pages  = array();
        $this->mReportTotalIndex = 0;
        $this->mPageTotalIndex = 1;
    }

    function & InitGroup() {
        $group = new clsReportGroupReport5($this->Parent);
        $group->RowNumber = $this->TotalRows + 1;
        $group->PageNumber = $this->TotalPages;
        $group->PageTotalIndex = $this->mPageCurrentHeaderIndex;
        return $group;
    }

    function RestoreValues() {
        $this->Parent->patient_PatientID->Value = $this->Parent->patient_PatientID->initialValue;
        $this->Parent->F21HIV->Value = $this->Parent->F21HIV->initialValue;
        $this->Parent->patient_PatientID1->Value = $this->Parent->patient_PatientID1->initialValue;
        $this->Parent->TotalSum_patient_PatientID->Value = $this->Parent->TotalSum_patient_PatientID->initialValue;
    }

    function OpenPage() {
        $this->TotalPages++;
        $Group = & $this->InitGroup();
        $this->Parent->Page_Header->CCSEventResult = CCGetEvent($this->Parent->Page_Header->CCSEvents, "OnInitialize", $this->Parent->Page_Header);
        if ($this->Parent->Page_Header->Visible)
            $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Page_Header->Height;
        $Group->SetTotalControls("GetNextValue");
        $this->Parent->Page_Header->CCSEventResult = CCGetEvent($this->Parent->Page_Header->CCSEvents, "OnCalculate", $this->Parent->Page_Header);
        $Group->SetControls();
        $Group->Mode = 1;
        $Group->GroupType = "Page";
        $Group->PageTotalIndex = count($this->Groups);
        $this->mPageCurrentHeaderIndex = count($this->Groups);
        $this->Groups[] =  & $Group;
        $this->Pages[] =  count($this->Groups) == 2 ? 0 : count($this->Groups) - 1;
    }

    function OpenGroup($groupName) {
        $Group = "";
        $OpenFlag = false;
        if ($groupName == "Report") {
            $Group = & $this->InitGroup(true);
            $this->Parent->Report_Header->CCSEventResult = CCGetEvent($this->Parent->Report_Header->CCSEvents, "OnInitialize", $this->Parent->Report_Header);
            if ($this->Parent->Report_Header->Visible) 
                $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Report_Header->Height;
                $Group->SetTotalControls("GetNextValue");
            $this->Parent->Report_Header->CCSEventResult = CCGetEvent($this->Parent->Report_Header->CCSEvents, "OnCalculate", $this->Parent->Report_Header);
            $Group->SetControls();
            $Group->Mode = 1;
            $Group->GroupType = "Report";
            $this->Groups[] = & $Group;
            $this->OpenPage();
        }
    }

    function ClosePage() {
        $Group = & $this->InitGroup();
        $this->Parent->Page_Footer->CCSEventResult = CCGetEvent($this->Parent->Page_Footer->CCSEvents, "OnInitialize", $this->Parent->Page_Footer);
        $Group->SetTotalControls("GetPrevValue");
        $Group->SyncWithHeader($this->Groups[$this->mPageCurrentHeaderIndex]);
        $this->Parent->Page_Footer->CCSEventResult = CCGetEvent($this->Parent->Page_Footer->CCSEvents, "OnCalculate", $this->Parent->Page_Footer);
        $Group->SetControls();
        $this->RestoreValues();
        $this->CurrentPageSize = 0;
        $Group->Mode = 2;
        $Group->GroupType = "Page";
        $this->Groups[] = & $Group;
    }

    function CloseGroup($groupName)
    {
        $Group = "";
        if ($groupName == "Report") {
            $Group = & $this->InitGroup(true);
            $this->Parent->Report_Footer->CCSEventResult = CCGetEvent($this->Parent->Report_Footer->CCSEvents, "OnInitialize", $this->Parent->Report_Footer);
            if ($this->Parent->Page_Footer->Visible) 
                $OverSize = $this->Parent->Report_Footer->Height + $this->Parent->Page_Footer->Height;
            else
                $OverSize = $this->Parent->Report_Footer->Height;
            if (($this->PageSize > 0) and $this->Parent->Report_Footer->Visible and ($this->CurrentPageSize + $OverSize > $this->PageSize)) {
                $this->ClosePage();
                $this->OpenPage();
            }
            $Group->SetTotalControls("GetPrevValue");
            $Group->SyncWithHeader($this->Groups[0]);
            if ($this->Parent->Report_Footer->Visible)
                $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Report_Footer->Height;
            $this->Parent->Report_Footer->CCSEventResult = CCGetEvent($this->Parent->Report_Footer->CCSEvents, "OnCalculate", $this->Parent->Report_Footer);
            $Group->SetControls();
            $this->RestoreValues();
            $Group->Mode = 2;
            $Group->GroupType = "Report";
            $this->Groups[] = & $Group;
            $this->ClosePage();
            return;
        }
    }

    function AddItem()
    {
        $Group = & $this->InitGroup(true);
        $this->Parent->Detail->CCSEventResult = CCGetEvent($this->Parent->Detail->CCSEvents, "OnInitialize", $this->Parent->Detail);
        if ($this->Parent->Page_Footer->Visible) 
            $OverSize = $this->Parent->Detail->Height + $this->Parent->Page_Footer->Height;
        else
            $OverSize = $this->Parent->Detail->Height;
        if (($this->PageSize > 0) and $this->Parent->Detail->Visible and ($this->CurrentPageSize + $OverSize > $this->PageSize)) {
            $this->ClosePage();
            $this->OpenPage();
        }
        $this->TotalRows++;
        if ($this->LastDetailIndex)
            $PrevGroup = & $this->Groups[$this->LastDetailIndex];
        else
            $PrevGroup = "";
        $Group->SetTotalControls("", $PrevGroup);
        if ($this->Parent->Detail->Visible)
            $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Detail->Height;
        $this->Parent->Detail->CCSEventResult = CCGetEvent($this->Parent->Detail->CCSEvents, "OnCalculate", $this->Parent->Detail);
        $Group->SetControls($PrevGroup);
        $this->LastDetailIndex = count($this->Groups);
        $this->Groups[] = & $Group;
    }
}
//End Report5 GroupsCollection class

class clsReportReport5 { //Report5 Class @35-D8437588

//Report5 Variables @35-944D286E

    public $ComponentType = "Report";
    public $PageSize;
    public $ComponentName;
    public $Visible;
    public $Errors;
    public $CCSEvents = array();
    public $CCSEventResult;
    public $RelativePath = "";
    public $ViewMode = "Web";
    public $TemplateBlock;
    public $PageNumber;
    public $RowNumber;
    public $TotalRows;
    public $TotalPages;
    public $ControlsVisible = array();
    public $IsEmpty;
    public $Attributes;
    public $DetailBlock, $Detail;
    public $Report_FooterBlock, $Report_Footer;
    public $Report_HeaderBlock, $Report_Header;
    public $Page_FooterBlock, $Page_Footer;
    public $Page_HeaderBlock, $Page_Header;
    public $SorterName, $SorterDirection;

    public $ds;
    public $DataSource;
    public $UseClientPaging = false;

    //Report Controls
    public $StaticControls, $RowControls, $Report_FooterControls, $Report_HeaderControls;
    public $Page_FooterControls, $Page_HeaderControls;
//End Report5 Variables

//Class_Initialize Event @35-3C78333B
    function clsReportReport5($RelativePath = "", & $Parent)
    {
        global $FileName;
        global $CCSLocales;
        global $DefaultDateFormat;
        $this->ComponentName = "Report5";
        $this->Visible = True;
        $this->Parent = & $Parent;
        $this->RelativePath = $RelativePath;
        $this->Attributes = new clsAttributes($this->ComponentName . ":");
        $this->Detail = new clsSection($this);
        $MinPageSize = 0;
        $MaxSectionSize = 0;
        $this->Detail->Height = 1;
        $MaxSectionSize = max($MaxSectionSize, $this->Detail->Height);
        $this->Report_Footer = new clsSection($this);
        $this->Report_Footer->Height = 1;
        $MaxSectionSize = max($MaxSectionSize, $this->Report_Footer->Height);
        $this->Report_Header = new clsSection($this);
        $this->Page_Footer = new clsSection($this);
        $this->Page_Header = new clsSection($this);
        $this->Page_Header->Height = 1;
        $MinPageSize += $this->Page_Header->Height;
        $this->Errors = new clsErrors();
        $this->DataSource = new clsReport5DataSource($this);
        $this->ds = & $this->DataSource;
        $PageSize = CCGetParam($this->ComponentName . "PageSize", "");
        if(is_numeric($PageSize) && $PageSize > 0) {
            $this->PageSize = $PageSize;
        } else {
            if (!is_numeric($PageSize) || $PageSize < 0)
                $this->PageSize = 40;
             else if ($PageSize == "0")
                $this->PageSize = 100;
             else 
                $this->PageSize = min(100, $PageSize);
        }
        $MinPageSize += $MaxSectionSize;
        if ($this->PageSize && $MinPageSize && $this->PageSize < $MinPageSize)
            $this->PageSize = $MinPageSize;
        $this->PageNumber = $this->ViewMode == "Print" ? 1 : intval(CCGetParam($this->ComponentName . "Page", 1));
        if ($this->PageNumber <= 0 ) {
            $this->PageNumber = 1;
        }

        $this->patient_PatientID = new clsControl(ccsReportLabel, "patient_PatientID", "patient_PatientID", ccsInteger, "", "", $this);
        $this->F21HIV = new clsControl(ccsReportLabel, "F21HIV", "F21HIV", ccsText, "", "", $this);
        $this->patient_PatientID1 = new clsControl(ccsReportLabel, "patient_PatientID1", "patient_PatientID1", ccsFloat, "", "", $this);
        $this->patient_PatientID1->IsPercent = true;
        $this->NoRecords = new clsPanel("NoRecords", $this);
        $this->TotalSum_patient_PatientID = new clsControl(ccsReportLabel, "TotalSum_patient_PatientID", "TotalSum_patient_PatientID", ccsInteger, "", "", $this);
        $this->TotalSum_patient_PatientID->TotalFunction = "Sum";
    }
//End Class_Initialize Event

//Initialize Method @35-6C59EE65
    function Initialize()
    {
        if(!$this->Visible) return;

        $this->DataSource->PageSize = $this->PageSize;
        $this->DataSource->AbsolutePage = $this->PageNumber;
        $this->DataSource->SetOrder($this->SorterName, $this->SorterDirection);
    }
//End Initialize Method

//CheckErrors Method @35-3B95C9CC
    function CheckErrors()
    {
        $errors = false;
        $errors = ($errors || $this->patient_PatientID->Errors->Count());
        $errors = ($errors || $this->F21HIV->Errors->Count());
        $errors = ($errors || $this->patient_PatientID1->Errors->Count());
        $errors = ($errors || $this->TotalSum_patient_PatientID->Errors->Count());
        $errors = ($errors || $this->Errors->Count());
        $errors = ($errors || $this->DataSource->Errors->Count());
        return $errors;
    }
//End CheckErrors Method

//GetErrors Method @35-C71305BC
    function GetErrors()
    {
        $errors = "";
        $errors = ComposeStrings($errors, $this->patient_PatientID->Errors->ToString());
        $errors = ComposeStrings($errors, $this->F21HIV->Errors->ToString());
        $errors = ComposeStrings($errors, $this->patient_PatientID1->Errors->ToString());
        $errors = ComposeStrings($errors, $this->TotalSum_patient_PatientID->Errors->ToString());
        $errors = ComposeStrings($errors, $this->Errors->ToString());
        $errors = ComposeStrings($errors, $this->DataSource->Errors->ToString());
        return $errors;
    }
//End GetErrors Method

//Show Method @35-A5FE7CFA
    function Show()
    {
        global $Tpl;
        global $CCSLocales;
        if(!$this->Visible) return;

        $ShownRecords = 0;

        $this->DataSource->Parameters["urls_PregRegDate"] = CCGetFromGet("s_PregRegDate", NULL);
        $this->DataSource->Parameters["urls_PregRegDateTo"] = CCGetFromGet("s_PregRegDateTo", NULL);
        $this->DataSource->Parameters["urls_FacilityName"] = CCGetFromGet("s_FacilityName", NULL);

        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeSelect", $this);


        $this->DataSource->Prepare();
        $this->DataSource->Open();

        $Groups = new clsGroupsCollectionReport5($this);
        $Groups->PageSize = $this->PageSize > 0 ? $this->PageSize : 0;

        $is_next_record = $this->DataSource->next_record();
        $this->IsEmpty = ! $is_next_record;
        while($is_next_record) {
            $this->DataSource->SetValues();
            $this->patient_PatientID->SetValue($this->DataSource->patient_PatientID->GetValue());
            $this->F21HIV->SetValue($this->DataSource->F21HIV->GetValue());
            $this->patient_PatientID1->SetValue($this->DataSource->patient_PatientID1->GetValue());
            $this->TotalSum_patient_PatientID->SetValue($this->DataSource->TotalSum_patient_PatientID->GetValue());
            if (count($Groups->Groups) == 0) $Groups->OpenGroup("Report");
            $Groups->AddItem();
            $is_next_record = $this->DataSource->next_record();
        }
        if (!count($Groups->Groups)) 
            $Groups->OpenGroup("Report");
        else
            $this->NoRecords->Visible = false;
        $Groups->CloseGroup("Report");
        $this->TotalPages = $Groups->TotalPages;
        $this->TotalRows = $Groups->TotalRows;

        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeShow", $this);
        if(!$this->Visible) return;

        $this->Attributes->Show();
        $ReportBlock = "Report " . $this->ComponentName;
        $ParentPath = $Tpl->block_path;
        $Tpl->block_path = $ParentPath . "/" . $ReportBlock;

        if($this->CheckErrors()) {
            $Tpl->replaceblock("", $this->GetErrors());
            $Tpl->block_path = $ParentPath;
            return;
        } else {
            $items = & $Groups->Groups;
            $i = $Groups->Pages[min($this->PageNumber, $Groups->TotalPages) - 1];
            $this->ControlsVisible["patient_PatientID"] = $this->patient_PatientID->Visible;
            $this->ControlsVisible["F21HIV"] = $this->F21HIV->Visible;
            $this->ControlsVisible["patient_PatientID1"] = $this->patient_PatientID1->Visible;
            do {
                $this->Attributes->RestoreFromArray($items[$i]->Attributes);
                $this->RowNumber = $items[$i]->RowNumber;
                switch ($items[$i]->GroupType) {
                    Case "":
                        $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Detail";
                        $this->patient_PatientID->SetValue($items[$i]->patient_PatientID);
                        $this->patient_PatientID->Attributes->RestoreFromArray($items[$i]->_patient_PatientIDAttributes);
                        $this->F21HIV->SetValue($items[$i]->F21HIV);
                        $this->F21HIV->Attributes->RestoreFromArray($items[$i]->_F21HIVAttributes);
                        $this->patient_PatientID1->SetValue($items[$items[$i]->ReportTotalIndex]->patient_PatientID1246Rel && strval($items[$i]->patient_PatientID1) != "" ? $items[$i]->patient_PatientID1 / $items[$items[$i]->ReportTotalIndex]->patient_PatientID1246Rel : "");
                        $this->patient_PatientID1->Attributes->RestoreFromArray($items[$i]->_patient_PatientID1Attributes);
                        $this->Detail->CCSEventResult = CCGetEvent($this->Detail->CCSEvents, "BeforeShow", $this->Detail);
                        $this->Attributes->Show();
                        $this->patient_PatientID->Show();
                        $this->F21HIV->Show();
                        $this->patient_PatientID1->Show();
                        $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                        if ($this->Detail->Visible)
                            $Tpl->parseto("Section Detail", true, "Section Detail");
                        break;
                    case "Report":
                        if ($items[$i]->Mode == 1) {
                            $this->Report_Header->CCSEventResult = CCGetEvent($this->Report_Header->CCSEvents, "BeforeShow", $this->Report_Header);
                            if ($this->Report_Header->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Report_Header";
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Report_Header", true, "Section Detail");
                            }
                        }
                        if ($items[$i]->Mode == 2) {
                            $this->TotalSum_patient_PatientID->SetValue($items[$i]->TotalSum_patient_PatientID);
                            $this->TotalSum_patient_PatientID->Attributes->RestoreFromArray($items[$i]->_TotalSum_patient_PatientIDAttributes);
                            $this->Report_Footer->CCSEventResult = CCGetEvent($this->Report_Footer->CCSEvents, "BeforeShow", $this->Report_Footer);
                            if ($this->Report_Footer->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Report_Footer";
                                $this->NoRecords->Show();
                                $this->TotalSum_patient_PatientID->Show();
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Report_Footer", true, "Section Detail");
                            }
                        }
                        break;
                    case "Page":
                        if ($items[$i]->Mode == 1) {
                            $this->Page_Header->CCSEventResult = CCGetEvent($this->Page_Header->CCSEvents, "BeforeShow", $this->Page_Header);
                            if ($this->Page_Header->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Page_Header";
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Page_Header", true, "Section Detail");
                            }
                        }
                        if ($items[$i]->Mode == 2 && !$this->UseClientPaging || $items[$i]->Mode == 1 && $this->UseClientPaging) {
                            $this->Page_Footer->CCSEventResult = CCGetEvent($this->Page_Footer->CCSEvents, "BeforeShow", $this->Page_Footer);
                            if ($this->Page_Footer->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Page_Footer";
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Page_Footer", true, "Section Detail");
                            }
                        }
                        break;
                }
                $i++;
            } while ($i < count($items) && ($this->ViewMode == "Print" ||  !($i > 1 && $items[$i]->GroupType == 'Page' && $items[$i]->Mode == 1)));
            $Tpl->block_path = $ParentPath;
            $Tpl->parse($ReportBlock);
            $this->DataSource->close();
        }

    }
//End Show Method

} //End Report5 Class @35-FCB6E20C

class clsReport5DataSource extends clsDBregistry_db {  //Report5DataSource Class @35-9F1DA58E

//DataSource Variables @35-28613E27
    public $Parent = "";
    public $CCSEvents = "";
    public $CCSEventResult;
    public $ErrorBlock;
    public $CmdExecution;

    public $wp;


    // Datasource fields
    public $patient_PatientID;
    public $F21HIV;
    public $patient_PatientID1;
    public $TotalSum_patient_PatientID;
//End DataSource Variables

//DataSourceClass_Initialize Event @35-2E990A16
    function clsReport5DataSource(& $Parent)
    {
        $this->Parent = & $Parent;
        $this->ErrorBlock = "Report Report5";
        $this->Initialize();
        $this->patient_PatientID = new clsField("patient_PatientID", ccsInteger, "");
        
        $this->F21HIV = new clsField("F21HIV", ccsText, "");
        
        $this->patient_PatientID1 = new clsField("patient_PatientID1", ccsFloat, "");
        
        $this->TotalSum_patient_PatientID = new clsField("TotalSum_patient_PatientID", ccsInteger, "");
        

    }
//End DataSourceClass_Initialize Event

//SetOrder Method @35-9E1383D1
    function SetOrder($SorterName, $SorterDirection)
    {
        $this->Order = "";
        $this->Order = CCGetOrder($this->Order, $SorterName, $SorterDirection, 
            "");
    }
//End SetOrder Method

//Prepare Method @35-081B9768
    function Prepare()
    {
        global $CCSLocales;
        global $DefaultDateFormat;
        $this->wp = new clsSQLParameters($this->ErrorBlock);
        $this->wp->AddParameter("1", "urls_PregRegDate", ccsDate, array("ShortDate"), array("yyyy", "-", "mm", "-", "dd", " ", "HH", ":", "nn", ":", "ss"), $this->Parameters["urls_PregRegDate"], CCFormatDate(CCParseDate("1000-01-01",array("yyyy","-","mm","-","dd")),array("ShortDate")), false);
        $this->wp->AddParameter("2", "urls_PregRegDateTo", ccsDate, array("ShortDate"), array("yyyy", "-", "mm", "-", "dd", " ", "HH", ":", "nn", ":", "ss"), $this->Parameters["urls_PregRegDateTo"], CCFormatDate(CCParseDate("2999-01-01",array("yyyy","-","mm","-","dd")),array("ShortDate")), false);
        $this->wp->AddParameter("3", "urls_FacilityName", ccsText, "", "", $this->Parameters["urls_FacilityName"], "", false);
    }
//End Prepare Method

//Open Method @35-F2748846
    function Open()
    {
        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeBuildSelect", $this->Parent);
        $this->SQL = "SELECT 0 AS Age, COUNT(DISTINCT pregnancy.PregnancyID)AS PPP \n" .
        "FROM (((pregnancy INNER JOIN visit ON\n" .
        "visit.PregnancyID = pregnancy.PregnancyID) INNER JOIN test ON\n" .
        "test.VisitID = visit.VisitID) LEFT JOIN delivery ON\n" .
        "delivery.PregnancyID = pregnancy.PregnancyID) LEFT JOIN facilities ON\n" .
        "pregnancy.FacilityID = facilities.FacilityID \n" .
        "WHERE test.TestCodeID = 3 \n" .
        "AND ((delivery.PregnancyOutcome1ID>0 AND delivery.PregnancyOutcome1ID<3)\n" .
        "OR (delivery.PregnancyOutcome2ID>0 AND delivery.PregnancyOutcome2ID<3)\n" .
        "OR (delivery.PregnancyOutcome3ID>0 AND delivery.PregnancyOutcome3ID<3))\n" .
        "AND delivery.DataDelivery >= '" . $this->SQLValue($this->wp->GetDBValue("1"), ccsDate) . "'\n" .
        "AND delivery.DataDelivery <= '" . $this->SQLValue($this->wp->GetDBValue("2"), ccsDate) . "'\n" .
        "AND facilities.FacilityName LIKE '%" . $this->SQLValue($this->wp->GetDBValue("3"), ccsText) . "%'\n" .
        "\n" .
        "\n" .
        "UNION\n" .
        "\n" .
        "SELECT 1 AS Age,(\n" .
        "(SELECT COUNT(DISTINCT pregnancy.PregnancyID) AS PPP\n" .
        "FROM (((pregnancy LEFT JOIN visit ON\n" .
        "visit.PregnancyID = pregnancy.PregnancyID) LEFT JOIN test ON\n" .
        "test.VisitID = visit.VisitID) LEFT JOIN delivery ON\n" .
        "delivery.PregnancyID = pregnancy.PregnancyID) LEFT JOIN facilities ON\n" .
        "pregnancy.FacilityID = facilities.FacilityID \n" .
        "WHERE \n" .
        "((delivery.PregnancyOutcome1ID>0 AND delivery.PregnancyOutcome1ID<3)\n" .
        "OR (delivery.PregnancyOutcome2ID>0 AND delivery.PregnancyOutcome2ID<3)\n" .
        "OR (delivery.PregnancyOutcome3ID>0 AND delivery.PregnancyOutcome3ID<3))\n" .
        "AND delivery.DataDelivery >= '" . $this->SQLValue($this->wp->GetDBValue("1"), ccsDate) . "'\n" .
        "AND delivery.DataDelivery <= '" . $this->SQLValue($this->wp->GetDBValue("2"), ccsDate) . "'\n" .
        "AND facilities.FacilityName LIKE '%" . $this->SQLValue($this->wp->GetDBValue("3"), ccsText) . "%'\n" .
        "\n" .
        ") \n" .
        "- \n" .
        "(SELECT COUNT(DISTINCT pregnancy.PregnancyID)AS PPP \n" .
        "FROM (((pregnancy INNER JOIN visit ON\n" .
        "visit.PregnancyID = pregnancy.PregnancyID) INNER JOIN test ON\n" .
        "test.VisitID = visit.VisitID) LEFT JOIN delivery ON\n" .
        "delivery.PregnancyID = pregnancy.PregnancyID) LEFT JOIN facilities ON\n" .
        "pregnancy.FacilityID = facilities.FacilityID \n" .
        "WHERE test.TestCodeID = 3 \n" .
        "AND ((delivery.PregnancyOutcome1ID>0 AND delivery.PregnancyOutcome1ID<3)\n" .
        "OR (delivery.PregnancyOutcome2ID>0 AND delivery.PregnancyOutcome2ID<3)\n" .
        "OR (delivery.PregnancyOutcome3ID>0 AND delivery.PregnancyOutcome3ID<3))\n" .
        "AND delivery.DataDelivery >= '" . $this->SQLValue($this->wp->GetDBValue("1"), ccsDate) . "'\n" .
        "AND delivery.DataDelivery <= '" . $this->SQLValue($this->wp->GetDBValue("2"), ccsDate) . "'\n" .
        "AND facilities.FacilityName LIKE '%" . $this->SQLValue($this->wp->GetDBValue("3"), ccsText) . "%'\n" .
        "\n" .
        ")\n" .
        "\n" .
        ")";
        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeExecuteSelect", $this->Parent);
        $this->query(CCBuildSQL($this->SQL, $this->Where, $this->Order));
        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "AfterExecuteSelect", $this->Parent);
    }
//End Open Method

//SetValues Method @35-77093A7C
    function SetValues()
    {
        $this->patient_PatientID->SetDBValue(trim($this->f("PPP")));
        $this->F21HIV->SetDBValue($this->f("Age"));
        $this->patient_PatientID1->SetDBValue(trim($this->f("PPP")));
        $this->TotalSum_patient_PatientID->SetDBValue(trim($this->f("PPP")));
    }
//End SetValues Method

} //End Report5DataSource Class @35-FCB6E20C

//Report2 ReportGroup class @247-A46EA1C8
class clsReportGroupReport2 {
    public $GroupType;
    public $mode; //1 - open, 2 - close
    public $Age, $_AgeAttributes;
    public $PPP, $_PPPAttributes;
    public $PPP1, $PPP1262Rel, $_PPP1Attributes;
    public $TotalSum_PPP, $_TotalSum_PPPAttributes;
    public $Attributes;
    public $ReportTotalIndex = 0;
    public $PageTotalIndex;
    public $PageNumber;
    public $RowNumber;
    public $Parent;

    function clsReportGroupReport2(& $parent) {
        $this->Parent = & $parent;
        $this->Attributes = $this->Parent->Attributes->GetAsArray();
    }
    function SetControls($PrevGroup = "") {
        $this->Age = $this->Parent->Age->Value;
        $this->PPP = $this->Parent->PPP->Value;
        $this->PPP1 = $this->Parent->PPP1->Value;
    }

    function SetTotalControls($mode = "", $PrevGroup = "") {
        $this->TotalSum_PPP = $this->Parent->TotalSum_PPP->GetTotalValue($mode);
        $this->Parent->PPP1->GetTotalValue($mode);
        $this->PPP1262Rel = $this->Parent->PPP1->ValueRelative;
        $this->_AgeAttributes = $this->Parent->Age->Attributes->GetAsArray();
        $this->_PPPAttributes = $this->Parent->PPP->Attributes->GetAsArray();
        $this->_PPP1Attributes = $this->Parent->PPP1->Attributes->GetAsArray();
        $this->_TotalSum_PPPAttributes = $this->Parent->TotalSum_PPP->Attributes->GetAsArray();
    }
    function SyncWithHeader(& $Header) {
        $Header->TotalSum_PPP = $this->TotalSum_PPP;
        $Header->_TotalSum_PPPAttributes = $this->_TotalSum_PPPAttributes;
        $this->Age = $Header->Age;
        $Header->_AgeAttributes = $this->_AgeAttributes;
        $this->Parent->Age->Value = $Header->Age;
        $this->Parent->Age->Attributes->RestoreFromArray($Header->_AgeAttributes);
        $this->PPP = $Header->PPP;
        $Header->_PPPAttributes = $this->_PPPAttributes;
        $this->Parent->PPP->Value = $Header->PPP;
        $this->Parent->PPP->Attributes->RestoreFromArray($Header->_PPPAttributes);
        $this->PPP1 = $Header->PPP1;
        $Header->_PPP1Attributes = $this->_PPP1Attributes;
        $this->Parent->PPP1->Value = $Header->PPP1;
        $this->Parent->PPP1->Attributes->RestoreFromArray($Header->_PPP1Attributes);
        $Header->PPP1262Rel = $this->PPP1262Rel;
    }
    function ChangeTotalControls() {
        $this->PPP1 = $this->Parent->PPP1->GetValue();
        $this->TotalSum_PPP = $this->Parent->TotalSum_PPP->GetValue();
    }
}
//End Report2 ReportGroup class

//Report2 GroupsCollection class @247-9B14FCA0
class clsGroupsCollectionReport2 {
    public $Groups;
    public $mPageCurrentHeaderIndex;
    public $PageSize;
    public $TotalPages = 0;
    public $TotalRows = 0;
    public $CurrentPageSize = 0;
    public $Pages;
    public $Parent;
    public $LastDetailIndex;

    function clsGroupsCollectionReport2(& $parent) {
        $this->Parent = & $parent;
        $this->Groups = array();
        $this->Pages  = array();
        $this->mReportTotalIndex = 0;
        $this->mPageTotalIndex = 1;
    }

    function & InitGroup() {
        $group = new clsReportGroupReport2($this->Parent);
        $group->RowNumber = $this->TotalRows + 1;
        $group->PageNumber = $this->TotalPages;
        $group->PageTotalIndex = $this->mPageCurrentHeaderIndex;
        return $group;
    }

    function RestoreValues() {
        $this->Parent->Age->Value = $this->Parent->Age->initialValue;
        $this->Parent->PPP->Value = $this->Parent->PPP->initialValue;
        $this->Parent->PPP1->Value = $this->Parent->PPP1->initialValue;
        $this->Parent->TotalSum_PPP->Value = $this->Parent->TotalSum_PPP->initialValue;
    }

    function OpenPage() {
        $this->TotalPages++;
        $Group = & $this->InitGroup();
        $this->Parent->Page_Header->CCSEventResult = CCGetEvent($this->Parent->Page_Header->CCSEvents, "OnInitialize", $this->Parent->Page_Header);
        if ($this->Parent->Page_Header->Visible)
            $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Page_Header->Height;
        $Group->SetTotalControls("GetNextValue");
        $this->Parent->Page_Header->CCSEventResult = CCGetEvent($this->Parent->Page_Header->CCSEvents, "OnCalculate", $this->Parent->Page_Header);
        $Group->SetControls();
        $Group->Mode = 1;
        $Group->GroupType = "Page";
        $Group->PageTotalIndex = count($this->Groups);
        $this->mPageCurrentHeaderIndex = count($this->Groups);
        $this->Groups[] =  & $Group;
        $this->Pages[] =  count($this->Groups) == 2 ? 0 : count($this->Groups) - 1;
    }

    function OpenGroup($groupName) {
        $Group = "";
        $OpenFlag = false;
        if ($groupName == "Report") {
            $Group = & $this->InitGroup(true);
            $this->Parent->Report_Header->CCSEventResult = CCGetEvent($this->Parent->Report_Header->CCSEvents, "OnInitialize", $this->Parent->Report_Header);
            if ($this->Parent->Report_Header->Visible) 
                $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Report_Header->Height;
                $Group->SetTotalControls("GetNextValue");
            $this->Parent->Report_Header->CCSEventResult = CCGetEvent($this->Parent->Report_Header->CCSEvents, "OnCalculate", $this->Parent->Report_Header);
            $Group->SetControls();
            $Group->Mode = 1;
            $Group->GroupType = "Report";
            $this->Groups[] = & $Group;
            $this->OpenPage();
        }
    }

    function ClosePage() {
        $Group = & $this->InitGroup();
        $this->Parent->Page_Footer->CCSEventResult = CCGetEvent($this->Parent->Page_Footer->CCSEvents, "OnInitialize", $this->Parent->Page_Footer);
        $Group->SetTotalControls("GetPrevValue");
        $Group->SyncWithHeader($this->Groups[$this->mPageCurrentHeaderIndex]);
        $this->Parent->Page_Footer->CCSEventResult = CCGetEvent($this->Parent->Page_Footer->CCSEvents, "OnCalculate", $this->Parent->Page_Footer);
        $Group->SetControls();
        $this->RestoreValues();
        $this->CurrentPageSize = 0;
        $Group->Mode = 2;
        $Group->GroupType = "Page";
        $this->Groups[] = & $Group;
    }

    function CloseGroup($groupName)
    {
        $Group = "";
        if ($groupName == "Report") {
            $Group = & $this->InitGroup(true);
            $this->Parent->Report_Footer->CCSEventResult = CCGetEvent($this->Parent->Report_Footer->CCSEvents, "OnInitialize", $this->Parent->Report_Footer);
            if ($this->Parent->Page_Footer->Visible) 
                $OverSize = $this->Parent->Report_Footer->Height + $this->Parent->Page_Footer->Height;
            else
                $OverSize = $this->Parent->Report_Footer->Height;
            if (($this->PageSize > 0) and $this->Parent->Report_Footer->Visible and ($this->CurrentPageSize + $OverSize > $this->PageSize)) {
                $this->ClosePage();
                $this->OpenPage();
            }
            $Group->SetTotalControls("GetPrevValue");
            $Group->SyncWithHeader($this->Groups[0]);
            if ($this->Parent->Report_Footer->Visible)
                $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Report_Footer->Height;
            $this->Parent->Report_Footer->CCSEventResult = CCGetEvent($this->Parent->Report_Footer->CCSEvents, "OnCalculate", $this->Parent->Report_Footer);
            $Group->SetControls();
            $this->RestoreValues();
            $Group->Mode = 2;
            $Group->GroupType = "Report";
            $this->Groups[] = & $Group;
            $this->ClosePage();
            return;
        }
    }

    function AddItem()
    {
        $Group = & $this->InitGroup(true);
        $this->Parent->Detail->CCSEventResult = CCGetEvent($this->Parent->Detail->CCSEvents, "OnInitialize", $this->Parent->Detail);
        if ($this->Parent->Page_Footer->Visible) 
            $OverSize = $this->Parent->Detail->Height + $this->Parent->Page_Footer->Height;
        else
            $OverSize = $this->Parent->Detail->Height;
        if (($this->PageSize > 0) and $this->Parent->Detail->Visible and ($this->CurrentPageSize + $OverSize > $this->PageSize)) {
            $this->ClosePage();
            $this->OpenPage();
        }
        $this->TotalRows++;
        if ($this->LastDetailIndex)
            $PrevGroup = & $this->Groups[$this->LastDetailIndex];
        else
            $PrevGroup = "";
        $Group->SetTotalControls("", $PrevGroup);
        if ($this->Parent->Detail->Visible)
            $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Detail->Height;
        $this->Parent->Detail->CCSEventResult = CCGetEvent($this->Parent->Detail->CCSEvents, "OnCalculate", $this->Parent->Detail);
        $Group->SetControls($PrevGroup);
        $this->LastDetailIndex = count($this->Groups);
        $this->Groups[] = & $Group;
    }
}
//End Report2 GroupsCollection class

class clsReportReport2 { //Report2 Class @247-9702E34F

//Report2 Variables @247-944D286E

    public $ComponentType = "Report";
    public $PageSize;
    public $ComponentName;
    public $Visible;
    public $Errors;
    public $CCSEvents = array();
    public $CCSEventResult;
    public $RelativePath = "";
    public $ViewMode = "Web";
    public $TemplateBlock;
    public $PageNumber;
    public $RowNumber;
    public $TotalRows;
    public $TotalPages;
    public $ControlsVisible = array();
    public $IsEmpty;
    public $Attributes;
    public $DetailBlock, $Detail;
    public $Report_FooterBlock, $Report_Footer;
    public $Report_HeaderBlock, $Report_Header;
    public $Page_FooterBlock, $Page_Footer;
    public $Page_HeaderBlock, $Page_Header;
    public $SorterName, $SorterDirection;

    public $ds;
    public $DataSource;
    public $UseClientPaging = false;

    //Report Controls
    public $StaticControls, $RowControls, $Report_FooterControls, $Report_HeaderControls;
    public $Page_FooterControls, $Page_HeaderControls;
//End Report2 Variables

//Class_Initialize Event @247-95C1ED83
    function clsReportReport2($RelativePath = "", & $Parent)
    {
        global $FileName;
        global $CCSLocales;
        global $DefaultDateFormat;
        $this->ComponentName = "Report2";
        $this->Visible = True;
        $this->Parent = & $Parent;
        $this->RelativePath = $RelativePath;
        $this->Attributes = new clsAttributes($this->ComponentName . ":");
        $this->Detail = new clsSection($this);
        $MinPageSize = 0;
        $MaxSectionSize = 0;
        $this->Detail->Height = 1;
        $MaxSectionSize = max($MaxSectionSize, $this->Detail->Height);
        $this->Report_Footer = new clsSection($this);
        $this->Report_Footer->Height = 1;
        $MaxSectionSize = max($MaxSectionSize, $this->Report_Footer->Height);
        $this->Report_Header = new clsSection($this);
        $this->Page_Footer = new clsSection($this);
        $this->Page_Footer->Height = 1;
        $MinPageSize += $this->Page_Footer->Height;
        $this->Page_Header = new clsSection($this);
        $this->Page_Header->Height = 1;
        $MinPageSize += $this->Page_Header->Height;
        $this->Errors = new clsErrors();
        $this->DataSource = new clsReport2DataSource($this);
        $this->ds = & $this->DataSource;
        $PageSize = CCGetParam($this->ComponentName . "PageSize", "");
        if(is_numeric($PageSize) && $PageSize > 0) {
            $this->PageSize = $PageSize;
        } else {
            if (!is_numeric($PageSize) || $PageSize < 0)
                $this->PageSize = 40;
             else if ($PageSize == "0")
                $this->PageSize = 100;
             else 
                $this->PageSize = min(100, $PageSize);
        }
        $MinPageSize += $MaxSectionSize;
        if ($this->PageSize && $MinPageSize && $this->PageSize < $MinPageSize)
            $this->PageSize = $MinPageSize;
        $this->PageNumber = $this->ViewMode == "Print" ? 1 : intval(CCGetParam($this->ComponentName . "Page", 1));
        if ($this->PageNumber <= 0 ) {
            $this->PageNumber = 1;
        }

        $this->Age = new clsControl(ccsReportLabel, "Age", "Age", ccsInteger, "", "", $this);
        $this->PPP = new clsControl(ccsReportLabel, "PPP", "PPP", ccsInteger, "", "", $this);
        $this->PPP1 = new clsControl(ccsReportLabel, "PPP1", "PPP1", ccsFloat, "", "", $this);
        $this->PPP1->IsPercent = true;
        $this->NoRecords = new clsPanel("NoRecords", $this);
        $this->TotalSum_PPP = new clsControl(ccsReportLabel, "TotalSum_PPP", "TotalSum_PPP", ccsInteger, "", "", $this);
        $this->TotalSum_PPP->TotalFunction = "Sum";
    }
//End Class_Initialize Event

//Initialize Method @247-6C59EE65
    function Initialize()
    {
        if(!$this->Visible) return;

        $this->DataSource->PageSize = $this->PageSize;
        $this->DataSource->AbsolutePage = $this->PageNumber;
        $this->DataSource->SetOrder($this->SorterName, $this->SorterDirection);
    }
//End Initialize Method

//CheckErrors Method @247-D653F1A4
    function CheckErrors()
    {
        $errors = false;
        $errors = ($errors || $this->Age->Errors->Count());
        $errors = ($errors || $this->PPP->Errors->Count());
        $errors = ($errors || $this->PPP1->Errors->Count());
        $errors = ($errors || $this->TotalSum_PPP->Errors->Count());
        $errors = ($errors || $this->Errors->Count());
        $errors = ($errors || $this->DataSource->Errors->Count());
        return $errors;
    }
//End CheckErrors Method

//GetErrors Method @247-97CC3284
    function GetErrors()
    {
        $errors = "";
        $errors = ComposeStrings($errors, $this->Age->Errors->ToString());
        $errors = ComposeStrings($errors, $this->PPP->Errors->ToString());
        $errors = ComposeStrings($errors, $this->PPP1->Errors->ToString());
        $errors = ComposeStrings($errors, $this->TotalSum_PPP->Errors->ToString());
        $errors = ComposeStrings($errors, $this->Errors->ToString());
        $errors = ComposeStrings($errors, $this->DataSource->Errors->ToString());
        return $errors;
    }
//End GetErrors Method

//Show Method @247-A5ABF8A7
    function Show()
    {
        global $Tpl;
        global $CCSLocales;
        if(!$this->Visible) return;

        $ShownRecords = 0;

        $this->DataSource->Parameters["urls_PregRegDate"] = CCGetFromGet("s_PregRegDate", NULL);
        $this->DataSource->Parameters["urls_PregRegDateTo"] = CCGetFromGet("s_PregRegDateTo", NULL);
        $this->DataSource->Parameters["urls_FacilityName"] = CCGetFromGet("s_FacilityName", NULL);

        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeSelect", $this);


        $this->DataSource->Prepare();
        $this->DataSource->Open();

        $Groups = new clsGroupsCollectionReport2($this);
        $Groups->PageSize = $this->PageSize > 0 ? $this->PageSize : 0;

        $is_next_record = $this->DataSource->next_record();
        $this->IsEmpty = ! $is_next_record;
        while($is_next_record) {
            $this->DataSource->SetValues();
            $this->Age->SetValue($this->DataSource->Age->GetValue());
            $this->PPP->SetValue($this->DataSource->PPP->GetValue());
            $this->PPP1->SetValue($this->DataSource->PPP1->GetValue());
            $this->TotalSum_PPP->SetValue($this->DataSource->TotalSum_PPP->GetValue());
            if (count($Groups->Groups) == 0) $Groups->OpenGroup("Report");
            $Groups->AddItem();
            $is_next_record = $this->DataSource->next_record();
        }
        if (!count($Groups->Groups)) 
            $Groups->OpenGroup("Report");
        else
            $this->NoRecords->Visible = false;
        $Groups->CloseGroup("Report");
        $this->TotalPages = $Groups->TotalPages;
        $this->TotalRows = $Groups->TotalRows;

        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeShow", $this);
        if(!$this->Visible) return;

        $this->Attributes->Show();
        $ReportBlock = "Report " . $this->ComponentName;
        $ParentPath = $Tpl->block_path;
        $Tpl->block_path = $ParentPath . "/" . $ReportBlock;

        if($this->CheckErrors()) {
            $Tpl->replaceblock("", $this->GetErrors());
            $Tpl->block_path = $ParentPath;
            return;
        } else {
            $items = & $Groups->Groups;
            $i = $Groups->Pages[min($this->PageNumber, $Groups->TotalPages) - 1];
            $this->ControlsVisible["Age"] = $this->Age->Visible;
            $this->ControlsVisible["PPP"] = $this->PPP->Visible;
            $this->ControlsVisible["PPP1"] = $this->PPP1->Visible;
            do {
                $this->Attributes->RestoreFromArray($items[$i]->Attributes);
                $this->RowNumber = $items[$i]->RowNumber;
                switch ($items[$i]->GroupType) {
                    Case "":
                        $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Detail";
                        $this->Age->SetValue($items[$i]->Age);
                        $this->Age->Attributes->RestoreFromArray($items[$i]->_AgeAttributes);
                        $this->PPP->SetValue($items[$i]->PPP);
                        $this->PPP->Attributes->RestoreFromArray($items[$i]->_PPPAttributes);
                        $this->PPP1->SetValue($items[$items[$i]->ReportTotalIndex]->PPP1262Rel && strval($items[$i]->PPP1) != "" ? $items[$i]->PPP1 / $items[$items[$i]->ReportTotalIndex]->PPP1262Rel : "");
                        $this->PPP1->Attributes->RestoreFromArray($items[$i]->_PPP1Attributes);
                        $this->Detail->CCSEventResult = CCGetEvent($this->Detail->CCSEvents, "BeforeShow", $this->Detail);
                        $this->Attributes->Show();
                        $this->Age->Show();
                        $this->PPP->Show();
                        $this->PPP1->Show();
                        $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                        if ($this->Detail->Visible)
                            $Tpl->parseto("Section Detail", true, "Section Detail");
                        break;
                    case "Report":
                        if ($items[$i]->Mode == 1) {
                            $this->Report_Header->CCSEventResult = CCGetEvent($this->Report_Header->CCSEvents, "BeforeShow", $this->Report_Header);
                            if ($this->Report_Header->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Report_Header";
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Report_Header", true, "Section Detail");
                            }
                        }
                        if ($items[$i]->Mode == 2) {
                            $this->TotalSum_PPP->SetValue($items[$i]->TotalSum_PPP);
                            $this->TotalSum_PPP->Attributes->RestoreFromArray($items[$i]->_TotalSum_PPPAttributes);
                            $this->Report_Footer->CCSEventResult = CCGetEvent($this->Report_Footer->CCSEvents, "BeforeShow", $this->Report_Footer);
                            if ($this->Report_Footer->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Report_Footer";
                                $this->NoRecords->Show();
                                $this->TotalSum_PPP->Show();
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Report_Footer", true, "Section Detail");
                            }
                        }
                        break;
                    case "Page":
                        if ($items[$i]->Mode == 1) {
                            $this->Page_Header->CCSEventResult = CCGetEvent($this->Page_Header->CCSEvents, "BeforeShow", $this->Page_Header);
                            if ($this->Page_Header->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Page_Header";
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Page_Header", true, "Section Detail");
                            }
                        }
                        if ($items[$i]->Mode == 2 && !$this->UseClientPaging || $items[$i]->Mode == 1 && $this->UseClientPaging) {
                            $this->Page_Footer->CCSEventResult = CCGetEvent($this->Page_Footer->CCSEvents, "BeforeShow", $this->Page_Footer);
                            if ($this->Page_Footer->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Page_Footer";
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Page_Footer", true, "Section Detail");
                            }
                        }
                        break;
                }
                $i++;
            } while ($i < count($items) && ($this->ViewMode == "Print" ||  !($i > 1 && $items[$i]->GroupType == 'Page' && $items[$i]->Mode == 1)));
            $Tpl->block_path = $ParentPath;
            $Tpl->parse($ReportBlock);
            $this->DataSource->close();
        }

    }
//End Show Method

} //End Report2 Class @247-FCB6E20C

class clsReport2DataSource extends clsDBregistry_db {  //Report2DataSource Class @247-9C54C835

//DataSource Variables @247-5F8FFDD4
    public $Parent = "";
    public $CCSEvents = "";
    public $CCSEventResult;
    public $ErrorBlock;
    public $CmdExecution;

    public $wp;


    // Datasource fields
    public $Age;
    public $PPP;
    public $PPP1;
    public $TotalSum_PPP;
//End DataSource Variables

//DataSourceClass_Initialize Event @247-FECF62C5
    function clsReport2DataSource(& $Parent)
    {
        $this->Parent = & $Parent;
        $this->ErrorBlock = "Report Report2";
        $this->Initialize();
        $this->Age = new clsField("Age", ccsInteger, "");
        
        $this->PPP = new clsField("PPP", ccsInteger, "");
        
        $this->PPP1 = new clsField("PPP1", ccsFloat, "");
        
        $this->TotalSum_PPP = new clsField("TotalSum_PPP", ccsInteger, "");
        

    }
//End DataSourceClass_Initialize Event

//SetOrder Method @247-9E1383D1
    function SetOrder($SorterName, $SorterDirection)
    {
        $this->Order = "";
        $this->Order = CCGetOrder($this->Order, $SorterName, $SorterDirection, 
            "");
    }
//End SetOrder Method

//Prepare Method @247-081B9768
    function Prepare()
    {
        global $CCSLocales;
        global $DefaultDateFormat;
        $this->wp = new clsSQLParameters($this->ErrorBlock);
        $this->wp->AddParameter("1", "urls_PregRegDate", ccsDate, array("ShortDate"), array("yyyy", "-", "mm", "-", "dd", " ", "HH", ":", "nn", ":", "ss"), $this->Parameters["urls_PregRegDate"], CCFormatDate(CCParseDate("1000-01-01",array("yyyy","-","mm","-","dd")),array("ShortDate")), false);
        $this->wp->AddParameter("2", "urls_PregRegDateTo", ccsDate, array("ShortDate"), array("yyyy", "-", "mm", "-", "dd", " ", "HH", ":", "nn", ":", "ss"), $this->Parameters["urls_PregRegDateTo"], CCFormatDate(CCParseDate("2999-01-01",array("yyyy","-","mm","-","dd")),array("ShortDate")), false);
        $this->wp->AddParameter("3", "urls_FacilityName", ccsText, "", "", $this->Parameters["urls_FacilityName"], "", false);
    }
//End Prepare Method

//Open Method @247-CEFB2244
    function Open()
    {
        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeBuildSelect", $this->Parent);
        $this->SQL = "SELECT 0 AS Age, COUNT( DISTINCT pregnancy.PregnancyID ) AS PPP\n" .
        "FROM \n" .
        "(((pregnancy\n" .
        "INNER JOIN visit ON visit.PregnancyID = pregnancy.PregnancyID)\n" .
        "INNER JOIN test ON test.VisitID = visit.VisitID) LEFT JOIN delivery ON\n" .
        "delivery.PregnancyID = pregnancy.PregnancyID) LEFT JOIN facilities ON\n" .
        "pregnancy.FacilityID = facilities.FacilityID \n" .
        "WHERE test.TestCodeID =3\n" .
        "AND test.TestResultNormal =0\n" .
        "AND ((delivery.PregnancyOutcome1ID>0 AND delivery.PregnancyOutcome1ID<3)\n" .
        "OR (delivery.PregnancyOutcome2ID>0 AND delivery.PregnancyOutcome2ID<3)\n" .
        "OR (delivery.PregnancyOutcome3ID>0 AND delivery.PregnancyOutcome3ID<3))\n" .
        "AND delivery.DataDelivery >= '" . $this->SQLValue($this->wp->GetDBValue("1"), ccsDate) . "'\n" .
        "AND delivery.DataDelivery <= '" . $this->SQLValue($this->wp->GetDBValue("2"), ccsDate) . "'\n" .
        "AND facilities.FacilityName LIKE '%" . $this->SQLValue($this->wp->GetDBValue("3"), ccsText) . "%'\n" .
        "\n" .
        "UNION\n" .
        "\n" .
        "SELECT 1 AS Age, (\n" .
        "(\n" .
        "\n" .
        "SELECT COUNT( DISTINCT pregnancy.PregnancyID ) AS PPP\n" .
        "FROM \n" .
        "(((pregnancy\n" .
        "LEFT JOIN visit ON visit.PregnancyID = pregnancy.PregnancyID\n" .
        ")\n" .
        "LEFT JOIN test ON test.VisitID = visit.VisitID) LEFT JOIN delivery ON\n" .
        "delivery.PregnancyID = pregnancy.PregnancyID) LEFT JOIN facilities ON\n" .
        "pregnancy.FacilityID = facilities.FacilityID \n" .
        "WHERE \n" .
        "((delivery.PregnancyOutcome1ID>0 AND delivery.PregnancyOutcome1ID<3)\n" .
        "OR (delivery.PregnancyOutcome2ID>0 AND delivery.PregnancyOutcome2ID<3)\n" .
        "OR (delivery.PregnancyOutcome3ID>0 AND delivery.PregnancyOutcome3ID<3))\n" .
        "AND delivery.DataDelivery >= '" . $this->SQLValue($this->wp->GetDBValue("1"), ccsDate) . "'\n" .
        "AND delivery.DataDelivery <= '" . $this->SQLValue($this->wp->GetDBValue("2"), ccsDate) . "'\n" .
        "AND facilities.FacilityName LIKE '%" . $this->SQLValue($this->wp->GetDBValue("3"), ccsText) . "%'\n" .
        "\n" .
        ") \n" .
        "- \n" .
        "(\n" .
        "\n" .
        "SELECT COUNT( DISTINCT pregnancy.PregnancyID ) AS PPP\n" .
        "FROM \n" .
        "(((pregnancy\n" .
        "INNER JOIN visit ON visit.PregnancyID = pregnancy.PregnancyID)\n" .
        "INNER JOIN test ON test.VisitID = visit.VisitID)\n" .
        "LEFT JOIN delivery ON delivery.PregnancyID = pregnancy.PregnancyID) LEFT JOIN facilities ON\n" .
        "pregnancy.FacilityID = facilities.FacilityID \n" .
        "WHERE test.TestCodeID =3\n" .
        "AND test.TestResultNormal =0\n" .
        "AND ((delivery.PregnancyOutcome1ID>0 AND delivery.PregnancyOutcome1ID<3)\n" .
        "OR (delivery.PregnancyOutcome2ID>0 AND delivery.PregnancyOutcome2ID<3)\n" .
        "OR (delivery.PregnancyOutcome3ID>0 AND delivery.PregnancyOutcome3ID<3))\n" .
        "AND delivery.DataDelivery >= '" . $this->SQLValue($this->wp->GetDBValue("1"), ccsDate) . "'\n" .
        "AND delivery.DataDelivery <= '" . $this->SQLValue($this->wp->GetDBValue("2"), ccsDate) . "'\n" .
        "AND facilities.FacilityName LIKE '%" . $this->SQLValue($this->wp->GetDBValue("3"), ccsText) . "%'\n" .
        "\n" .
        ")\n" .
        ")\n" .
        "";
        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeExecuteSelect", $this->Parent);
        $this->query(CCBuildSQL($this->SQL, $this->Where, $this->Order));
        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "AfterExecuteSelect", $this->Parent);
    }
//End Open Method

//SetValues Method @247-41F3EDE3
    function SetValues()
    {
        $this->Age->SetDBValue(trim($this->f("Age")));
        $this->PPP->SetDBValue(trim($this->f("PPP")));
        $this->PPP1->SetDBValue(trim($this->f("PPP")));
        $this->TotalSum_PPP->SetDBValue(trim($this->f("PPP")));
    }
//End SetValues Method

} //End Report2DataSource Class @247-FCB6E20C

//Report6 ReportGroup class @263-8E6B686E
class clsReportGroupReport6 {
    public $GroupType;
    public $mode; //1 - open, 2 - close
    public $Age, $_AgeAttributes;
    public $PPP, $_PPPAttributes;
    public $PPP1, $PPP1275Rel, $_PPP1Attributes;
    public $TotalSum_PPP, $_TotalSum_PPPAttributes;
    public $Attributes;
    public $ReportTotalIndex = 0;
    public $PageTotalIndex;
    public $PageNumber;
    public $RowNumber;
    public $Parent;

    function clsReportGroupReport6(& $parent) {
        $this->Parent = & $parent;
        $this->Attributes = $this->Parent->Attributes->GetAsArray();
    }
    function SetControls($PrevGroup = "") {
        $this->Age = $this->Parent->Age->Value;
        $this->PPP = $this->Parent->PPP->Value;
        $this->PPP1 = $this->Parent->PPP1->Value;
    }

    function SetTotalControls($mode = "", $PrevGroup = "") {
        $this->TotalSum_PPP = $this->Parent->TotalSum_PPP->GetTotalValue($mode);
        $this->Parent->PPP1->GetTotalValue($mode);
        $this->PPP1275Rel = $this->Parent->PPP1->ValueRelative;
        $this->_AgeAttributes = $this->Parent->Age->Attributes->GetAsArray();
        $this->_PPPAttributes = $this->Parent->PPP->Attributes->GetAsArray();
        $this->_PPP1Attributes = $this->Parent->PPP1->Attributes->GetAsArray();
        $this->_TotalSum_PPPAttributes = $this->Parent->TotalSum_PPP->Attributes->GetAsArray();
    }
    function SyncWithHeader(& $Header) {
        $Header->TotalSum_PPP = $this->TotalSum_PPP;
        $Header->_TotalSum_PPPAttributes = $this->_TotalSum_PPPAttributes;
        $this->Age = $Header->Age;
        $Header->_AgeAttributes = $this->_AgeAttributes;
        $this->Parent->Age->Value = $Header->Age;
        $this->Parent->Age->Attributes->RestoreFromArray($Header->_AgeAttributes);
        $this->PPP = $Header->PPP;
        $Header->_PPPAttributes = $this->_PPPAttributes;
        $this->Parent->PPP->Value = $Header->PPP;
        $this->Parent->PPP->Attributes->RestoreFromArray($Header->_PPPAttributes);
        $this->PPP1 = $Header->PPP1;
        $Header->_PPP1Attributes = $this->_PPP1Attributes;
        $this->Parent->PPP1->Value = $Header->PPP1;
        $this->Parent->PPP1->Attributes->RestoreFromArray($Header->_PPP1Attributes);
        $Header->PPP1275Rel = $this->PPP1275Rel;
    }
    function ChangeTotalControls() {
        $this->PPP1 = $this->Parent->PPP1->GetValue();
        $this->TotalSum_PPP = $this->Parent->TotalSum_PPP->GetValue();
    }
}
//End Report6 ReportGroup class

//Report6 GroupsCollection class @263-F399A4D6
class clsGroupsCollectionReport6 {
    public $Groups;
    public $mPageCurrentHeaderIndex;
    public $PageSize;
    public $TotalPages = 0;
    public $TotalRows = 0;
    public $CurrentPageSize = 0;
    public $Pages;
    public $Parent;
    public $LastDetailIndex;

    function clsGroupsCollectionReport6(& $parent) {
        $this->Parent = & $parent;
        $this->Groups = array();
        $this->Pages  = array();
        $this->mReportTotalIndex = 0;
        $this->mPageTotalIndex = 1;
    }

    function & InitGroup() {
        $group = new clsReportGroupReport6($this->Parent);
        $group->RowNumber = $this->TotalRows + 1;
        $group->PageNumber = $this->TotalPages;
        $group->PageTotalIndex = $this->mPageCurrentHeaderIndex;
        return $group;
    }

    function RestoreValues() {
        $this->Parent->Age->Value = $this->Parent->Age->initialValue;
        $this->Parent->PPP->Value = $this->Parent->PPP->initialValue;
        $this->Parent->PPP1->Value = $this->Parent->PPP1->initialValue;
        $this->Parent->TotalSum_PPP->Value = $this->Parent->TotalSum_PPP->initialValue;
    }

    function OpenPage() {
        $this->TotalPages++;
        $Group = & $this->InitGroup();
        $this->Parent->Page_Header->CCSEventResult = CCGetEvent($this->Parent->Page_Header->CCSEvents, "OnInitialize", $this->Parent->Page_Header);
        if ($this->Parent->Page_Header->Visible)
            $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Page_Header->Height;
        $Group->SetTotalControls("GetNextValue");
        $this->Parent->Page_Header->CCSEventResult = CCGetEvent($this->Parent->Page_Header->CCSEvents, "OnCalculate", $this->Parent->Page_Header);
        $Group->SetControls();
        $Group->Mode = 1;
        $Group->GroupType = "Page";
        $Group->PageTotalIndex = count($this->Groups);
        $this->mPageCurrentHeaderIndex = count($this->Groups);
        $this->Groups[] =  & $Group;
        $this->Pages[] =  count($this->Groups) == 2 ? 0 : count($this->Groups) - 1;
    }

    function OpenGroup($groupName) {
        $Group = "";
        $OpenFlag = false;
        if ($groupName == "Report") {
            $Group = & $this->InitGroup(true);
            $this->Parent->Report_Header->CCSEventResult = CCGetEvent($this->Parent->Report_Header->CCSEvents, "OnInitialize", $this->Parent->Report_Header);
            if ($this->Parent->Report_Header->Visible) 
                $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Report_Header->Height;
                $Group->SetTotalControls("GetNextValue");
            $this->Parent->Report_Header->CCSEventResult = CCGetEvent($this->Parent->Report_Header->CCSEvents, "OnCalculate", $this->Parent->Report_Header);
            $Group->SetControls();
            $Group->Mode = 1;
            $Group->GroupType = "Report";
            $this->Groups[] = & $Group;
            $this->OpenPage();
        }
    }

    function ClosePage() {
        $Group = & $this->InitGroup();
        $this->Parent->Page_Footer->CCSEventResult = CCGetEvent($this->Parent->Page_Footer->CCSEvents, "OnInitialize", $this->Parent->Page_Footer);
        $Group->SetTotalControls("GetPrevValue");
        $Group->SyncWithHeader($this->Groups[$this->mPageCurrentHeaderIndex]);
        $this->Parent->Page_Footer->CCSEventResult = CCGetEvent($this->Parent->Page_Footer->CCSEvents, "OnCalculate", $this->Parent->Page_Footer);
        $Group->SetControls();
        $this->RestoreValues();
        $this->CurrentPageSize = 0;
        $Group->Mode = 2;
        $Group->GroupType = "Page";
        $this->Groups[] = & $Group;
    }

    function CloseGroup($groupName)
    {
        $Group = "";
        if ($groupName == "Report") {
            $Group = & $this->InitGroup(true);
            $this->Parent->Report_Footer->CCSEventResult = CCGetEvent($this->Parent->Report_Footer->CCSEvents, "OnInitialize", $this->Parent->Report_Footer);
            if ($this->Parent->Page_Footer->Visible) 
                $OverSize = $this->Parent->Report_Footer->Height + $this->Parent->Page_Footer->Height;
            else
                $OverSize = $this->Parent->Report_Footer->Height;
            if (($this->PageSize > 0) and $this->Parent->Report_Footer->Visible and ($this->CurrentPageSize + $OverSize > $this->PageSize)) {
                $this->ClosePage();
                $this->OpenPage();
            }
            $Group->SetTotalControls("GetPrevValue");
            $Group->SyncWithHeader($this->Groups[0]);
            if ($this->Parent->Report_Footer->Visible)
                $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Report_Footer->Height;
            $this->Parent->Report_Footer->CCSEventResult = CCGetEvent($this->Parent->Report_Footer->CCSEvents, "OnCalculate", $this->Parent->Report_Footer);
            $Group->SetControls();
            $this->RestoreValues();
            $Group->Mode = 2;
            $Group->GroupType = "Report";
            $this->Groups[] = & $Group;
            $this->ClosePage();
            return;
        }
    }

    function AddItem()
    {
        $Group = & $this->InitGroup(true);
        $this->Parent->Detail->CCSEventResult = CCGetEvent($this->Parent->Detail->CCSEvents, "OnInitialize", $this->Parent->Detail);
        if ($this->Parent->Page_Footer->Visible) 
            $OverSize = $this->Parent->Detail->Height + $this->Parent->Page_Footer->Height;
        else
            $OverSize = $this->Parent->Detail->Height;
        if (($this->PageSize > 0) and $this->Parent->Detail->Visible and ($this->CurrentPageSize + $OverSize > $this->PageSize)) {
            $this->ClosePage();
            $this->OpenPage();
        }
        $this->TotalRows++;
        if ($this->LastDetailIndex)
            $PrevGroup = & $this->Groups[$this->LastDetailIndex];
        else
            $PrevGroup = "";
        $Group->SetTotalControls("", $PrevGroup);
        if ($this->Parent->Detail->Visible)
            $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Detail->Height;
        $this->Parent->Detail->CCSEventResult = CCGetEvent($this->Parent->Detail->CCSEvents, "OnCalculate", $this->Parent->Detail);
        $Group->SetControls($PrevGroup);
        $this->LastDetailIndex = count($this->Groups);
        $this->Groups[] = & $Group;
    }
}
//End Report6 GroupsCollection class

class clsReportReport6 { //Report6 Class @263-F36E264B

//Report6 Variables @263-944D286E

    public $ComponentType = "Report";
    public $PageSize;
    public $ComponentName;
    public $Visible;
    public $Errors;
    public $CCSEvents = array();
    public $CCSEventResult;
    public $RelativePath = "";
    public $ViewMode = "Web";
    public $TemplateBlock;
    public $PageNumber;
    public $RowNumber;
    public $TotalRows;
    public $TotalPages;
    public $ControlsVisible = array();
    public $IsEmpty;
    public $Attributes;
    public $DetailBlock, $Detail;
    public $Report_FooterBlock, $Report_Footer;
    public $Report_HeaderBlock, $Report_Header;
    public $Page_FooterBlock, $Page_Footer;
    public $Page_HeaderBlock, $Page_Header;
    public $SorterName, $SorterDirection;

    public $ds;
    public $DataSource;
    public $UseClientPaging = false;

    //Report Controls
    public $StaticControls, $RowControls, $Report_FooterControls, $Report_HeaderControls;
    public $Page_FooterControls, $Page_HeaderControls;
//End Report6 Variables

//Class_Initialize Event @263-6CC82F5C
    function clsReportReport6($RelativePath = "", & $Parent)
    {
        global $FileName;
        global $CCSLocales;
        global $DefaultDateFormat;
        $this->ComponentName = "Report6";
        $this->Visible = True;
        $this->Parent = & $Parent;
        $this->RelativePath = $RelativePath;
        $this->Attributes = new clsAttributes($this->ComponentName . ":");
        $this->Detail = new clsSection($this);
        $MinPageSize = 0;
        $MaxSectionSize = 0;
        $this->Detail->Height = 1;
        $MaxSectionSize = max($MaxSectionSize, $this->Detail->Height);
        $this->Report_Footer = new clsSection($this);
        $this->Report_Footer->Height = 1;
        $MaxSectionSize = max($MaxSectionSize, $this->Report_Footer->Height);
        $this->Report_Header = new clsSection($this);
        $this->Page_Footer = new clsSection($this);
        $this->Page_Header = new clsSection($this);
        $this->Page_Header->Height = 1;
        $MinPageSize += $this->Page_Header->Height;
        $this->Errors = new clsErrors();
        $this->DataSource = new clsReport6DataSource($this);
        $this->ds = & $this->DataSource;
        $PageSize = CCGetParam($this->ComponentName . "PageSize", "");
        if(is_numeric($PageSize) && $PageSize > 0) {
            $this->PageSize = $PageSize;
        } else {
            if (!is_numeric($PageSize) || $PageSize < 0)
                $this->PageSize = 40;
             else if ($PageSize == "0")
                $this->PageSize = 100;
             else 
                $this->PageSize = min(100, $PageSize);
        }
        $MinPageSize += $MaxSectionSize;
        if ($this->PageSize && $MinPageSize && $this->PageSize < $MinPageSize)
            $this->PageSize = $MinPageSize;
        $this->PageNumber = $this->ViewMode == "Print" ? 1 : intval(CCGetParam($this->ComponentName . "Page", 1));
        if ($this->PageNumber <= 0 ) {
            $this->PageNumber = 1;
        }

        $this->Age = new clsControl(ccsReportLabel, "Age", "Age", ccsInteger, "", "", $this);
        $this->PPP = new clsControl(ccsReportLabel, "PPP", "PPP", ccsInteger, "", "", $this);
        $this->PPP1 = new clsControl(ccsReportLabel, "PPP1", "PPP1", ccsFloat, "", "", $this);
        $this->PPP1->IsPercent = true;
        $this->NoRecords = new clsPanel("NoRecords", $this);
        $this->TotalSum_PPP = new clsControl(ccsReportLabel, "TotalSum_PPP", "TotalSum_PPP", ccsInteger, "", "", $this);
        $this->TotalSum_PPP->TotalFunction = "Sum";
    }
//End Class_Initialize Event

//Initialize Method @263-6C59EE65
    function Initialize()
    {
        if(!$this->Visible) return;

        $this->DataSource->PageSize = $this->PageSize;
        $this->DataSource->AbsolutePage = $this->PageNumber;
        $this->DataSource->SetOrder($this->SorterName, $this->SorterDirection);
    }
//End Initialize Method

//CheckErrors Method @263-D653F1A4
    function CheckErrors()
    {
        $errors = false;
        $errors = ($errors || $this->Age->Errors->Count());
        $errors = ($errors || $this->PPP->Errors->Count());
        $errors = ($errors || $this->PPP1->Errors->Count());
        $errors = ($errors || $this->TotalSum_PPP->Errors->Count());
        $errors = ($errors || $this->Errors->Count());
        $errors = ($errors || $this->DataSource->Errors->Count());
        return $errors;
    }
//End CheckErrors Method

//GetErrors Method @263-97CC3284
    function GetErrors()
    {
        $errors = "";
        $errors = ComposeStrings($errors, $this->Age->Errors->ToString());
        $errors = ComposeStrings($errors, $this->PPP->Errors->ToString());
        $errors = ComposeStrings($errors, $this->PPP1->Errors->ToString());
        $errors = ComposeStrings($errors, $this->TotalSum_PPP->Errors->ToString());
        $errors = ComposeStrings($errors, $this->Errors->ToString());
        $errors = ComposeStrings($errors, $this->DataSource->Errors->ToString());
        return $errors;
    }
//End GetErrors Method

//Show Method @263-0C6D926D
    function Show()
    {
        global $Tpl;
        global $CCSLocales;
        if(!$this->Visible) return;

        $ShownRecords = 0;

        $this->DataSource->Parameters["urls_PregRegDate"] = CCGetFromGet("s_PregRegDate", NULL);
        $this->DataSource->Parameters["urls_PregRegDateTo"] = CCGetFromGet("s_PregRegDateTo", NULL);
        $this->DataSource->Parameters["urls_FacilityName"] = CCGetFromGet("s_FacilityName", NULL);

        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeSelect", $this);


        $this->DataSource->Prepare();
        $this->DataSource->Open();

        $Groups = new clsGroupsCollectionReport6($this);
        $Groups->PageSize = $this->PageSize > 0 ? $this->PageSize : 0;

        $is_next_record = $this->DataSource->next_record();
        $this->IsEmpty = ! $is_next_record;
        while($is_next_record) {
            $this->DataSource->SetValues();
            $this->Age->SetValue($this->DataSource->Age->GetValue());
            $this->PPP->SetValue($this->DataSource->PPP->GetValue());
            $this->PPP1->SetValue($this->DataSource->PPP1->GetValue());
            $this->TotalSum_PPP->SetValue($this->DataSource->TotalSum_PPP->GetValue());
            if (count($Groups->Groups) == 0) $Groups->OpenGroup("Report");
            $Groups->AddItem();
            $is_next_record = $this->DataSource->next_record();
        }
        if (!count($Groups->Groups)) 
            $Groups->OpenGroup("Report");
        else
            $this->NoRecords->Visible = false;
        $Groups->CloseGroup("Report");
        $this->TotalPages = $Groups->TotalPages;
        $this->TotalRows = $Groups->TotalRows;

        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeShow", $this);
        if(!$this->Visible) return;

        $this->Attributes->Show();
        $ReportBlock = "Report " . $this->ComponentName;
        $ParentPath = $Tpl->block_path;
        $Tpl->block_path = $ParentPath . "/" . $ReportBlock;

        if($this->CheckErrors()) {
            $Tpl->replaceblock("", $this->GetErrors());
            $Tpl->block_path = $ParentPath;
            return;
        } else {
            $items = & $Groups->Groups;
            $i = $Groups->Pages[min($this->PageNumber, $Groups->TotalPages) - 1];
            $this->ControlsVisible["Age"] = $this->Age->Visible;
            $this->ControlsVisible["PPP"] = $this->PPP->Visible;
            $this->ControlsVisible["PPP1"] = $this->PPP1->Visible;
            do {
                $this->Attributes->RestoreFromArray($items[$i]->Attributes);
                $this->RowNumber = $items[$i]->RowNumber;
                switch ($items[$i]->GroupType) {
                    Case "":
                        $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Detail";
                        $this->Age->SetValue($items[$i]->Age);
                        $this->Age->Attributes->RestoreFromArray($items[$i]->_AgeAttributes);
                        $this->PPP->SetValue($items[$i]->PPP);
                        $this->PPP->Attributes->RestoreFromArray($items[$i]->_PPPAttributes);
                        $this->PPP1->SetValue($items[$items[$i]->ReportTotalIndex]->PPP1275Rel && strval($items[$i]->PPP1) != "" ? $items[$i]->PPP1 / $items[$items[$i]->ReportTotalIndex]->PPP1275Rel : "");
                        $this->PPP1->Attributes->RestoreFromArray($items[$i]->_PPP1Attributes);
                        $this->Detail->CCSEventResult = CCGetEvent($this->Detail->CCSEvents, "BeforeShow", $this->Detail);
                        $this->Attributes->Show();
                        $this->Age->Show();
                        $this->PPP->Show();
                        $this->PPP1->Show();
                        $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                        if ($this->Detail->Visible)
                            $Tpl->parseto("Section Detail", true, "Section Detail");
                        break;
                    case "Report":
                        if ($items[$i]->Mode == 1) {
                            $this->Report_Header->CCSEventResult = CCGetEvent($this->Report_Header->CCSEvents, "BeforeShow", $this->Report_Header);
                            if ($this->Report_Header->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Report_Header";
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Report_Header", true, "Section Detail");
                            }
                        }
                        if ($items[$i]->Mode == 2) {
                            $this->TotalSum_PPP->SetValue($items[$i]->TotalSum_PPP);
                            $this->TotalSum_PPP->Attributes->RestoreFromArray($items[$i]->_TotalSum_PPPAttributes);
                            $this->Report_Footer->CCSEventResult = CCGetEvent($this->Report_Footer->CCSEvents, "BeforeShow", $this->Report_Footer);
                            if ($this->Report_Footer->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Report_Footer";
                                $this->NoRecords->Show();
                                $this->TotalSum_PPP->Show();
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Report_Footer", true, "Section Detail");
                            }
                        }
                        break;
                    case "Page":
                        if ($items[$i]->Mode == 1) {
                            $this->Page_Header->CCSEventResult = CCGetEvent($this->Page_Header->CCSEvents, "BeforeShow", $this->Page_Header);
                            if ($this->Page_Header->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Page_Header";
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Page_Header", true, "Section Detail");
                            }
                        }
                        if ($items[$i]->Mode == 2 && !$this->UseClientPaging || $items[$i]->Mode == 1 && $this->UseClientPaging) {
                            $this->Page_Footer->CCSEventResult = CCGetEvent($this->Page_Footer->CCSEvents, "BeforeShow", $this->Page_Footer);
                            if ($this->Page_Footer->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Page_Footer";
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Page_Footer", true, "Section Detail");
                            }
                        }
                        break;
                }
                $i++;
            } while ($i < count($items) && ($this->ViewMode == "Print" ||  !($i > 1 && $items[$i]->GroupType == 'Page' && $items[$i]->Mode == 1)));
            $Tpl->block_path = $ParentPath;
            $Tpl->parse($ReportBlock);
            $this->DataSource->close();
        }

    }
//End Show Method

} //End Report6 Class @263-FCB6E20C

class clsReport6DataSource extends clsDBregistry_db {  //Report6DataSource Class @263-14CE9B97

//DataSource Variables @263-5F8FFDD4
    public $Parent = "";
    public $CCSEvents = "";
    public $CCSEventResult;
    public $ErrorBlock;
    public $CmdExecution;

    public $wp;


    // Datasource fields
    public $Age;
    public $PPP;
    public $PPP1;
    public $TotalSum_PPP;
//End DataSource Variables

//DataSourceClass_Initialize Event @263-ABBC4DFC
    function clsReport6DataSource(& $Parent)
    {
        $this->Parent = & $Parent;
        $this->ErrorBlock = "Report Report6";
        $this->Initialize();
        $this->Age = new clsField("Age", ccsInteger, "");
        
        $this->PPP = new clsField("PPP", ccsInteger, "");
        
        $this->PPP1 = new clsField("PPP1", ccsFloat, "");
        
        $this->TotalSum_PPP = new clsField("TotalSum_PPP", ccsInteger, "");
        

    }
//End DataSourceClass_Initialize Event

//SetOrder Method @263-9E1383D1
    function SetOrder($SorterName, $SorterDirection)
    {
        $this->Order = "";
        $this->Order = CCGetOrder($this->Order, $SorterName, $SorterDirection, 
            "");
    }
//End SetOrder Method

//Prepare Method @263-081B9768
    function Prepare()
    {
        global $CCSLocales;
        global $DefaultDateFormat;
        $this->wp = new clsSQLParameters($this->ErrorBlock);
        $this->wp->AddParameter("1", "urls_PregRegDate", ccsDate, array("ShortDate"), array("yyyy", "-", "mm", "-", "dd", " ", "HH", ":", "nn", ":", "ss"), $this->Parameters["urls_PregRegDate"], CCFormatDate(CCParseDate("1000-01-01",array("yyyy","-","mm","-","dd")),array("ShortDate")), false);
        $this->wp->AddParameter("2", "urls_PregRegDateTo", ccsDate, array("ShortDate"), array("yyyy", "-", "mm", "-", "dd", " ", "HH", ":", "nn", ":", "ss"), $this->Parameters["urls_PregRegDateTo"], CCFormatDate(CCParseDate("2999-01-01",array("yyyy","-","mm","-","dd")),array("ShortDate")), false);
        $this->wp->AddParameter("3", "urls_FacilityName", ccsText, "", "", $this->Parameters["urls_FacilityName"], "", false);
    }
//End Prepare Method

//Open Method @263-62FD4D8B
    function Open()
    {
        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeBuildSelect", $this->Parent);
        $this->SQL = "SELECT 0 AS Age, COUNT(DISTINCT pregnancy.PregnancyID)AS PPP \n" .
        "FROM (((pregnancy INNER JOIN visit ON\n" .
        "visit.PregnancyID = pregnancy.PregnancyID) INNER JOIN test ON\n" .
        "test.VisitID = visit.VisitID) LEFT JOIN delivery ON\n" .
        "delivery.PregnancyID = pregnancy.PregnancyID) LEFT JOIN facilities ON\n" .
        "pregnancy.FacilityID = facilities.FacilityID \n" .
        "WHERE test.TestCodeID = 4\n" .
        "AND ((delivery.PregnancyOutcome1ID>0 AND delivery.PregnancyOutcome1ID<3)\n" .
        "OR (delivery.PregnancyOutcome2ID>0 AND delivery.PregnancyOutcome2ID<3)\n" .
        "OR (delivery.PregnancyOutcome3ID>0 AND delivery.PregnancyOutcome3ID<3))\n" .
        "AND delivery.DataDelivery >= '" . $this->SQLValue($this->wp->GetDBValue("1"), ccsDate) . "'\n" .
        "AND delivery.DataDelivery <= '" . $this->SQLValue($this->wp->GetDBValue("2"), ccsDate) . "' \n" .
        "AND facilities.FacilityName LIKE '%" . $this->SQLValue($this->wp->GetDBValue("3"), ccsText) . "%'\n" .
        "\n" .
        "UNION\n" .
        "\n" .
        "SELECT 1 AS Age,(\n" .
        "(SELECT COUNT(DISTINCT pregnancy.PregnancyID) AS PPP\n" .
        "FROM (((pregnancy LEFT JOIN visit ON\n" .
        "visit.PregnancyID = pregnancy.PregnancyID) LEFT JOIN test ON\n" .
        "test.VisitID = visit.VisitID) LEFT JOIN delivery ON\n" .
        "delivery.PregnancyID = pregnancy.PregnancyID) LEFT JOIN facilities ON\n" .
        "pregnancy.FacilityID = facilities.FacilityID \n" .
        "WHERE \n" .
        "((delivery.PregnancyOutcome1ID>0 AND delivery.PregnancyOutcome1ID<3)\n" .
        "OR (delivery.PregnancyOutcome2ID>0 AND delivery.PregnancyOutcome2ID<3)\n" .
        "OR (delivery.PregnancyOutcome3ID>0 AND delivery.PregnancyOutcome3ID<3))\n" .
        "AND delivery.DataDelivery >= '" . $this->SQLValue($this->wp->GetDBValue("1"), ccsDate) . "'\n" .
        "AND delivery.DataDelivery <= '" . $this->SQLValue($this->wp->GetDBValue("2"), ccsDate) . "'\n" .
        "AND facilities.FacilityName LIKE '%" . $this->SQLValue($this->wp->GetDBValue("3"), ccsText) . "%'\n" .
        "\n" .
        ")\n" .
        "- \n" .
        "(SELECT COUNT(DISTINCT pregnancy.PregnancyID)AS PPP \n" .
        "FROM (((pregnancy INNER JOIN visit ON\n" .
        "visit.PregnancyID = pregnancy.PregnancyID) INNER JOIN test ON\n" .
        "test.VisitID = visit.VisitID) LEFT JOIN delivery ON\n" .
        "delivery.PregnancyID = pregnancy.PregnancyID) LEFT JOIN facilities ON\n" .
        "pregnancy.FacilityID = facilities.FacilityID \n" .
        "WHERE test.TestCodeID = 4\n" .
        "AND ((delivery.PregnancyOutcome1ID>0 AND delivery.PregnancyOutcome1ID<3)\n" .
        "OR (delivery.PregnancyOutcome2ID>0 AND delivery.PregnancyOutcome2ID<3)\n" .
        "OR (delivery.PregnancyOutcome3ID>0 AND delivery.PregnancyOutcome3ID<3))\n" .
        "AND delivery.DataDelivery >= '" . $this->SQLValue($this->wp->GetDBValue("1"), ccsDate) . "'\n" .
        "AND delivery.DataDelivery <= '" . $this->SQLValue($this->wp->GetDBValue("2"), ccsDate) . "'\n" .
        "AND facilities.FacilityName LIKE '%" . $this->SQLValue($this->wp->GetDBValue("3"), ccsText) . "%'\n" .
        "\n" .
        ")\n" .
        "\n" .
        ")";
        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeExecuteSelect", $this->Parent);
        $this->query(CCBuildSQL($this->SQL, $this->Where, $this->Order));
        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "AfterExecuteSelect", $this->Parent);
    }
//End Open Method

//SetValues Method @263-41F3EDE3
    function SetValues()
    {
        $this->Age->SetDBValue(trim($this->f("Age")));
        $this->PPP->SetDBValue(trim($this->f("PPP")));
        $this->PPP1->SetDBValue(trim($this->f("PPP")));
        $this->TotalSum_PPP->SetDBValue(trim($this->f("PPP")));
    }
//End SetValues Method

} //End Report6DataSource Class @263-FCB6E20C

//Report7 ReportGroup class @277-EF005247
class clsReportGroupReport7 {
    public $GroupType;
    public $mode; //1 - open, 2 - close
    public $Age, $_AgeAttributes;
    public $PPP, $_PPPAttributes;
    public $PPP1, $PPP1289Rel, $_PPP1Attributes;
    public $TotalSum_PPP, $_TotalSum_PPPAttributes;
    public $Attributes;
    public $ReportTotalIndex = 0;
    public $PageTotalIndex;
    public $PageNumber;
    public $RowNumber;
    public $Parent;

    function clsReportGroupReport7(& $parent) {
        $this->Parent = & $parent;
        $this->Attributes = $this->Parent->Attributes->GetAsArray();
    }
    function SetControls($PrevGroup = "") {
        $this->Age = $this->Parent->Age->Value;
        $this->PPP = $this->Parent->PPP->Value;
        $this->PPP1 = $this->Parent->PPP1->Value;
    }

    function SetTotalControls($mode = "", $PrevGroup = "") {
        $this->TotalSum_PPP = $this->Parent->TotalSum_PPP->GetTotalValue($mode);
        $this->Parent->PPP1->GetTotalValue($mode);
        $this->PPP1289Rel = $this->Parent->PPP1->ValueRelative;
        $this->_AgeAttributes = $this->Parent->Age->Attributes->GetAsArray();
        $this->_PPPAttributes = $this->Parent->PPP->Attributes->GetAsArray();
        $this->_PPP1Attributes = $this->Parent->PPP1->Attributes->GetAsArray();
        $this->_TotalSum_PPPAttributes = $this->Parent->TotalSum_PPP->Attributes->GetAsArray();
    }
    function SyncWithHeader(& $Header) {
        $Header->TotalSum_PPP = $this->TotalSum_PPP;
        $Header->_TotalSum_PPPAttributes = $this->_TotalSum_PPPAttributes;
        $this->Age = $Header->Age;
        $Header->_AgeAttributes = $this->_AgeAttributes;
        $this->Parent->Age->Value = $Header->Age;
        $this->Parent->Age->Attributes->RestoreFromArray($Header->_AgeAttributes);
        $this->PPP = $Header->PPP;
        $Header->_PPPAttributes = $this->_PPPAttributes;
        $this->Parent->PPP->Value = $Header->PPP;
        $this->Parent->PPP->Attributes->RestoreFromArray($Header->_PPPAttributes);
        $this->PPP1 = $Header->PPP1;
        $Header->_PPP1Attributes = $this->_PPP1Attributes;
        $this->Parent->PPP1->Value = $Header->PPP1;
        $this->Parent->PPP1->Attributes->RestoreFromArray($Header->_PPP1Attributes);
        $Header->PPP1289Rel = $this->PPP1289Rel;
    }
    function ChangeTotalControls() {
        $this->PPP1 = $this->Parent->PPP1->GetValue();
        $this->TotalSum_PPP = $this->Parent->TotalSum_PPP->GetValue();
    }
}
//End Report7 ReportGroup class

//Report7 GroupsCollection class @277-040271EB
class clsGroupsCollectionReport7 {
    public $Groups;
    public $mPageCurrentHeaderIndex;
    public $PageSize;
    public $TotalPages = 0;
    public $TotalRows = 0;
    public $CurrentPageSize = 0;
    public $Pages;
    public $Parent;
    public $LastDetailIndex;

    function clsGroupsCollectionReport7(& $parent) {
        $this->Parent = & $parent;
        $this->Groups = array();
        $this->Pages  = array();
        $this->mReportTotalIndex = 0;
        $this->mPageTotalIndex = 1;
    }

    function & InitGroup() {
        $group = new clsReportGroupReport7($this->Parent);
        $group->RowNumber = $this->TotalRows + 1;
        $group->PageNumber = $this->TotalPages;
        $group->PageTotalIndex = $this->mPageCurrentHeaderIndex;
        return $group;
    }

    function RestoreValues() {
        $this->Parent->Age->Value = $this->Parent->Age->initialValue;
        $this->Parent->PPP->Value = $this->Parent->PPP->initialValue;
        $this->Parent->PPP1->Value = $this->Parent->PPP1->initialValue;
        $this->Parent->TotalSum_PPP->Value = $this->Parent->TotalSum_PPP->initialValue;
    }

    function OpenPage() {
        $this->TotalPages++;
        $Group = & $this->InitGroup();
        $this->Parent->Page_Header->CCSEventResult = CCGetEvent($this->Parent->Page_Header->CCSEvents, "OnInitialize", $this->Parent->Page_Header);
        if ($this->Parent->Page_Header->Visible)
            $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Page_Header->Height;
        $Group->SetTotalControls("GetNextValue");
        $this->Parent->Page_Header->CCSEventResult = CCGetEvent($this->Parent->Page_Header->CCSEvents, "OnCalculate", $this->Parent->Page_Header);
        $Group->SetControls();
        $Group->Mode = 1;
        $Group->GroupType = "Page";
        $Group->PageTotalIndex = count($this->Groups);
        $this->mPageCurrentHeaderIndex = count($this->Groups);
        $this->Groups[] =  & $Group;
        $this->Pages[] =  count($this->Groups) == 2 ? 0 : count($this->Groups) - 1;
    }

    function OpenGroup($groupName) {
        $Group = "";
        $OpenFlag = false;
        if ($groupName == "Report") {
            $Group = & $this->InitGroup(true);
            $this->Parent->Report_Header->CCSEventResult = CCGetEvent($this->Parent->Report_Header->CCSEvents, "OnInitialize", $this->Parent->Report_Header);
            if ($this->Parent->Report_Header->Visible) 
                $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Report_Header->Height;
                $Group->SetTotalControls("GetNextValue");
            $this->Parent->Report_Header->CCSEventResult = CCGetEvent($this->Parent->Report_Header->CCSEvents, "OnCalculate", $this->Parent->Report_Header);
            $Group->SetControls();
            $Group->Mode = 1;
            $Group->GroupType = "Report";
            $this->Groups[] = & $Group;
            $this->OpenPage();
        }
    }

    function ClosePage() {
        $Group = & $this->InitGroup();
        $this->Parent->Page_Footer->CCSEventResult = CCGetEvent($this->Parent->Page_Footer->CCSEvents, "OnInitialize", $this->Parent->Page_Footer);
        $Group->SetTotalControls("GetPrevValue");
        $Group->SyncWithHeader($this->Groups[$this->mPageCurrentHeaderIndex]);
        $this->Parent->Page_Footer->CCSEventResult = CCGetEvent($this->Parent->Page_Footer->CCSEvents, "OnCalculate", $this->Parent->Page_Footer);
        $Group->SetControls();
        $this->RestoreValues();
        $this->CurrentPageSize = 0;
        $Group->Mode = 2;
        $Group->GroupType = "Page";
        $this->Groups[] = & $Group;
    }

    function CloseGroup($groupName)
    {
        $Group = "";
        if ($groupName == "Report") {
            $Group = & $this->InitGroup(true);
            $this->Parent->Report_Footer->CCSEventResult = CCGetEvent($this->Parent->Report_Footer->CCSEvents, "OnInitialize", $this->Parent->Report_Footer);
            if ($this->Parent->Page_Footer->Visible) 
                $OverSize = $this->Parent->Report_Footer->Height + $this->Parent->Page_Footer->Height;
            else
                $OverSize = $this->Parent->Report_Footer->Height;
            if (($this->PageSize > 0) and $this->Parent->Report_Footer->Visible and ($this->CurrentPageSize + $OverSize > $this->PageSize)) {
                $this->ClosePage();
                $this->OpenPage();
            }
            $Group->SetTotalControls("GetPrevValue");
            $Group->SyncWithHeader($this->Groups[0]);
            if ($this->Parent->Report_Footer->Visible)
                $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Report_Footer->Height;
            $this->Parent->Report_Footer->CCSEventResult = CCGetEvent($this->Parent->Report_Footer->CCSEvents, "OnCalculate", $this->Parent->Report_Footer);
            $Group->SetControls();
            $this->RestoreValues();
            $Group->Mode = 2;
            $Group->GroupType = "Report";
            $this->Groups[] = & $Group;
            $this->ClosePage();
            return;
        }
    }

    function AddItem()
    {
        $Group = & $this->InitGroup(true);
        $this->Parent->Detail->CCSEventResult = CCGetEvent($this->Parent->Detail->CCSEvents, "OnInitialize", $this->Parent->Detail);
        if ($this->Parent->Page_Footer->Visible) 
            $OverSize = $this->Parent->Detail->Height + $this->Parent->Page_Footer->Height;
        else
            $OverSize = $this->Parent->Detail->Height;
        if (($this->PageSize > 0) and $this->Parent->Detail->Visible and ($this->CurrentPageSize + $OverSize > $this->PageSize)) {
            $this->ClosePage();
            $this->OpenPage();
        }
        $this->TotalRows++;
        if ($this->LastDetailIndex)
            $PrevGroup = & $this->Groups[$this->LastDetailIndex];
        else
            $PrevGroup = "";
        $Group->SetTotalControls("", $PrevGroup);
        if ($this->Parent->Detail->Visible)
            $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Detail->Height;
        $this->Parent->Detail->CCSEventResult = CCGetEvent($this->Parent->Detail->CCSEvents, "OnCalculate", $this->Parent->Detail);
        $Group->SetControls($PrevGroup);
        $this->LastDetailIndex = count($this->Groups);
        $this->Groups[] = & $Group;
    }
}
//End Report7 GroupsCollection class

class clsReportReport7 { //Report7 Class @277-EA75170A

//Report7 Variables @277-944D286E

    public $ComponentType = "Report";
    public $PageSize;
    public $ComponentName;
    public $Visible;
    public $Errors;
    public $CCSEvents = array();
    public $CCSEventResult;
    public $RelativePath = "";
    public $ViewMode = "Web";
    public $TemplateBlock;
    public $PageNumber;
    public $RowNumber;
    public $TotalRows;
    public $TotalPages;
    public $ControlsVisible = array();
    public $IsEmpty;
    public $Attributes;
    public $DetailBlock, $Detail;
    public $Report_FooterBlock, $Report_Footer;
    public $Report_HeaderBlock, $Report_Header;
    public $Page_FooterBlock, $Page_Footer;
    public $Page_HeaderBlock, $Page_Header;
    public $SorterName, $SorterDirection;

    public $ds;
    public $DataSource;
    public $UseClientPaging = false;

    //Report Controls
    public $StaticControls, $RowControls, $Report_FooterControls, $Report_HeaderControls;
    public $Page_FooterControls, $Page_HeaderControls;
//End Report7 Variables

//Class_Initialize Event @277-92B4BD1B
    function clsReportReport7($RelativePath = "", & $Parent)
    {
        global $FileName;
        global $CCSLocales;
        global $DefaultDateFormat;
        $this->ComponentName = "Report7";
        $this->Visible = True;
        $this->Parent = & $Parent;
        $this->RelativePath = $RelativePath;
        $this->Attributes = new clsAttributes($this->ComponentName . ":");
        $this->Detail = new clsSection($this);
        $MinPageSize = 0;
        $MaxSectionSize = 0;
        $this->Detail->Height = 1;
        $MaxSectionSize = max($MaxSectionSize, $this->Detail->Height);
        $this->Report_Footer = new clsSection($this);
        $this->Report_Footer->Height = 1;
        $MaxSectionSize = max($MaxSectionSize, $this->Report_Footer->Height);
        $this->Report_Header = new clsSection($this);
        $this->Page_Footer = new clsSection($this);
        $this->Page_Header = new clsSection($this);
        $this->Page_Header->Height = 1;
        $MinPageSize += $this->Page_Header->Height;
        $this->Errors = new clsErrors();
        $this->DataSource = new clsReport7DataSource($this);
        $this->ds = & $this->DataSource;
        $PageSize = CCGetParam($this->ComponentName . "PageSize", "");
        if(is_numeric($PageSize) && $PageSize > 0) {
            $this->PageSize = $PageSize;
        } else {
            if (!is_numeric($PageSize) || $PageSize < 0)
                $this->PageSize = 40;
             else if ($PageSize == "0")
                $this->PageSize = 100;
             else 
                $this->PageSize = min(100, $PageSize);
        }
        $MinPageSize += $MaxSectionSize;
        if ($this->PageSize && $MinPageSize && $this->PageSize < $MinPageSize)
            $this->PageSize = $MinPageSize;
        $this->PageNumber = $this->ViewMode == "Print" ? 1 : intval(CCGetParam($this->ComponentName . "Page", 1));
        if ($this->PageNumber <= 0 ) {
            $this->PageNumber = 1;
        }

        $this->Age = new clsControl(ccsReportLabel, "Age", "Age", ccsInteger, "", "", $this);
        $this->PPP = new clsControl(ccsReportLabel, "PPP", "PPP", ccsInteger, "", "", $this);
        $this->PPP1 = new clsControl(ccsReportLabel, "PPP1", "PPP1", ccsFloat, "", "", $this);
        $this->PPP1->IsPercent = true;
        $this->NoRecords = new clsPanel("NoRecords", $this);
        $this->TotalSum_PPP = new clsControl(ccsReportLabel, "TotalSum_PPP", "TotalSum_PPP", ccsInteger, "", "", $this);
        $this->TotalSum_PPP->TotalFunction = "Sum";
    }
//End Class_Initialize Event

//Initialize Method @277-6C59EE65
    function Initialize()
    {
        if(!$this->Visible) return;

        $this->DataSource->PageSize = $this->PageSize;
        $this->DataSource->AbsolutePage = $this->PageNumber;
        $this->DataSource->SetOrder($this->SorterName, $this->SorterDirection);
    }
//End Initialize Method

//CheckErrors Method @277-D653F1A4
    function CheckErrors()
    {
        $errors = false;
        $errors = ($errors || $this->Age->Errors->Count());
        $errors = ($errors || $this->PPP->Errors->Count());
        $errors = ($errors || $this->PPP1->Errors->Count());
        $errors = ($errors || $this->TotalSum_PPP->Errors->Count());
        $errors = ($errors || $this->Errors->Count());
        $errors = ($errors || $this->DataSource->Errors->Count());
        return $errors;
    }
//End CheckErrors Method

//GetErrors Method @277-97CC3284
    function GetErrors()
    {
        $errors = "";
        $errors = ComposeStrings($errors, $this->Age->Errors->ToString());
        $errors = ComposeStrings($errors, $this->PPP->Errors->ToString());
        $errors = ComposeStrings($errors, $this->PPP1->Errors->ToString());
        $errors = ComposeStrings($errors, $this->TotalSum_PPP->Errors->ToString());
        $errors = ComposeStrings($errors, $this->Errors->ToString());
        $errors = ComposeStrings($errors, $this->DataSource->Errors->ToString());
        return $errors;
    }
//End GetErrors Method

//Show Method @277-BA722CB7
    function Show()
    {
        global $Tpl;
        global $CCSLocales;
        if(!$this->Visible) return;

        $ShownRecords = 0;

        $this->DataSource->Parameters["urls_PregRegDate"] = CCGetFromGet("s_PregRegDate", NULL);
        $this->DataSource->Parameters["urls_PregRegDateTo"] = CCGetFromGet("s_PregRegDateTo", NULL);
        $this->DataSource->Parameters["urls_FacilityName"] = CCGetFromGet("s_FacilityName", NULL);

        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeSelect", $this);


        $this->DataSource->Prepare();
        $this->DataSource->Open();

        $Groups = new clsGroupsCollectionReport7($this);
        $Groups->PageSize = $this->PageSize > 0 ? $this->PageSize : 0;

        $is_next_record = $this->DataSource->next_record();
        $this->IsEmpty = ! $is_next_record;
        while($is_next_record) {
            $this->DataSource->SetValues();
            $this->Age->SetValue($this->DataSource->Age->GetValue());
            $this->PPP->SetValue($this->DataSource->PPP->GetValue());
            $this->PPP1->SetValue($this->DataSource->PPP1->GetValue());
            $this->TotalSum_PPP->SetValue($this->DataSource->TotalSum_PPP->GetValue());
            if (count($Groups->Groups) == 0) $Groups->OpenGroup("Report");
            $Groups->AddItem();
            $is_next_record = $this->DataSource->next_record();
        }
        if (!count($Groups->Groups)) 
            $Groups->OpenGroup("Report");
        else
            $this->NoRecords->Visible = false;
        $Groups->CloseGroup("Report");
        $this->TotalPages = $Groups->TotalPages;
        $this->TotalRows = $Groups->TotalRows;

        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeShow", $this);
        if(!$this->Visible) return;

        $this->Attributes->Show();
        $ReportBlock = "Report " . $this->ComponentName;
        $ParentPath = $Tpl->block_path;
        $Tpl->block_path = $ParentPath . "/" . $ReportBlock;

        if($this->CheckErrors()) {
            $Tpl->replaceblock("", $this->GetErrors());
            $Tpl->block_path = $ParentPath;
            return;
        } else {
            $items = & $Groups->Groups;
            $i = $Groups->Pages[min($this->PageNumber, $Groups->TotalPages) - 1];
            $this->ControlsVisible["Age"] = $this->Age->Visible;
            $this->ControlsVisible["PPP"] = $this->PPP->Visible;
            $this->ControlsVisible["PPP1"] = $this->PPP1->Visible;
            do {
                $this->Attributes->RestoreFromArray($items[$i]->Attributes);
                $this->RowNumber = $items[$i]->RowNumber;
                switch ($items[$i]->GroupType) {
                    Case "":
                        $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Detail";
                        $this->Age->SetValue($items[$i]->Age);
                        $this->Age->Attributes->RestoreFromArray($items[$i]->_AgeAttributes);
                        $this->PPP->SetValue($items[$i]->PPP);
                        $this->PPP->Attributes->RestoreFromArray($items[$i]->_PPPAttributes);
                        $this->PPP1->SetValue($items[$items[$i]->ReportTotalIndex]->PPP1289Rel && strval($items[$i]->PPP1) != "" ? $items[$i]->PPP1 / $items[$items[$i]->ReportTotalIndex]->PPP1289Rel : "");
                        $this->PPP1->Attributes->RestoreFromArray($items[$i]->_PPP1Attributes);
                        $this->Detail->CCSEventResult = CCGetEvent($this->Detail->CCSEvents, "BeforeShow", $this->Detail);
                        $this->Attributes->Show();
                        $this->Age->Show();
                        $this->PPP->Show();
                        $this->PPP1->Show();
                        $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                        if ($this->Detail->Visible)
                            $Tpl->parseto("Section Detail", true, "Section Detail");
                        break;
                    case "Report":
                        if ($items[$i]->Mode == 1) {
                            $this->Report_Header->CCSEventResult = CCGetEvent($this->Report_Header->CCSEvents, "BeforeShow", $this->Report_Header);
                            if ($this->Report_Header->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Report_Header";
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Report_Header", true, "Section Detail");
                            }
                        }
                        if ($items[$i]->Mode == 2) {
                            $this->TotalSum_PPP->SetValue($items[$i]->TotalSum_PPP);
                            $this->TotalSum_PPP->Attributes->RestoreFromArray($items[$i]->_TotalSum_PPPAttributes);
                            $this->Report_Footer->CCSEventResult = CCGetEvent($this->Report_Footer->CCSEvents, "BeforeShow", $this->Report_Footer);
                            if ($this->Report_Footer->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Report_Footer";
                                $this->NoRecords->Show();
                                $this->TotalSum_PPP->Show();
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Report_Footer", true, "Section Detail");
                            }
                        }
                        break;
                    case "Page":
                        if ($items[$i]->Mode == 1) {
                            $this->Page_Header->CCSEventResult = CCGetEvent($this->Page_Header->CCSEvents, "BeforeShow", $this->Page_Header);
                            if ($this->Page_Header->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Page_Header";
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Page_Header", true, "Section Detail");
                            }
                        }
                        if ($items[$i]->Mode == 2 && !$this->UseClientPaging || $items[$i]->Mode == 1 && $this->UseClientPaging) {
                            $this->Page_Footer->CCSEventResult = CCGetEvent($this->Page_Footer->CCSEvents, "BeforeShow", $this->Page_Footer);
                            if ($this->Page_Footer->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Page_Footer";
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Page_Footer", true, "Section Detail");
                            }
                        }
                        break;
                }
                $i++;
            } while ($i < count($items) && ($this->ViewMode == "Print" ||  !($i > 1 && $items[$i]->GroupType == 'Page' && $items[$i]->Mode == 1)));
            $Tpl->block_path = $ParentPath;
            $Tpl->parse($ReportBlock);
            $this->DataSource->close();
        }

    }
//End Show Method

} //End Report7 Class @277-FCB6E20C

class clsReport7DataSource extends clsDBregistry_db {  //Report7DataSource Class @277-DB508C5F

//DataSource Variables @277-5F8FFDD4
    public $Parent = "";
    public $CCSEvents = "";
    public $CCSEventResult;
    public $ErrorBlock;
    public $CmdExecution;

    public $wp;


    // Datasource fields
    public $Age;
    public $PPP;
    public $PPP1;
    public $TotalSum_PPP;
//End DataSource Variables

//DataSourceClass_Initialize Event @277-C83CC7A2
    function clsReport7DataSource(& $Parent)
    {
        $this->Parent = & $Parent;
        $this->ErrorBlock = "Report Report7";
        $this->Initialize();
        $this->Age = new clsField("Age", ccsInteger, "");
        
        $this->PPP = new clsField("PPP", ccsInteger, "");
        
        $this->PPP1 = new clsField("PPP1", ccsFloat, "");
        
        $this->TotalSum_PPP = new clsField("TotalSum_PPP", ccsInteger, "");
        

    }
//End DataSourceClass_Initialize Event

//SetOrder Method @277-9E1383D1
    function SetOrder($SorterName, $SorterDirection)
    {
        $this->Order = "";
        $this->Order = CCGetOrder($this->Order, $SorterName, $SorterDirection, 
            "");
    }
//End SetOrder Method

//Prepare Method @277-081B9768
    function Prepare()
    {
        global $CCSLocales;
        global $DefaultDateFormat;
        $this->wp = new clsSQLParameters($this->ErrorBlock);
        $this->wp->AddParameter("1", "urls_PregRegDate", ccsDate, array("ShortDate"), array("yyyy", "-", "mm", "-", "dd", " ", "HH", ":", "nn", ":", "ss"), $this->Parameters["urls_PregRegDate"], CCFormatDate(CCParseDate("1000-01-01",array("yyyy","-","mm","-","dd")),array("ShortDate")), false);
        $this->wp->AddParameter("2", "urls_PregRegDateTo", ccsDate, array("ShortDate"), array("yyyy", "-", "mm", "-", "dd", " ", "HH", ":", "nn", ":", "ss"), $this->Parameters["urls_PregRegDateTo"], CCFormatDate(CCParseDate("2999-01-01",array("yyyy","-","mm","-","dd")),array("ShortDate")), false);
        $this->wp->AddParameter("3", "urls_FacilityName", ccsText, "", "", $this->Parameters["urls_FacilityName"], "", false);
    }
//End Prepare Method

//Open Method @277-AB64E5D8
    function Open()
    {
        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeBuildSelect", $this->Parent);
        $this->SQL = "SELECT 0 AS Age, COUNT(DISTINCT pregnancy.PregnancyID)AS PPP \n" .
        "FROM (((pregnancy INNER JOIN visit ON\n" .
        "visit.PregnancyID = pregnancy.PregnancyID) INNER JOIN test ON\n" .
        "test.VisitID = visit.VisitID) LEFT JOIN delivery ON\n" .
        "delivery.PregnancyID = pregnancy.PregnancyID) LEFT JOIN facilities ON\n" .
        "pregnancy.FacilityID = facilities.FacilityID \n" .
        "WHERE test.TestCodeID = 2\n" .
        "AND((delivery.PregnancyOutcome1ID>0 AND delivery.PregnancyOutcome1ID<3)\n" .
        "OR (delivery.PregnancyOutcome2ID>0 AND delivery.PregnancyOutcome2ID<3)\n" .
        "OR (delivery.PregnancyOutcome3ID>0 AND delivery.PregnancyOutcome3ID<3))\n" .
        "AND delivery.DataDelivery >= '" . $this->SQLValue($this->wp->GetDBValue("1"), ccsDate) . "'\n" .
        "AND delivery.DataDelivery <= '" . $this->SQLValue($this->wp->GetDBValue("2"), ccsDate) . "'\n" .
        "AND facilities.FacilityName LIKE '%" . $this->SQLValue($this->wp->GetDBValue("3"), ccsText) . "%'\n" .
        "\n" .
        "\n" .
        "UNION\n" .
        "\n" .
        "SELECT 1 AS Age,(\n" .
        "(SELECT COUNT(DISTINCT pregnancy.PregnancyID) AS PPP\n" .
        "FROM (((pregnancy LEFT JOIN visit ON\n" .
        "visit.PregnancyID = pregnancy.PregnancyID) LEFT JOIN test ON\n" .
        "test.VisitID = visit.VisitID) LEFT JOIN delivery ON\n" .
        "delivery.PregnancyID = pregnancy.PregnancyID) LEFT JOIN facilities ON\n" .
        "pregnancy.FacilityID = facilities.FacilityID \n" .
        "WHERE \n" .
        "((delivery.PregnancyOutcome1ID>0 AND delivery.PregnancyOutcome1ID<3)\n" .
        "OR (delivery.PregnancyOutcome2ID>0 AND delivery.PregnancyOutcome2ID<3)\n" .
        "OR (delivery.PregnancyOutcome3ID>0 AND delivery.PregnancyOutcome3ID<3))\n" .
        "AND delivery.DataDelivery >= '" . $this->SQLValue($this->wp->GetDBValue("1"), ccsDate) . "'\n" .
        "AND delivery.DataDelivery <= '" . $this->SQLValue($this->wp->GetDBValue("2"), ccsDate) . "'\n" .
        "AND facilities.FacilityName LIKE '%" . $this->SQLValue($this->wp->GetDBValue("3"), ccsText) . "%'\n" .
        "\n" .
        ")\n" .
        "- \n" .
        "(SELECT COUNT(DISTINCT pregnancy.PregnancyID)AS PPP \n" .
        "FROM (((pregnancy INNER JOIN visit ON\n" .
        "visit.PregnancyID = pregnancy.PregnancyID) INNER JOIN test ON\n" .
        "test.VisitID = visit.VisitID) LEFT JOIN delivery ON\n" .
        "delivery.PregnancyID = pregnancy.PregnancyID) LEFT JOIN facilities ON\n" .
        "pregnancy.FacilityID = facilities.FacilityID \n" .
        "WHERE test.TestCodeID = 2 \n" .
        "AND ((delivery.PregnancyOutcome1ID>0 AND delivery.PregnancyOutcome1ID<3)\n" .
        "OR (delivery.PregnancyOutcome2ID>0 AND delivery.PregnancyOutcome2ID<3)\n" .
        "OR (delivery.PregnancyOutcome3ID>0 AND delivery.PregnancyOutcome3ID<3))\n" .
        "AND delivery.DataDelivery >= '" . $this->SQLValue($this->wp->GetDBValue("1"), ccsDate) . "'\n" .
        "AND delivery.DataDelivery <= '" . $this->SQLValue($this->wp->GetDBValue("2"), ccsDate) . "'\n" .
        "AND facilities.FacilityName LIKE '%" . $this->SQLValue($this->wp->GetDBValue("3"), ccsText) . "%'\n" .
        "\n" .
        ")\n" .
        "\n" .
        ")";
        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeExecuteSelect", $this->Parent);
        $this->query(CCBuildSQL($this->SQL, $this->Where, $this->Order));
        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "AfterExecuteSelect", $this->Parent);
    }
//End Open Method

//SetValues Method @277-41F3EDE3
    function SetValues()
    {
        $this->Age->SetDBValue(trim($this->f("Age")));
        $this->PPP->SetDBValue(trim($this->f("PPP")));
        $this->PPP1->SetDBValue(trim($this->f("PPP")));
        $this->TotalSum_PPP->SetDBValue(trim($this->f("PPP")));
    }
//End SetValues Method

} //End Report7DataSource Class @277-FCB6E20C

//Report8 ReportGroup class @291-49F7DBEE
class clsReportGroupReport8 {
    public $GroupType;
    public $mode; //1 - open, 2 - close
    public $Age, $_AgeAttributes;
    public $PPP, $_PPPAttributes;
    public $PPP1, $PPP1303Rel, $_PPP1Attributes;
    public $TotalSum_PPP, $_TotalSum_PPPAttributes;
    public $Attributes;
    public $ReportTotalIndex = 0;
    public $PageTotalIndex;
    public $PageNumber;
    public $RowNumber;
    public $Parent;

    function clsReportGroupReport8(& $parent) {
        $this->Parent = & $parent;
        $this->Attributes = $this->Parent->Attributes->GetAsArray();
    }
    function SetControls($PrevGroup = "") {
        $this->Age = $this->Parent->Age->Value;
        $this->PPP = $this->Parent->PPP->Value;
        $this->PPP1 = $this->Parent->PPP1->Value;
    }

    function SetTotalControls($mode = "", $PrevGroup = "") {
        $this->TotalSum_PPP = $this->Parent->TotalSum_PPP->GetTotalValue($mode);
        $this->Parent->PPP1->GetTotalValue($mode);
        $this->PPP1303Rel = $this->Parent->PPP1->ValueRelative;
        $this->_AgeAttributes = $this->Parent->Age->Attributes->GetAsArray();
        $this->_PPPAttributes = $this->Parent->PPP->Attributes->GetAsArray();
        $this->_PPP1Attributes = $this->Parent->PPP1->Attributes->GetAsArray();
        $this->_TotalSum_PPPAttributes = $this->Parent->TotalSum_PPP->Attributes->GetAsArray();
    }
    function SyncWithHeader(& $Header) {
        $Header->TotalSum_PPP = $this->TotalSum_PPP;
        $Header->_TotalSum_PPPAttributes = $this->_TotalSum_PPPAttributes;
        $this->Age = $Header->Age;
        $Header->_AgeAttributes = $this->_AgeAttributes;
        $this->Parent->Age->Value = $Header->Age;
        $this->Parent->Age->Attributes->RestoreFromArray($Header->_AgeAttributes);
        $this->PPP = $Header->PPP;
        $Header->_PPPAttributes = $this->_PPPAttributes;
        $this->Parent->PPP->Value = $Header->PPP;
        $this->Parent->PPP->Attributes->RestoreFromArray($Header->_PPPAttributes);
        $this->PPP1 = $Header->PPP1;
        $Header->_PPP1Attributes = $this->_PPP1Attributes;
        $this->Parent->PPP1->Value = $Header->PPP1;
        $this->Parent->PPP1->Attributes->RestoreFromArray($Header->_PPP1Attributes);
        $Header->PPP1303Rel = $this->PPP1303Rel;
    }
    function ChangeTotalControls() {
        $this->PPP1 = $this->Parent->PPP1->GetValue();
        $this->TotalSum_PPP = $this->Parent->TotalSum_PPP->GetValue();
    }
}
//End Report8 ReportGroup class

//Report8 GroupsCollection class @291-7E48E077
class clsGroupsCollectionReport8 {
    public $Groups;
    public $mPageCurrentHeaderIndex;
    public $PageSize;
    public $TotalPages = 0;
    public $TotalRows = 0;
    public $CurrentPageSize = 0;
    public $Pages;
    public $Parent;
    public $LastDetailIndex;

    function clsGroupsCollectionReport8(& $parent) {
        $this->Parent = & $parent;
        $this->Groups = array();
        $this->Pages  = array();
        $this->mReportTotalIndex = 0;
        $this->mPageTotalIndex = 1;
    }

    function & InitGroup() {
        $group = new clsReportGroupReport8($this->Parent);
        $group->RowNumber = $this->TotalRows + 1;
        $group->PageNumber = $this->TotalPages;
        $group->PageTotalIndex = $this->mPageCurrentHeaderIndex;
        return $group;
    }

    function RestoreValues() {
        $this->Parent->Age->Value = $this->Parent->Age->initialValue;
        $this->Parent->PPP->Value = $this->Parent->PPP->initialValue;
        $this->Parent->PPP1->Value = $this->Parent->PPP1->initialValue;
        $this->Parent->TotalSum_PPP->Value = $this->Parent->TotalSum_PPP->initialValue;
    }

    function OpenPage() {
        $this->TotalPages++;
        $Group = & $this->InitGroup();
        $this->Parent->Page_Header->CCSEventResult = CCGetEvent($this->Parent->Page_Header->CCSEvents, "OnInitialize", $this->Parent->Page_Header);
        if ($this->Parent->Page_Header->Visible)
            $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Page_Header->Height;
        $Group->SetTotalControls("GetNextValue");
        $this->Parent->Page_Header->CCSEventResult = CCGetEvent($this->Parent->Page_Header->CCSEvents, "OnCalculate", $this->Parent->Page_Header);
        $Group->SetControls();
        $Group->Mode = 1;
        $Group->GroupType = "Page";
        $Group->PageTotalIndex = count($this->Groups);
        $this->mPageCurrentHeaderIndex = count($this->Groups);
        $this->Groups[] =  & $Group;
        $this->Pages[] =  count($this->Groups) == 2 ? 0 : count($this->Groups) - 1;
    }

    function OpenGroup($groupName) {
        $Group = "";
        $OpenFlag = false;
        if ($groupName == "Report") {
            $Group = & $this->InitGroup(true);
            $this->Parent->Report_Header->CCSEventResult = CCGetEvent($this->Parent->Report_Header->CCSEvents, "OnInitialize", $this->Parent->Report_Header);
            if ($this->Parent->Report_Header->Visible) 
                $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Report_Header->Height;
                $Group->SetTotalControls("GetNextValue");
            $this->Parent->Report_Header->CCSEventResult = CCGetEvent($this->Parent->Report_Header->CCSEvents, "OnCalculate", $this->Parent->Report_Header);
            $Group->SetControls();
            $Group->Mode = 1;
            $Group->GroupType = "Report";
            $this->Groups[] = & $Group;
            $this->OpenPage();
        }
    }

    function ClosePage() {
        $Group = & $this->InitGroup();
        $this->Parent->Page_Footer->CCSEventResult = CCGetEvent($this->Parent->Page_Footer->CCSEvents, "OnInitialize", $this->Parent->Page_Footer);
        $Group->SetTotalControls("GetPrevValue");
        $Group->SyncWithHeader($this->Groups[$this->mPageCurrentHeaderIndex]);
        $this->Parent->Page_Footer->CCSEventResult = CCGetEvent($this->Parent->Page_Footer->CCSEvents, "OnCalculate", $this->Parent->Page_Footer);
        $Group->SetControls();
        $this->RestoreValues();
        $this->CurrentPageSize = 0;
        $Group->Mode = 2;
        $Group->GroupType = "Page";
        $this->Groups[] = & $Group;
    }

    function CloseGroup($groupName)
    {
        $Group = "";
        if ($groupName == "Report") {
            $Group = & $this->InitGroup(true);
            $this->Parent->Report_Footer->CCSEventResult = CCGetEvent($this->Parent->Report_Footer->CCSEvents, "OnInitialize", $this->Parent->Report_Footer);
            if ($this->Parent->Page_Footer->Visible) 
                $OverSize = $this->Parent->Report_Footer->Height + $this->Parent->Page_Footer->Height;
            else
                $OverSize = $this->Parent->Report_Footer->Height;
            if (($this->PageSize > 0) and $this->Parent->Report_Footer->Visible and ($this->CurrentPageSize + $OverSize > $this->PageSize)) {
                $this->ClosePage();
                $this->OpenPage();
            }
            $Group->SetTotalControls("GetPrevValue");
            $Group->SyncWithHeader($this->Groups[0]);
            if ($this->Parent->Report_Footer->Visible)
                $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Report_Footer->Height;
            $this->Parent->Report_Footer->CCSEventResult = CCGetEvent($this->Parent->Report_Footer->CCSEvents, "OnCalculate", $this->Parent->Report_Footer);
            $Group->SetControls();
            $this->RestoreValues();
            $Group->Mode = 2;
            $Group->GroupType = "Report";
            $this->Groups[] = & $Group;
            $this->ClosePage();
            return;
        }
    }

    function AddItem()
    {
        $Group = & $this->InitGroup(true);
        $this->Parent->Detail->CCSEventResult = CCGetEvent($this->Parent->Detail->CCSEvents, "OnInitialize", $this->Parent->Detail);
        if ($this->Parent->Page_Footer->Visible) 
            $OverSize = $this->Parent->Detail->Height + $this->Parent->Page_Footer->Height;
        else
            $OverSize = $this->Parent->Detail->Height;
        if (($this->PageSize > 0) and $this->Parent->Detail->Visible and ($this->CurrentPageSize + $OverSize > $this->PageSize)) {
            $this->ClosePage();
            $this->OpenPage();
        }
        $this->TotalRows++;
        if ($this->LastDetailIndex)
            $PrevGroup = & $this->Groups[$this->LastDetailIndex];
        else
            $PrevGroup = "";
        $Group->SetTotalControls("", $PrevGroup);
        if ($this->Parent->Detail->Visible)
            $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Detail->Height;
        $this->Parent->Detail->CCSEventResult = CCGetEvent($this->Parent->Detail->CCSEvents, "OnCalculate", $this->Parent->Detail);
        $Group->SetControls($PrevGroup);
        $this->LastDetailIndex = count($this->Groups);
        $this->Groups[] = & $Group;
    }
}
//End Report8 GroupsCollection class

class clsReportReport8 { //Report8 Class @291-6DED0BC5

//Report8 Variables @291-944D286E

    public $ComponentType = "Report";
    public $PageSize;
    public $ComponentName;
    public $Visible;
    public $Errors;
    public $CCSEvents = array();
    public $CCSEventResult;
    public $RelativePath = "";
    public $ViewMode = "Web";
    public $TemplateBlock;
    public $PageNumber;
    public $RowNumber;
    public $TotalRows;
    public $TotalPages;
    public $ControlsVisible = array();
    public $IsEmpty;
    public $Attributes;
    public $DetailBlock, $Detail;
    public $Report_FooterBlock, $Report_Footer;
    public $Report_HeaderBlock, $Report_Header;
    public $Page_FooterBlock, $Page_Footer;
    public $Page_HeaderBlock, $Page_Header;
    public $SorterName, $SorterDirection;

    public $ds;
    public $DataSource;
    public $UseClientPaging = false;

    //Report Controls
    public $StaticControls, $RowControls, $Report_FooterControls, $Report_HeaderControls;
    public $Page_FooterControls, $Page_HeaderControls;
//End Report8 Variables

//Class_Initialize Event @291-9A70C331
    function clsReportReport8($RelativePath = "", & $Parent)
    {
        global $FileName;
        global $CCSLocales;
        global $DefaultDateFormat;
        $this->ComponentName = "Report8";
        $this->Visible = True;
        $this->Parent = & $Parent;
        $this->RelativePath = $RelativePath;
        $this->Attributes = new clsAttributes($this->ComponentName . ":");
        $this->Detail = new clsSection($this);
        $MinPageSize = 0;
        $MaxSectionSize = 0;
        $this->Detail->Height = 1;
        $MaxSectionSize = max($MaxSectionSize, $this->Detail->Height);
        $this->Report_Footer = new clsSection($this);
        $this->Report_Footer->Height = 1;
        $MaxSectionSize = max($MaxSectionSize, $this->Report_Footer->Height);
        $this->Report_Header = new clsSection($this);
        $this->Page_Footer = new clsSection($this);
        $this->Page_Header = new clsSection($this);
        $this->Page_Header->Height = 1;
        $MinPageSize += $this->Page_Header->Height;
        $this->Errors = new clsErrors();
        $this->DataSource = new clsReport8DataSource($this);
        $this->ds = & $this->DataSource;
        $PageSize = CCGetParam($this->ComponentName . "PageSize", "");
        if(is_numeric($PageSize) && $PageSize > 0) {
            $this->PageSize = $PageSize;
        } else {
            if (!is_numeric($PageSize) || $PageSize < 0)
                $this->PageSize = 40;
             else if ($PageSize == "0")
                $this->PageSize = 100;
             else 
                $this->PageSize = min(100, $PageSize);
        }
        $MinPageSize += $MaxSectionSize;
        if ($this->PageSize && $MinPageSize && $this->PageSize < $MinPageSize)
            $this->PageSize = $MinPageSize;
        $this->PageNumber = $this->ViewMode == "Print" ? 1 : intval(CCGetParam($this->ComponentName . "Page", 1));
        if ($this->PageNumber <= 0 ) {
            $this->PageNumber = 1;
        }

        $this->Age = new clsControl(ccsReportLabel, "Age", "Age", ccsInteger, "", "", $this);
        $this->PPP = new clsControl(ccsReportLabel, "PPP", "PPP", ccsInteger, "", "", $this);
        $this->PPP1 = new clsControl(ccsReportLabel, "PPP1", "PPP1", ccsFloat, "", "", $this);
        $this->PPP1->IsPercent = true;
        $this->NoRecords = new clsPanel("NoRecords", $this);
        $this->TotalSum_PPP = new clsControl(ccsReportLabel, "TotalSum_PPP", "TotalSum_PPP", ccsInteger, "", "", $this);
        $this->TotalSum_PPP->TotalFunction = "Sum";
    }
//End Class_Initialize Event

//Initialize Method @291-6C59EE65
    function Initialize()
    {
        if(!$this->Visible) return;

        $this->DataSource->PageSize = $this->PageSize;
        $this->DataSource->AbsolutePage = $this->PageNumber;
        $this->DataSource->SetOrder($this->SorterName, $this->SorterDirection);
    }
//End Initialize Method

//CheckErrors Method @291-D653F1A4
    function CheckErrors()
    {
        $errors = false;
        $errors = ($errors || $this->Age->Errors->Count());
        $errors = ($errors || $this->PPP->Errors->Count());
        $errors = ($errors || $this->PPP1->Errors->Count());
        $errors = ($errors || $this->TotalSum_PPP->Errors->Count());
        $errors = ($errors || $this->Errors->Count());
        $errors = ($errors || $this->DataSource->Errors->Count());
        return $errors;
    }
//End CheckErrors Method

//GetErrors Method @291-97CC3284
    function GetErrors()
    {
        $errors = "";
        $errors = ComposeStrings($errors, $this->Age->Errors->ToString());
        $errors = ComposeStrings($errors, $this->PPP->Errors->ToString());
        $errors = ComposeStrings($errors, $this->PPP1->Errors->ToString());
        $errors = ComposeStrings($errors, $this->TotalSum_PPP->Errors->ToString());
        $errors = ComposeStrings($errors, $this->Errors->ToString());
        $errors = ComposeStrings($errors, $this->DataSource->Errors->ToString());
        return $errors;
    }
//End GetErrors Method

//Show Method @291-7CB4110D
    function Show()
    {
        global $Tpl;
        global $CCSLocales;
        if(!$this->Visible) return;

        $ShownRecords = 0;

        $this->DataSource->Parameters["urls_PregRegDate"] = CCGetFromGet("s_PregRegDate", NULL);
        $this->DataSource->Parameters["urls_PregRegDateTo"] = CCGetFromGet("s_PregRegDateTo", NULL);
        $this->DataSource->Parameters["urls_FacilityName"] = CCGetFromGet("s_FacilityName", NULL);

        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeSelect", $this);


        $this->DataSource->Prepare();
        $this->DataSource->Open();

        $Groups = new clsGroupsCollectionReport8($this);
        $Groups->PageSize = $this->PageSize > 0 ? $this->PageSize : 0;

        $is_next_record = $this->DataSource->next_record();
        $this->IsEmpty = ! $is_next_record;
        while($is_next_record) {
            $this->DataSource->SetValues();
            $this->Age->SetValue($this->DataSource->Age->GetValue());
            $this->PPP->SetValue($this->DataSource->PPP->GetValue());
            $this->PPP1->SetValue($this->DataSource->PPP1->GetValue());
            $this->TotalSum_PPP->SetValue($this->DataSource->TotalSum_PPP->GetValue());
            if (count($Groups->Groups) == 0) $Groups->OpenGroup("Report");
            $Groups->AddItem();
            $is_next_record = $this->DataSource->next_record();
        }
        if (!count($Groups->Groups)) 
            $Groups->OpenGroup("Report");
        else
            $this->NoRecords->Visible = false;
        $Groups->CloseGroup("Report");
        $this->TotalPages = $Groups->TotalPages;
        $this->TotalRows = $Groups->TotalRows;

        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeShow", $this);
        if(!$this->Visible) return;

        $this->Attributes->Show();
        $ReportBlock = "Report " . $this->ComponentName;
        $ParentPath = $Tpl->block_path;
        $Tpl->block_path = $ParentPath . "/" . $ReportBlock;

        if($this->CheckErrors()) {
            $Tpl->replaceblock("", $this->GetErrors());
            $Tpl->block_path = $ParentPath;
            return;
        } else {
            $items = & $Groups->Groups;
            $i = $Groups->Pages[min($this->PageNumber, $Groups->TotalPages) - 1];
            $this->ControlsVisible["Age"] = $this->Age->Visible;
            $this->ControlsVisible["PPP"] = $this->PPP->Visible;
            $this->ControlsVisible["PPP1"] = $this->PPP1->Visible;
            do {
                $this->Attributes->RestoreFromArray($items[$i]->Attributes);
                $this->RowNumber = $items[$i]->RowNumber;
                switch ($items[$i]->GroupType) {
                    Case "":
                        $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Detail";
                        $this->Age->SetValue($items[$i]->Age);
                        $this->Age->Attributes->RestoreFromArray($items[$i]->_AgeAttributes);
                        $this->PPP->SetValue($items[$i]->PPP);
                        $this->PPP->Attributes->RestoreFromArray($items[$i]->_PPPAttributes);
                        $this->PPP1->SetValue($items[$items[$i]->ReportTotalIndex]->PPP1303Rel && strval($items[$i]->PPP1) != "" ? $items[$i]->PPP1 / $items[$items[$i]->ReportTotalIndex]->PPP1303Rel : "");
                        $this->PPP1->Attributes->RestoreFromArray($items[$i]->_PPP1Attributes);
                        $this->Detail->CCSEventResult = CCGetEvent($this->Detail->CCSEvents, "BeforeShow", $this->Detail);
                        $this->Attributes->Show();
                        $this->Age->Show();
                        $this->PPP->Show();
                        $this->PPP1->Show();
                        $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                        if ($this->Detail->Visible)
                            $Tpl->parseto("Section Detail", true, "Section Detail");
                        break;
                    case "Report":
                        if ($items[$i]->Mode == 1) {
                            $this->Report_Header->CCSEventResult = CCGetEvent($this->Report_Header->CCSEvents, "BeforeShow", $this->Report_Header);
                            if ($this->Report_Header->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Report_Header";
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Report_Header", true, "Section Detail");
                            }
                        }
                        if ($items[$i]->Mode == 2) {
                            $this->TotalSum_PPP->SetValue($items[$i]->TotalSum_PPP);
                            $this->TotalSum_PPP->Attributes->RestoreFromArray($items[$i]->_TotalSum_PPPAttributes);
                            $this->Report_Footer->CCSEventResult = CCGetEvent($this->Report_Footer->CCSEvents, "BeforeShow", $this->Report_Footer);
                            if ($this->Report_Footer->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Report_Footer";
                                $this->NoRecords->Show();
                                $this->TotalSum_PPP->Show();
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Report_Footer", true, "Section Detail");
                            }
                        }
                        break;
                    case "Page":
                        if ($items[$i]->Mode == 1) {
                            $this->Page_Header->CCSEventResult = CCGetEvent($this->Page_Header->CCSEvents, "BeforeShow", $this->Page_Header);
                            if ($this->Page_Header->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Page_Header";
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Page_Header", true, "Section Detail");
                            }
                        }
                        if ($items[$i]->Mode == 2 && !$this->UseClientPaging || $items[$i]->Mode == 1 && $this->UseClientPaging) {
                            $this->Page_Footer->CCSEventResult = CCGetEvent($this->Page_Footer->CCSEvents, "BeforeShow", $this->Page_Footer);
                            if ($this->Page_Footer->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Page_Footer";
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Page_Footer", true, "Section Detail");
                            }
                        }
                        break;
                }
                $i++;
            } while ($i < count($items) && ($this->ViewMode == "Print" ||  !($i > 1 && $items[$i]->GroupType == 'Page' && $items[$i]->Mode == 1)));
            $Tpl->block_path = $ParentPath;
            $Tpl->parse($ReportBlock);
            $this->DataSource->close();
        }

    }
//End Show Method

} //End Report8 Class @291-FCB6E20C

class clsReport8DataSource extends clsDBregistry_db {  //Report8DataSource Class @291-125C40E1

//DataSource Variables @291-5F8FFDD4
    public $Parent = "";
    public $CCSEvents = "";
    public $CCSEventResult;
    public $ErrorBlock;
    public $CmdExecution;

    public $wp;


    // Datasource fields
    public $Age;
    public $PPP;
    public $PPP1;
    public $TotalSum_PPP;
//End DataSource Variables

//DataSourceClass_Initialize Event @291-9328280B
    function clsReport8DataSource(& $Parent)
    {
        $this->Parent = & $Parent;
        $this->ErrorBlock = "Report Report8";
        $this->Initialize();
        $this->Age = new clsField("Age", ccsInteger, "");
        
        $this->PPP = new clsField("PPP", ccsInteger, "");
        
        $this->PPP1 = new clsField("PPP1", ccsFloat, "");
        
        $this->TotalSum_PPP = new clsField("TotalSum_PPP", ccsInteger, "");
        

    }
//End DataSourceClass_Initialize Event

//SetOrder Method @291-9E1383D1
    function SetOrder($SorterName, $SorterDirection)
    {
        $this->Order = "";
        $this->Order = CCGetOrder($this->Order, $SorterName, $SorterDirection, 
            "");
    }
//End SetOrder Method

//Prepare Method @291-081B9768
    function Prepare()
    {
        global $CCSLocales;
        global $DefaultDateFormat;
        $this->wp = new clsSQLParameters($this->ErrorBlock);
        $this->wp->AddParameter("1", "urls_PregRegDate", ccsDate, array("ShortDate"), array("yyyy", "-", "mm", "-", "dd", " ", "HH", ":", "nn", ":", "ss"), $this->Parameters["urls_PregRegDate"], CCFormatDate(CCParseDate("1000-01-01",array("yyyy","-","mm","-","dd")),array("ShortDate")), false);
        $this->wp->AddParameter("2", "urls_PregRegDateTo", ccsDate, array("ShortDate"), array("yyyy", "-", "mm", "-", "dd", " ", "HH", ":", "nn", ":", "ss"), $this->Parameters["urls_PregRegDateTo"], CCFormatDate(CCParseDate("2999-01-01",array("yyyy","-","mm","-","dd")),array("ShortDate")), false);
        $this->wp->AddParameter("3", "urls_FacilityName", ccsText, "", "", $this->Parameters["urls_FacilityName"], "", false);
    }
//End Prepare Method

//Open Method @291-F7B759D3
    function Open()
    {
        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeBuildSelect", $this->Parent);
        $this->SQL = "SELECT 0 AS Age, COUNT(DISTINCT pregnancy.PregnancyID)AS PPP \n" .
        "FROM (pregnancy LEFT JOIN delivery ON\n" .
        "delivery.PregnancyID = pregnancy.PregnancyID) LEFT JOIN facilities ON\n" .
        "pregnancy.FacilityID = facilities.FacilityID \n" .
        "WHERE pregnancy.Ultrasound20weeks = 1\n" .
        "AND ((delivery.PregnancyOutcome1ID>0 AND delivery.PregnancyOutcome1ID<3)\n" .
        "OR (delivery.PregnancyOutcome2ID>0 AND delivery.PregnancyOutcome2ID<3)\n" .
        "OR (delivery.PregnancyOutcome3ID>0 AND delivery.PregnancyOutcome3ID<3))\n" .
        "AND delivery.DataDelivery >= '" . $this->SQLValue($this->wp->GetDBValue("1"), ccsDate) . "'\n" .
        "AND delivery.DataDelivery <= '" . $this->SQLValue($this->wp->GetDBValue("2"), ccsDate) . "'\n" .
        "AND facilities.FacilityName LIKE '%" . $this->SQLValue($this->wp->GetDBValue("3"), ccsText) . "%' \n" .
        "\n" .
        "\n" .
        "UNION\n" .
        "\n" .
        "SELECT 1 AS Age, (\n" .
        "(SELECT COUNT(DISTINCT pregnancy.PregnancyID)AS PPP \n" .
        "FROM (pregnancy LEFT JOIN delivery ON\n" .
        "delivery.PregnancyID = pregnancy.PregnancyID) LEFT JOIN facilities ON\n" .
        "pregnancy.FacilityID = facilities.FacilityID \n" .
        "WHERE \n" .
        "((delivery.PregnancyOutcome1ID>0 AND delivery.PregnancyOutcome1ID<3)\n" .
        "OR (delivery.PregnancyOutcome2ID>0 AND delivery.PregnancyOutcome2ID<3)\n" .
        "OR (delivery.PregnancyOutcome3ID>0 AND delivery.PregnancyOutcome3ID<3))\n" .
        "AND delivery.DataDelivery >= '" . $this->SQLValue($this->wp->GetDBValue("1"), ccsDate) . "'\n" .
        "AND delivery.DataDelivery <= '" . $this->SQLValue($this->wp->GetDBValue("2"), ccsDate) . "'\n" .
        "AND facilities.FacilityName LIKE '%" . $this->SQLValue($this->wp->GetDBValue("3"), ccsText) . "%'\n" .
        "\n" .
        ")\n" .
        "-\n" .
        "(SELECT COUNT(DISTINCT pregnancy.PregnancyID)AS PPP \n" .
        "FROM (pregnancy LEFT JOIN delivery ON\n" .
        "delivery.PregnancyID = pregnancy.PregnancyID) LEFT JOIN facilities ON\n" .
        "pregnancy.FacilityID = facilities.FacilityID \n" .
        "WHERE pregnancy.Ultrasound20weeks = 1\n" .
        "AND ((delivery.PregnancyOutcome1ID>0 AND delivery.PregnancyOutcome1ID<3)\n" .
        "OR (delivery.PregnancyOutcome2ID>0 AND delivery.PregnancyOutcome2ID<3)\n" .
        "OR (delivery.PregnancyOutcome3ID>0 AND delivery.PregnancyOutcome3ID<3))\n" .
        "AND delivery.DataDelivery >= '" . $this->SQLValue($this->wp->GetDBValue("1"), ccsDate) . "'\n" .
        "AND delivery.DataDelivery <= '" . $this->SQLValue($this->wp->GetDBValue("2"), ccsDate) . "'\n" .
        "AND facilities.FacilityName LIKE '%" . $this->SQLValue($this->wp->GetDBValue("3"), ccsText) . "%'\n" .
        " \n" .
        ")\n" .
        ")";
        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeExecuteSelect", $this->Parent);
        $this->query(CCBuildSQL($this->SQL, $this->Where, $this->Order));
        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "AfterExecuteSelect", $this->Parent);
    }
//End Open Method

//SetValues Method @291-41F3EDE3
    function SetValues()
    {
        $this->Age->SetDBValue(trim($this->f("Age")));
        $this->PPP->SetDBValue(trim($this->f("PPP")));
        $this->PPP1->SetDBValue(trim($this->f("PPP")));
        $this->TotalSum_PPP->SetDBValue(trim($this->f("PPP")));
    }
//End SetValues Method

} //End Report8DataSource Class @291-FCB6E20C

//Report9 ReportGroup class @305-14998DB6
class clsReportGroupReport9 {
    public $GroupType;
    public $mode; //1 - open, 2 - close
    public $Age, $_AgeAttributes;
    public $COUNT_1, $_COUNT_1Attributes;
    public $COUNT_2, $COUNT_2559Rel, $_COUNT_2Attributes;
    public $TotalSum_COUNT_1, $_TotalSum_COUNT_1Attributes;
    public $Attributes;
    public $ReportTotalIndex = 0;
    public $PageTotalIndex;
    public $PageNumber;
    public $RowNumber;
    public $Parent;

    function clsReportGroupReport9(& $parent) {
        $this->Parent = & $parent;
        $this->Attributes = $this->Parent->Attributes->GetAsArray();
    }
    function SetControls($PrevGroup = "") {
        $this->Age = $this->Parent->Age->Value;
        $this->COUNT_1 = $this->Parent->COUNT_1->Value;
        $this->COUNT_2 = $this->Parent->COUNT_2->Value;
    }

    function SetTotalControls($mode = "", $PrevGroup = "") {
        $this->TotalSum_COUNT_1 = $this->Parent->TotalSum_COUNT_1->GetTotalValue($mode);
        $this->Parent->COUNT_2->GetTotalValue($mode);
        $this->COUNT_2559Rel = $this->Parent->COUNT_2->ValueRelative;
        $this->_AgeAttributes = $this->Parent->Age->Attributes->GetAsArray();
        $this->_COUNT_1Attributes = $this->Parent->COUNT_1->Attributes->GetAsArray();
        $this->_COUNT_2Attributes = $this->Parent->COUNT_2->Attributes->GetAsArray();
        $this->_TotalSum_COUNT_1Attributes = $this->Parent->TotalSum_COUNT_1->Attributes->GetAsArray();
    }
    function SyncWithHeader(& $Header) {
        $Header->TotalSum_COUNT_1 = $this->TotalSum_COUNT_1;
        $Header->_TotalSum_COUNT_1Attributes = $this->_TotalSum_COUNT_1Attributes;
        $this->Age = $Header->Age;
        $Header->_AgeAttributes = $this->_AgeAttributes;
        $this->Parent->Age->Value = $Header->Age;
        $this->Parent->Age->Attributes->RestoreFromArray($Header->_AgeAttributes);
        $this->COUNT_1 = $Header->COUNT_1;
        $Header->_COUNT_1Attributes = $this->_COUNT_1Attributes;
        $this->Parent->COUNT_1->Value = $Header->COUNT_1;
        $this->Parent->COUNT_1->Attributes->RestoreFromArray($Header->_COUNT_1Attributes);
        $this->COUNT_2 = $Header->COUNT_2;
        $Header->_COUNT_2Attributes = $this->_COUNT_2Attributes;
        $this->Parent->COUNT_2->Value = $Header->COUNT_2;
        $this->Parent->COUNT_2->Attributes->RestoreFromArray($Header->_COUNT_2Attributes);
        $Header->COUNT_2559Rel = $this->COUNT_2559Rel;
    }
    function ChangeTotalControls() {
        $this->COUNT_2 = $this->Parent->COUNT_2->GetValue();
        $this->TotalSum_COUNT_1 = $this->Parent->TotalSum_COUNT_1->GetValue();
    }
}
//End Report9 ReportGroup class

//Report9 GroupsCollection class @305-7235E8A8
class clsGroupsCollectionReport9 {
    public $Groups;
    public $mPageCurrentHeaderIndex;
    public $PageSize;
    public $TotalPages = 0;
    public $TotalRows = 0;
    public $CurrentPageSize = 0;
    public $Pages;
    public $Parent;
    public $LastDetailIndex;

    function clsGroupsCollectionReport9(& $parent) {
        $this->Parent = & $parent;
        $this->Groups = array();
        $this->Pages  = array();
        $this->mReportTotalIndex = 0;
        $this->mPageTotalIndex = 1;
    }

    function & InitGroup() {
        $group = new clsReportGroupReport9($this->Parent);
        $group->RowNumber = $this->TotalRows + 1;
        $group->PageNumber = $this->TotalPages;
        $group->PageTotalIndex = $this->mPageCurrentHeaderIndex;
        return $group;
    }

    function RestoreValues() {
        $this->Parent->Age->Value = $this->Parent->Age->initialValue;
        $this->Parent->COUNT_1->Value = $this->Parent->COUNT_1->initialValue;
        $this->Parent->COUNT_2->Value = $this->Parent->COUNT_2->initialValue;
        $this->Parent->TotalSum_COUNT_1->Value = $this->Parent->TotalSum_COUNT_1->initialValue;
    }

    function OpenPage() {
        $this->TotalPages++;
        $Group = & $this->InitGroup();
        $this->Parent->Page_Header->CCSEventResult = CCGetEvent($this->Parent->Page_Header->CCSEvents, "OnInitialize", $this->Parent->Page_Header);
        if ($this->Parent->Page_Header->Visible)
            $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Page_Header->Height;
        $Group->SetTotalControls("GetNextValue");
        $this->Parent->Page_Header->CCSEventResult = CCGetEvent($this->Parent->Page_Header->CCSEvents, "OnCalculate", $this->Parent->Page_Header);
        $Group->SetControls();
        $Group->Mode = 1;
        $Group->GroupType = "Page";
        $Group->PageTotalIndex = count($this->Groups);
        $this->mPageCurrentHeaderIndex = count($this->Groups);
        $this->Groups[] =  & $Group;
        $this->Pages[] =  count($this->Groups) == 2 ? 0 : count($this->Groups) - 1;
    }

    function OpenGroup($groupName) {
        $Group = "";
        $OpenFlag = false;
        if ($groupName == "Report") {
            $Group = & $this->InitGroup(true);
            $this->Parent->Report_Header->CCSEventResult = CCGetEvent($this->Parent->Report_Header->CCSEvents, "OnInitialize", $this->Parent->Report_Header);
            if ($this->Parent->Report_Header->Visible) 
                $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Report_Header->Height;
                $Group->SetTotalControls("GetNextValue");
            $this->Parent->Report_Header->CCSEventResult = CCGetEvent($this->Parent->Report_Header->CCSEvents, "OnCalculate", $this->Parent->Report_Header);
            $Group->SetControls();
            $Group->Mode = 1;
            $Group->GroupType = "Report";
            $this->Groups[] = & $Group;
            $this->OpenPage();
        }
    }

    function ClosePage() {
        $Group = & $this->InitGroup();
        $this->Parent->Page_Footer->CCSEventResult = CCGetEvent($this->Parent->Page_Footer->CCSEvents, "OnInitialize", $this->Parent->Page_Footer);
        $Group->SetTotalControls("GetPrevValue");
        $Group->SyncWithHeader($this->Groups[$this->mPageCurrentHeaderIndex]);
        $this->Parent->Page_Footer->CCSEventResult = CCGetEvent($this->Parent->Page_Footer->CCSEvents, "OnCalculate", $this->Parent->Page_Footer);
        $Group->SetControls();
        $this->RestoreValues();
        $this->CurrentPageSize = 0;
        $Group->Mode = 2;
        $Group->GroupType = "Page";
        $this->Groups[] = & $Group;
    }

    function CloseGroup($groupName)
    {
        $Group = "";
        if ($groupName == "Report") {
            $Group = & $this->InitGroup(true);
            $this->Parent->Report_Footer->CCSEventResult = CCGetEvent($this->Parent->Report_Footer->CCSEvents, "OnInitialize", $this->Parent->Report_Footer);
            if ($this->Parent->Page_Footer->Visible) 
                $OverSize = $this->Parent->Report_Footer->Height + $this->Parent->Page_Footer->Height;
            else
                $OverSize = $this->Parent->Report_Footer->Height;
            if (($this->PageSize > 0) and $this->Parent->Report_Footer->Visible and ($this->CurrentPageSize + $OverSize > $this->PageSize)) {
                $this->ClosePage();
                $this->OpenPage();
            }
            $Group->SetTotalControls("GetPrevValue");
            $Group->SyncWithHeader($this->Groups[0]);
            if ($this->Parent->Report_Footer->Visible)
                $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Report_Footer->Height;
            $this->Parent->Report_Footer->CCSEventResult = CCGetEvent($this->Parent->Report_Footer->CCSEvents, "OnCalculate", $this->Parent->Report_Footer);
            $Group->SetControls();
            $this->RestoreValues();
            $Group->Mode = 2;
            $Group->GroupType = "Report";
            $this->Groups[] = & $Group;
            $this->ClosePage();
            return;
        }
    }

    function AddItem()
    {
        $Group = & $this->InitGroup(true);
        $this->Parent->Detail->CCSEventResult = CCGetEvent($this->Parent->Detail->CCSEvents, "OnInitialize", $this->Parent->Detail);
        if ($this->Parent->Page_Footer->Visible) 
            $OverSize = $this->Parent->Detail->Height + $this->Parent->Page_Footer->Height;
        else
            $OverSize = $this->Parent->Detail->Height;
        if (($this->PageSize > 0) and $this->Parent->Detail->Visible and ($this->CurrentPageSize + $OverSize > $this->PageSize)) {
            $this->ClosePage();
            $this->OpenPage();
        }
        $this->TotalRows++;
        if ($this->LastDetailIndex)
            $PrevGroup = & $this->Groups[$this->LastDetailIndex];
        else
            $PrevGroup = "";
        $Group->SetTotalControls("", $PrevGroup);
        if ($this->Parent->Detail->Visible)
            $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Detail->Height;
        $this->Parent->Detail->CCSEventResult = CCGetEvent($this->Parent->Detail->CCSEvents, "OnCalculate", $this->Parent->Detail);
        $Group->SetControls($PrevGroup);
        $this->LastDetailIndex = count($this->Groups);
        $this->Groups[] = & $Group;
    }
}
//End Report9 GroupsCollection class

class clsReportReport9 { //Report9 Class @305-74F63A84

//Report9 Variables @305-944D286E

    public $ComponentType = "Report";
    public $PageSize;
    public $ComponentName;
    public $Visible;
    public $Errors;
    public $CCSEvents = array();
    public $CCSEventResult;
    public $RelativePath = "";
    public $ViewMode = "Web";
    public $TemplateBlock;
    public $PageNumber;
    public $RowNumber;
    public $TotalRows;
    public $TotalPages;
    public $ControlsVisible = array();
    public $IsEmpty;
    public $Attributes;
    public $DetailBlock, $Detail;
    public $Report_FooterBlock, $Report_Footer;
    public $Report_HeaderBlock, $Report_Header;
    public $Page_FooterBlock, $Page_Footer;
    public $Page_HeaderBlock, $Page_Header;
    public $SorterName, $SorterDirection;

    public $ds;
    public $DataSource;
    public $UseClientPaging = false;

    //Report Controls
    public $StaticControls, $RowControls, $Report_FooterControls, $Report_HeaderControls;
    public $Page_FooterControls, $Page_HeaderControls;
//End Report9 Variables

//Class_Initialize Event @305-04C8A406
    function clsReportReport9($RelativePath = "", & $Parent)
    {
        global $FileName;
        global $CCSLocales;
        global $DefaultDateFormat;
        $this->ComponentName = "Report9";
        $this->Visible = True;
        $this->Parent = & $Parent;
        $this->RelativePath = $RelativePath;
        $this->Attributes = new clsAttributes($this->ComponentName . ":");
        $this->Detail = new clsSection($this);
        $MinPageSize = 0;
        $MaxSectionSize = 0;
        $this->Detail->Height = 1;
        $MaxSectionSize = max($MaxSectionSize, $this->Detail->Height);
        $this->Report_Footer = new clsSection($this);
        $this->Report_Footer->Height = 1;
        $MaxSectionSize = max($MaxSectionSize, $this->Report_Footer->Height);
        $this->Report_Header = new clsSection($this);
        $this->Page_Footer = new clsSection($this);
        $this->Page_Header = new clsSection($this);
        $this->Page_Header->Height = 1;
        $MinPageSize += $this->Page_Header->Height;
        $this->Errors = new clsErrors();
        $this->DataSource = new clsReport9DataSource($this);
        $this->ds = & $this->DataSource;
        $PageSize = CCGetParam($this->ComponentName . "PageSize", "");
        if(is_numeric($PageSize) && $PageSize > 0) {
            $this->PageSize = $PageSize;
        } else {
            if (!is_numeric($PageSize) || $PageSize < 0)
                $this->PageSize = 40;
             else if ($PageSize == "0")
                $this->PageSize = 100;
             else 
                $this->PageSize = min(100, $PageSize);
        }
        $MinPageSize += $MaxSectionSize;
        if ($this->PageSize && $MinPageSize && $this->PageSize < $MinPageSize)
            $this->PageSize = $MinPageSize;
        $this->PageNumber = $this->ViewMode == "Print" ? 1 : intval(CCGetParam($this->ComponentName . "Page", 1));
        if ($this->PageNumber <= 0 ) {
            $this->PageNumber = 1;
        }

        $this->Age = new clsControl(ccsReportLabel, "Age", "Age", ccsInteger, "", "", $this);
        $this->COUNT_1 = new clsControl(ccsReportLabel, "COUNT_1", "COUNT_1", ccsInteger, "", "", $this);
        $this->COUNT_2 = new clsControl(ccsReportLabel, "COUNT_2", "COUNT_2", ccsFloat, "", "", $this);
        $this->COUNT_2->IsPercent = true;
        $this->NoRecords = new clsPanel("NoRecords", $this);
        $this->TotalSum_COUNT_1 = new clsControl(ccsReportLabel, "TotalSum_COUNT_1", "TotalSum_COUNT_1", ccsInteger, "", "", $this);
        $this->TotalSum_COUNT_1->TotalFunction = "Sum";
    }
//End Class_Initialize Event

//Initialize Method @305-6C59EE65
    function Initialize()
    {
        if(!$this->Visible) return;

        $this->DataSource->PageSize = $this->PageSize;
        $this->DataSource->AbsolutePage = $this->PageNumber;
        $this->DataSource->SetOrder($this->SorterName, $this->SorterDirection);
    }
//End Initialize Method

//CheckErrors Method @305-2962420E
    function CheckErrors()
    {
        $errors = false;
        $errors = ($errors || $this->Age->Errors->Count());
        $errors = ($errors || $this->COUNT_1->Errors->Count());
        $errors = ($errors || $this->COUNT_2->Errors->Count());
        $errors = ($errors || $this->TotalSum_COUNT_1->Errors->Count());
        $errors = ($errors || $this->Errors->Count());
        $errors = ($errors || $this->DataSource->Errors->Count());
        return $errors;
    }
//End CheckErrors Method

//GetErrors Method @305-A3F69076
    function GetErrors()
    {
        $errors = "";
        $errors = ComposeStrings($errors, $this->Age->Errors->ToString());
        $errors = ComposeStrings($errors, $this->COUNT_1->Errors->ToString());
        $errors = ComposeStrings($errors, $this->COUNT_2->Errors->ToString());
        $errors = ComposeStrings($errors, $this->TotalSum_COUNT_1->Errors->ToString());
        $errors = ComposeStrings($errors, $this->Errors->ToString());
        $errors = ComposeStrings($errors, $this->DataSource->Errors->ToString());
        return $errors;
    }
//End GetErrors Method

//Show Method @305-B45580BA
    function Show()
    {
        global $Tpl;
        global $CCSLocales;
        if(!$this->Visible) return;

        $ShownRecords = 0;

        $this->DataSource->Parameters["urls_PregRegDate"] = CCGetFromGet("s_PregRegDate", NULL);
        $this->DataSource->Parameters["urls_PregRegDateTo"] = CCGetFromGet("s_PregRegDateTo", NULL);
        $this->DataSource->Parameters["urls_FacilityName"] = CCGetFromGet("s_FacilityName", NULL);

        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeSelect", $this);


        $this->DataSource->Prepare();
        $this->DataSource->Open();

        $Groups = new clsGroupsCollectionReport9($this);
        $Groups->PageSize = $this->PageSize > 0 ? $this->PageSize : 0;

        $is_next_record = $this->DataSource->next_record();
        $this->IsEmpty = ! $is_next_record;
        while($is_next_record) {
            $this->DataSource->SetValues();
            $this->Age->SetValue($this->DataSource->Age->GetValue());
            $this->COUNT_1->SetValue($this->DataSource->COUNT_1->GetValue());
            $this->COUNT_2->SetValue($this->DataSource->COUNT_2->GetValue());
            $this->TotalSum_COUNT_1->SetValue($this->DataSource->TotalSum_COUNT_1->GetValue());
            if (count($Groups->Groups) == 0) $Groups->OpenGroup("Report");
            $Groups->AddItem();
            $is_next_record = $this->DataSource->next_record();
        }
        if (!count($Groups->Groups)) 
            $Groups->OpenGroup("Report");
        else
            $this->NoRecords->Visible = false;
        $Groups->CloseGroup("Report");
        $this->TotalPages = $Groups->TotalPages;
        $this->TotalRows = $Groups->TotalRows;

        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeShow", $this);
        if(!$this->Visible) return;

        $this->Attributes->Show();
        $ReportBlock = "Report " . $this->ComponentName;
        $ParentPath = $Tpl->block_path;
        $Tpl->block_path = $ParentPath . "/" . $ReportBlock;

        if($this->CheckErrors()) {
            $Tpl->replaceblock("", $this->GetErrors());
            $Tpl->block_path = $ParentPath;
            return;
        } else {
            $items = & $Groups->Groups;
            $i = $Groups->Pages[min($this->PageNumber, $Groups->TotalPages) - 1];
            $this->ControlsVisible["Age"] = $this->Age->Visible;
            $this->ControlsVisible["COUNT_1"] = $this->COUNT_1->Visible;
            $this->ControlsVisible["COUNT_2"] = $this->COUNT_2->Visible;
            do {
                $this->Attributes->RestoreFromArray($items[$i]->Attributes);
                $this->RowNumber = $items[$i]->RowNumber;
                switch ($items[$i]->GroupType) {
                    Case "":
                        $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Detail";
                        $this->Age->SetValue($items[$i]->Age);
                        $this->Age->Attributes->RestoreFromArray($items[$i]->_AgeAttributes);
                        $this->COUNT_1->SetValue($items[$i]->COUNT_1);
                        $this->COUNT_1->Attributes->RestoreFromArray($items[$i]->_COUNT_1Attributes);
                        $this->COUNT_2->SetValue($items[$items[$i]->ReportTotalIndex]->COUNT_2559Rel && strval($items[$i]->COUNT_2) != "" ? $items[$i]->COUNT_2 / $items[$items[$i]->ReportTotalIndex]->COUNT_2559Rel : "");
                        $this->COUNT_2->Attributes->RestoreFromArray($items[$i]->_COUNT_2Attributes);
                        $this->Detail->CCSEventResult = CCGetEvent($this->Detail->CCSEvents, "BeforeShow", $this->Detail);
                        $this->Attributes->Show();
                        $this->Age->Show();
                        $this->COUNT_1->Show();
                        $this->COUNT_2->Show();
                        $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                        if ($this->Detail->Visible)
                            $Tpl->parseto("Section Detail", true, "Section Detail");
                        break;
                    case "Report":
                        if ($items[$i]->Mode == 1) {
                            $this->Report_Header->CCSEventResult = CCGetEvent($this->Report_Header->CCSEvents, "BeforeShow", $this->Report_Header);
                            if ($this->Report_Header->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Report_Header";
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Report_Header", true, "Section Detail");
                            }
                        }
                        if ($items[$i]->Mode == 2) {
                            $this->TotalSum_COUNT_1->SetValue($items[$i]->TotalSum_COUNT_1);
                            $this->TotalSum_COUNT_1->Attributes->RestoreFromArray($items[$i]->_TotalSum_COUNT_1Attributes);
                            $this->Report_Footer->CCSEventResult = CCGetEvent($this->Report_Footer->CCSEvents, "BeforeShow", $this->Report_Footer);
                            if ($this->Report_Footer->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Report_Footer";
                                $this->NoRecords->Show();
                                $this->TotalSum_COUNT_1->Show();
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Report_Footer", true, "Section Detail");
                            }
                        }
                        break;
                    case "Page":
                        if ($items[$i]->Mode == 1) {
                            $this->Page_Header->CCSEventResult = CCGetEvent($this->Page_Header->CCSEvents, "BeforeShow", $this->Page_Header);
                            if ($this->Page_Header->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Page_Header";
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Page_Header", true, "Section Detail");
                            }
                        }
                        if ($items[$i]->Mode == 2 && !$this->UseClientPaging || $items[$i]->Mode == 1 && $this->UseClientPaging) {
                            $this->Page_Footer->CCSEventResult = CCGetEvent($this->Page_Footer->CCSEvents, "BeforeShow", $this->Page_Footer);
                            if ($this->Page_Footer->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Page_Footer";
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Page_Footer", true, "Section Detail");
                            }
                        }
                        break;
                }
                $i++;
            } while ($i < count($items) && ($this->ViewMode == "Print" ||  !($i > 1 && $items[$i]->GroupType == 'Page' && $items[$i]->Mode == 1)));
            $Tpl->block_path = $ParentPath;
            $Tpl->parse($ReportBlock);
            $this->DataSource->close();
        }

    }
//End Show Method

} //End Report9 Class @305-FCB6E20C

class clsReport9DataSource extends clsDBregistry_db {  //Report9DataSource Class @305-DDC25729

//DataSource Variables @305-799DA91F
    public $Parent = "";
    public $CCSEvents = "";
    public $CCSEventResult;
    public $ErrorBlock;
    public $CmdExecution;

    public $wp;


    // Datasource fields
    public $Age;
    public $COUNT_1;
    public $COUNT_2;
    public $TotalSum_COUNT_1;
//End DataSource Variables

//DataSourceClass_Initialize Event @305-F5F9BE35
    function clsReport9DataSource(& $Parent)
    {
        $this->Parent = & $Parent;
        $this->ErrorBlock = "Report Report9";
        $this->Initialize();
        $this->Age = new clsField("Age", ccsInteger, "");
        
        $this->COUNT_1 = new clsField("COUNT_1", ccsInteger, "");
        
        $this->COUNT_2 = new clsField("COUNT_2", ccsFloat, "");
        
        $this->TotalSum_COUNT_1 = new clsField("TotalSum_COUNT_1", ccsInteger, "");
        

    }
//End DataSourceClass_Initialize Event

//SetOrder Method @305-9E1383D1
    function SetOrder($SorterName, $SorterDirection)
    {
        $this->Order = "";
        $this->Order = CCGetOrder($this->Order, $SorterName, $SorterDirection, 
            "");
    }
//End SetOrder Method

//Prepare Method @305-081B9768
    function Prepare()
    {
        global $CCSLocales;
        global $DefaultDateFormat;
        $this->wp = new clsSQLParameters($this->ErrorBlock);
        $this->wp->AddParameter("1", "urls_PregRegDate", ccsDate, array("ShortDate"), array("yyyy", "-", "mm", "-", "dd", " ", "HH", ":", "nn", ":", "ss"), $this->Parameters["urls_PregRegDate"], CCFormatDate(CCParseDate("1000-01-01",array("yyyy","-","mm","-","dd")),array("ShortDate")), false);
        $this->wp->AddParameter("2", "urls_PregRegDateTo", ccsDate, array("ShortDate"), array("yyyy", "-", "mm", "-", "dd", " ", "HH", ":", "nn", ":", "ss"), $this->Parameters["urls_PregRegDateTo"], CCFormatDate(CCParseDate("2999-01-01",array("yyyy","-","mm","-","dd")),array("ShortDate")), false);
        $this->wp->AddParameter("3", "urls_FacilityName", ccsText, "", "", $this->Parameters["urls_FacilityName"], "", false);
    }
//End Prepare Method

//Open Method @305-3C039031
    function Open()
    {
        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeBuildSelect", $this->Parent);
        $this->SQL = "SELECT 0 AS Age, COUNT(*) FROM\n" .
        "(\n" .
        "	SELECT patient_PatientID, pregnancy_PregnancyID, nrTests\n" .
        "	FROM\n" .
        "	(\n" .
        "		SELECT patient.PatientID AS patient_PatientID, pregnancy.PregnancyID AS pregnancy_PregnancyID, COUNT(test.TestCodeID) AS nrTests\n" .
        "		FROM ((((pregnancy INNER JOIN patient ON pregnancy.PatientID = patient.PatientID) INNER JOIN visit ON\n" .
        "		visit.PregnancyID = pregnancy.PregnancyID) INNER JOIN test ON test.VisitID = visit.VisitID) LEFT JOIN delivery ON\n" .
        "		delivery.PregnancyID = pregnancy.PregnancyID) LEFT JOIN facilities ON\n" .
        "        pregnancy.FacilityID = facilities.FacilityID \n" .
        "		WHERE test.TestCodeID = 1 \n" .
        "		AND delivery.DataDelivery >= '" . $this->SQLValue($this->wp->GetDBValue("1"), ccsDate) . "'\n" .
        "		AND delivery.DataDelivery <= '" . $this->SQLValue($this->wp->GetDBValue("2"), ccsDate) . "'\n" .
        "		AND ((delivery.PregnancyOutcome1ID>0 AND delivery.PregnancyOutcome1ID<3)\n" .
        "		OR (delivery.PregnancyOutcome2ID>0 AND delivery.PregnancyOutcome2ID<3)\n" .
        "		OR (delivery.PregnancyOutcome3ID>0 AND delivery.PregnancyOutcome3ID<3))\n" .
        "		AND (DATEDIFF(test.TestDate, pregnancy.PregRegDate) / 7 + pregnancy.GestationAge) <= 30 \n" .
        "		AND DATEDIFF(test.TestDate, pregnancy.PregRegDate) > 0\n" .
        "		AND facilities.FacilityName LIKE '%" . $this->SQLValue($this->wp->GetDBValue("3"), ccsText) . "%'\n" .
        "\n" .
        "		GROUP BY pregnancy.PregnancyID\n" .
        "	) AS t1\n" .
        "WHERE nrTests > 1) AS t2\n" .
        "\n" .
        "UNION\n" .
        "\n" .
        "SELECT 1 AS Age,\n" .
        "(\n" .
        "	(\n" .
        "		SELECT COUNT(*) FROM \n" .
        "		(\n" .
        "			SELECT pregnancy.PregnancyID FROM (pregnancy LEFT JOIN delivery ON\n" .
        "			delivery.PregnancyID = pregnancy.PregnancyID) LEFT JOIN facilities ON\n" .
        "            pregnancy.FacilityID = facilities.FacilityID \n" .
        "			WHERE delivery.DataDelivery >= '" . $this->SQLValue($this->wp->GetDBValue("1"), ccsDate) . "'\n" .
        "			AND delivery.DataDelivery <= '" . $this->SQLValue($this->wp->GetDBValue("2"), ccsDate) . "'\n" .
        "			AND ((delivery.PregnancyOutcome1ID>0 AND delivery.PregnancyOutcome1ID<3)\n" .
        "			OR (delivery.PregnancyOutcome2ID>0 AND delivery.PregnancyOutcome2ID<3)\n" .
        "			OR (delivery.PregnancyOutcome3ID>0 AND delivery.PregnancyOutcome3ID<3))\n" .
        "			AND facilities.FacilityName LIKE '%" . $this->SQLValue($this->wp->GetDBValue("3"), ccsText) . "%'\n" .
        "\n" .
        "			GROUP BY pregnancy.PregnancyID\n" .
        "		) AS z\n" .
        "	) \n" .
        "	- 	(\n" .
        "		SELECT COUNT(*) \n" .
        "		FROM\n" .
        "		(\n" .
        "			SELECT patient.PatientID AS patient_PatientID, pregnancy.PregnancyID AS pregnancy_PregnancyID, COUNT(test.TestCodeID) AS nrTests\n" .
        "			FROM ((((pregnancy INNER JOIN patient ON pregnancy.PatientID = patient.PatientID) INNER JOIN visit ON\n" .
        "		visit.PregnancyID = pregnancy.PregnancyID) INNER JOIN test ON test.VisitID = visit.VisitID) LEFT JOIN delivery ON\n" .
        "		delivery.PregnancyID = pregnancy.PregnancyID) LEFT JOIN facilities ON\n" .
        "        pregnancy.FacilityID = facilities.FacilityID  \n" .
        "			WHERE test.TestCodeID = 1 \n" .
        "			AND delivery.DataDelivery >= '" . $this->SQLValue($this->wp->GetDBValue("1"), ccsDate) . "' \n" .
        "			AND delivery.DataDelivery <= '" . $this->SQLValue($this->wp->GetDBValue("2"), ccsDate) . "'\n" .
        "			AND ((delivery.PregnancyOutcome1ID>0 AND delivery.PregnancyOutcome1ID<3)\n" .
        "			OR (delivery.PregnancyOutcome2ID>0 AND delivery.PregnancyOutcome2ID<3)\n" .
        "			OR (delivery.PregnancyOutcome3ID>0 AND delivery.PregnancyOutcome3ID<3))\n" .
        "			AND (DATEDIFF(test.TestDate, pregnancy.PregRegDate) / 7 + pregnancy.GestationAge) <= 30 \n" .
        "			AND DATEDIFF(test.TestDate, pregnancy.PregRegDate) > 0\n" .
        "			AND facilities.FacilityName LIKE '%" . $this->SQLValue($this->wp->GetDBValue("3"), ccsText) . "%'\n" .
        "\n" .
        "			GROUP BY pregnancy.PregnancyID\n" .
        "		) AS t1\n" .
        "		WHERE nrTests > 1\n" .
        "	) \n" .
        ") AS t2";
        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeExecuteSelect", $this->Parent);
        $this->query(CCBuildSQL($this->SQL, $this->Where, $this->Order));
        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "AfterExecuteSelect", $this->Parent);
    }
//End Open Method

//SetValues Method @305-7F58FC3C
    function SetValues()
    {
        $this->Age->SetDBValue(trim($this->f("Age")));
        $this->COUNT_1->SetDBValue(trim($this->f("COUNT(*)")));
        $this->COUNT_2->SetDBValue(trim($this->f("COUNT(*)")));
        $this->TotalSum_COUNT_1->SetDBValue(trim($this->f("COUNT(*)")));
    }
//End SetValues Method

} //End Report9DataSource Class @305-FCB6E20C

//Report10 ReportGroup class @319-948307CE
class clsReportGroupReport10 {
    public $GroupType;
    public $mode; //1 - open, 2 - close
    public $Age, $_AgeAttributes;
    public $TotalPreg, $_TotalPregAttributes;
    public $Attributes;
    public $ReportTotalIndex = 0;
    public $PageTotalIndex;
    public $PageNumber;
    public $RowNumber;
    public $Parent;

    function clsReportGroupReport10(& $parent) {
        $this->Parent = & $parent;
        $this->Attributes = $this->Parent->Attributes->GetAsArray();
    }
    function SetControls($PrevGroup = "") {
        $this->Age = $this->Parent->Age->Value;
        $this->TotalPreg = $this->Parent->TotalPreg->Value;
    }

    function SetTotalControls($mode = "", $PrevGroup = "") {
        $this->_AgeAttributes = $this->Parent->Age->Attributes->GetAsArray();
        $this->_TotalPregAttributes = $this->Parent->TotalPreg->Attributes->GetAsArray();
    }
    function SyncWithHeader(& $Header) {
        $this->Age = $Header->Age;
        $Header->_AgeAttributes = $this->_AgeAttributes;
        $this->Parent->Age->Value = $Header->Age;
        $this->Parent->Age->Attributes->RestoreFromArray($Header->_AgeAttributes);
        $this->TotalPreg = $Header->TotalPreg;
        $Header->_TotalPregAttributes = $this->_TotalPregAttributes;
        $this->Parent->TotalPreg->Value = $Header->TotalPreg;
        $this->Parent->TotalPreg->Attributes->RestoreFromArray($Header->_TotalPregAttributes);
    }
    function ChangeTotalControls() {
    }
}
//End Report10 ReportGroup class

//Report10 GroupsCollection class @319-7BD1B79A
class clsGroupsCollectionReport10 {
    public $Groups;
    public $mPageCurrentHeaderIndex;
    public $PageSize;
    public $TotalPages = 0;
    public $TotalRows = 0;
    public $CurrentPageSize = 0;
    public $Pages;
    public $Parent;
    public $LastDetailIndex;

    function clsGroupsCollectionReport10(& $parent) {
        $this->Parent = & $parent;
        $this->Groups = array();
        $this->Pages  = array();
        $this->mReportTotalIndex = 0;
        $this->mPageTotalIndex = 1;
    }

    function & InitGroup() {
        $group = new clsReportGroupReport10($this->Parent);
        $group->RowNumber = $this->TotalRows + 1;
        $group->PageNumber = $this->TotalPages;
        $group->PageTotalIndex = $this->mPageCurrentHeaderIndex;
        return $group;
    }

    function RestoreValues() {
        $this->Parent->Age->Value = $this->Parent->Age->initialValue;
        $this->Parent->TotalPreg->Value = $this->Parent->TotalPreg->initialValue;
    }

    function OpenPage() {
        $this->TotalPages++;
        $Group = & $this->InitGroup();
        $this->Parent->Page_Header->CCSEventResult = CCGetEvent($this->Parent->Page_Header->CCSEvents, "OnInitialize", $this->Parent->Page_Header);
        if ($this->Parent->Page_Header->Visible)
            $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Page_Header->Height;
        $Group->SetTotalControls("GetNextValue");
        $this->Parent->Page_Header->CCSEventResult = CCGetEvent($this->Parent->Page_Header->CCSEvents, "OnCalculate", $this->Parent->Page_Header);
        $Group->SetControls();
        $Group->Mode = 1;
        $Group->GroupType = "Page";
        $Group->PageTotalIndex = count($this->Groups);
        $this->mPageCurrentHeaderIndex = count($this->Groups);
        $this->Groups[] =  & $Group;
        $this->Pages[] =  count($this->Groups) == 2 ? 0 : count($this->Groups) - 1;
    }

    function OpenGroup($groupName) {
        $Group = "";
        $OpenFlag = false;
        if ($groupName == "Report") {
            $Group = & $this->InitGroup(true);
            $this->Parent->Report_Header->CCSEventResult = CCGetEvent($this->Parent->Report_Header->CCSEvents, "OnInitialize", $this->Parent->Report_Header);
            if ($this->Parent->Report_Header->Visible) 
                $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Report_Header->Height;
                $Group->SetTotalControls("GetNextValue");
            $this->Parent->Report_Header->CCSEventResult = CCGetEvent($this->Parent->Report_Header->CCSEvents, "OnCalculate", $this->Parent->Report_Header);
            $Group->SetControls();
            $Group->Mode = 1;
            $Group->GroupType = "Report";
            $this->Groups[] = & $Group;
            $this->OpenPage();
        }
    }

    function ClosePage() {
        $Group = & $this->InitGroup();
        $this->Parent->Page_Footer->CCSEventResult = CCGetEvent($this->Parent->Page_Footer->CCSEvents, "OnInitialize", $this->Parent->Page_Footer);
        $Group->SetTotalControls("GetPrevValue");
        $Group->SyncWithHeader($this->Groups[$this->mPageCurrentHeaderIndex]);
        $this->Parent->Page_Footer->CCSEventResult = CCGetEvent($this->Parent->Page_Footer->CCSEvents, "OnCalculate", $this->Parent->Page_Footer);
        $Group->SetControls();
        $this->RestoreValues();
        $this->CurrentPageSize = 0;
        $Group->Mode = 2;
        $Group->GroupType = "Page";
        $this->Groups[] = & $Group;
    }

    function CloseGroup($groupName)
    {
        $Group = "";
        if ($groupName == "Report") {
            $Group = & $this->InitGroup(true);
            $this->Parent->Report_Footer->CCSEventResult = CCGetEvent($this->Parent->Report_Footer->CCSEvents, "OnInitialize", $this->Parent->Report_Footer);
            if ($this->Parent->Page_Footer->Visible) 
                $OverSize = $this->Parent->Report_Footer->Height + $this->Parent->Page_Footer->Height;
            else
                $OverSize = $this->Parent->Report_Footer->Height;
            if (($this->PageSize > 0) and $this->Parent->Report_Footer->Visible and ($this->CurrentPageSize + $OverSize > $this->PageSize)) {
                $this->ClosePage();
                $this->OpenPage();
            }
            $Group->SetTotalControls("GetPrevValue");
            $Group->SyncWithHeader($this->Groups[0]);
            if ($this->Parent->Report_Footer->Visible)
                $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Report_Footer->Height;
            $this->Parent->Report_Footer->CCSEventResult = CCGetEvent($this->Parent->Report_Footer->CCSEvents, "OnCalculate", $this->Parent->Report_Footer);
            $Group->SetControls();
            $this->RestoreValues();
            $Group->Mode = 2;
            $Group->GroupType = "Report";
            $this->Groups[] = & $Group;
            $this->ClosePage();
            return;
        }
    }

    function AddItem()
    {
        $Group = & $this->InitGroup(true);
        $this->Parent->Detail->CCSEventResult = CCGetEvent($this->Parent->Detail->CCSEvents, "OnInitialize", $this->Parent->Detail);
        if ($this->Parent->Page_Footer->Visible) 
            $OverSize = $this->Parent->Detail->Height + $this->Parent->Page_Footer->Height;
        else
            $OverSize = $this->Parent->Detail->Height;
        if (($this->PageSize > 0) and $this->Parent->Detail->Visible and ($this->CurrentPageSize + $OverSize > $this->PageSize)) {
            $this->ClosePage();
            $this->OpenPage();
        }
        $this->TotalRows++;
        if ($this->LastDetailIndex)
            $PrevGroup = & $this->Groups[$this->LastDetailIndex];
        else
            $PrevGroup = "";
        $Group->SetTotalControls("", $PrevGroup);
        if ($this->Parent->Detail->Visible)
            $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Detail->Height;
        $this->Parent->Detail->CCSEventResult = CCGetEvent($this->Parent->Detail->CCSEvents, "OnCalculate", $this->Parent->Detail);
        $Group->SetControls($PrevGroup);
        $this->LastDetailIndex = count($this->Groups);
        $this->Groups[] = & $Group;
    }
}
//End Report10 GroupsCollection class

class clsReportReport10 { //Report10 Class @319-E2EA314C

//Report10 Variables @319-944D286E

    public $ComponentType = "Report";
    public $PageSize;
    public $ComponentName;
    public $Visible;
    public $Errors;
    public $CCSEvents = array();
    public $CCSEventResult;
    public $RelativePath = "";
    public $ViewMode = "Web";
    public $TemplateBlock;
    public $PageNumber;
    public $RowNumber;
    public $TotalRows;
    public $TotalPages;
    public $ControlsVisible = array();
    public $IsEmpty;
    public $Attributes;
    public $DetailBlock, $Detail;
    public $Report_FooterBlock, $Report_Footer;
    public $Report_HeaderBlock, $Report_Header;
    public $Page_FooterBlock, $Page_Footer;
    public $Page_HeaderBlock, $Page_Header;
    public $SorterName, $SorterDirection;

    public $ds;
    public $DataSource;
    public $UseClientPaging = false;

    //Report Controls
    public $StaticControls, $RowControls, $Report_FooterControls, $Report_HeaderControls;
    public $Page_FooterControls, $Page_HeaderControls;
//End Report10 Variables

//Class_Initialize Event @319-5A2E3560
    function clsReportReport10($RelativePath = "", & $Parent)
    {
        global $FileName;
        global $CCSLocales;
        global $DefaultDateFormat;
        $this->ComponentName = "Report10";
        $this->Visible = True;
        $this->Parent = & $Parent;
        $this->RelativePath = $RelativePath;
        $this->Attributes = new clsAttributes($this->ComponentName . ":");
        $this->Detail = new clsSection($this);
        $MinPageSize = 0;
        $MaxSectionSize = 0;
        $this->Detail->Height = 1;
        $MaxSectionSize = max($MaxSectionSize, $this->Detail->Height);
        $this->Report_Footer = new clsSection($this);
        $this->Report_Footer->Height = 1;
        $MaxSectionSize = max($MaxSectionSize, $this->Report_Footer->Height);
        $this->Report_Header = new clsSection($this);
        $this->Page_Footer = new clsSection($this);
        $this->Page_Header = new clsSection($this);
        $this->Page_Header->Height = 1;
        $MinPageSize += $this->Page_Header->Height;
        $this->Errors = new clsErrors();
        $this->DataSource = new clsReport10DataSource($this);
        $this->ds = & $this->DataSource;
        $PageSize = CCGetParam($this->ComponentName . "PageSize", "");
        if(is_numeric($PageSize) && $PageSize > 0) {
            $this->PageSize = $PageSize;
        } else {
            if (!is_numeric($PageSize) || $PageSize < 0)
                $this->PageSize = 40;
             else if ($PageSize == "0")
                $this->PageSize = 100;
             else 
                $this->PageSize = min(100, $PageSize);
        }
        $MinPageSize += $MaxSectionSize;
        if ($this->PageSize && $MinPageSize && $this->PageSize < $MinPageSize)
            $this->PageSize = $MinPageSize;
        $this->PageNumber = $this->ViewMode == "Print" ? 1 : intval(CCGetParam($this->ComponentName . "Page", 1));
        if ($this->PageNumber <= 0 ) {
            $this->PageNumber = 1;
        }

        $this->Age = new clsControl(ccsReportLabel, "Age", "Age", ccsInteger, "", "", $this);
        $this->TotalPreg = new clsControl(ccsReportLabel, "TotalPreg", "TotalPreg", ccsInteger, "", "", $this);
        $this->NoRecords = new clsPanel("NoRecords", $this);
    }
//End Class_Initialize Event

//Initialize Method @319-6C59EE65
    function Initialize()
    {
        if(!$this->Visible) return;

        $this->DataSource->PageSize = $this->PageSize;
        $this->DataSource->AbsolutePage = $this->PageNumber;
        $this->DataSource->SetOrder($this->SorterName, $this->SorterDirection);
    }
//End Initialize Method

//CheckErrors Method @319-96B8D5E5
    function CheckErrors()
    {
        $errors = false;
        $errors = ($errors || $this->Age->Errors->Count());
        $errors = ($errors || $this->TotalPreg->Errors->Count());
        $errors = ($errors || $this->Errors->Count());
        $errors = ($errors || $this->DataSource->Errors->Count());
        return $errors;
    }
//End CheckErrors Method

//GetErrors Method @319-A2EA616C
    function GetErrors()
    {
        $errors = "";
        $errors = ComposeStrings($errors, $this->Age->Errors->ToString());
        $errors = ComposeStrings($errors, $this->TotalPreg->Errors->ToString());
        $errors = ComposeStrings($errors, $this->Errors->ToString());
        $errors = ComposeStrings($errors, $this->DataSource->Errors->ToString());
        return $errors;
    }
//End GetErrors Method

//Show Method @319-E49F2490
    function Show()
    {
        global $Tpl;
        global $CCSLocales;
        if(!$this->Visible) return;

        $ShownRecords = 0;

        $this->DataSource->Parameters["urls_PregRegDate"] = CCGetFromGet("s_PregRegDate", NULL);
        $this->DataSource->Parameters["urls_PregRegDateTo"] = CCGetFromGet("s_PregRegDateTo", NULL);
        $this->DataSource->Parameters["urls_FacilityName"] = CCGetFromGet("s_FacilityName", NULL);

        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeSelect", $this);


        $this->DataSource->Prepare();
        $this->DataSource->Open();

        $Groups = new clsGroupsCollectionReport10($this);
        $Groups->PageSize = $this->PageSize > 0 ? $this->PageSize : 0;

        $is_next_record = $this->DataSource->next_record();
        $this->IsEmpty = ! $is_next_record;
        while($is_next_record) {
            $this->DataSource->SetValues();
            $this->Age->SetValue($this->DataSource->Age->GetValue());
            $this->TotalPreg->SetValue($this->DataSource->TotalPreg->GetValue());
            if (count($Groups->Groups) == 0) $Groups->OpenGroup("Report");
            $Groups->AddItem();
            $is_next_record = $this->DataSource->next_record();
        }
        if (!count($Groups->Groups)) 
            $Groups->OpenGroup("Report");
        else
            $this->NoRecords->Visible = false;
        $Groups->CloseGroup("Report");
        $this->TotalPages = $Groups->TotalPages;
        $this->TotalRows = $Groups->TotalRows;

        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeShow", $this);
        if(!$this->Visible) return;

        $this->Attributes->Show();
        $ReportBlock = "Report " . $this->ComponentName;
        $ParentPath = $Tpl->block_path;
        $Tpl->block_path = $ParentPath . "/" . $ReportBlock;

        if($this->CheckErrors()) {
            $Tpl->replaceblock("", $this->GetErrors());
            $Tpl->block_path = $ParentPath;
            return;
        } else {
            $items = & $Groups->Groups;
            $i = $Groups->Pages[min($this->PageNumber, $Groups->TotalPages) - 1];
            $this->ControlsVisible["Age"] = $this->Age->Visible;
            $this->ControlsVisible["TotalPreg"] = $this->TotalPreg->Visible;
            do {
                $this->Attributes->RestoreFromArray($items[$i]->Attributes);
                $this->RowNumber = $items[$i]->RowNumber;
                switch ($items[$i]->GroupType) {
                    Case "":
                        $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Detail";
                        $this->Age->SetValue($items[$i]->Age);
                        $this->Age->Attributes->RestoreFromArray($items[$i]->_AgeAttributes);
                        $this->TotalPreg->SetValue($items[$i]->TotalPreg);
                        $this->TotalPreg->Attributes->RestoreFromArray($items[$i]->_TotalPregAttributes);
                        $this->Detail->CCSEventResult = CCGetEvent($this->Detail->CCSEvents, "BeforeShow", $this->Detail);
                        $this->Attributes->Show();
                        $this->Age->Show();
                        $this->TotalPreg->Show();
                        $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                        if ($this->Detail->Visible)
                            $Tpl->parseto("Section Detail", true, "Section Detail");
                        break;
                    case "Report":
                        if ($items[$i]->Mode == 1) {
                            $this->Report_Header->CCSEventResult = CCGetEvent($this->Report_Header->CCSEvents, "BeforeShow", $this->Report_Header);
                            if ($this->Report_Header->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Report_Header";
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Report_Header", true, "Section Detail");
                            }
                        }
                        if ($items[$i]->Mode == 2) {
                            $this->Report_Footer->CCSEventResult = CCGetEvent($this->Report_Footer->CCSEvents, "BeforeShow", $this->Report_Footer);
                            if ($this->Report_Footer->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Report_Footer";
                                $this->NoRecords->Show();
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Report_Footer", true, "Section Detail");
                            }
                        }
                        break;
                    case "Page":
                        if ($items[$i]->Mode == 1) {
                            $this->Page_Header->CCSEventResult = CCGetEvent($this->Page_Header->CCSEvents, "BeforeShow", $this->Page_Header);
                            if ($this->Page_Header->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Page_Header";
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Page_Header", true, "Section Detail");
                            }
                        }
                        if ($items[$i]->Mode == 2 && !$this->UseClientPaging || $items[$i]->Mode == 1 && $this->UseClientPaging) {
                            $this->Page_Footer->CCSEventResult = CCGetEvent($this->Page_Footer->CCSEvents, "BeforeShow", $this->Page_Footer);
                            if ($this->Page_Footer->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Page_Footer";
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Page_Footer", true, "Section Detail");
                            }
                        }
                        break;
                }
                $i++;
            } while ($i < count($items) && ($this->ViewMode == "Print" ||  !($i > 1 && $items[$i]->GroupType == 'Page' && $items[$i]->Mode == 1)));
            $Tpl->block_path = $ParentPath;
            $Tpl->parse($ReportBlock);
            $this->DataSource->close();
        }

    }
//End Show Method

} //End Report10 Class @319-FCB6E20C

class clsReport10DataSource extends clsDBregistry_db {  //Report10DataSource Class @319-F7F77921

//DataSource Variables @319-E5727677
    public $Parent = "";
    public $CCSEvents = "";
    public $CCSEventResult;
    public $ErrorBlock;
    public $CmdExecution;

    public $wp;


    // Datasource fields
    public $Age;
    public $TotalPreg;
//End DataSource Variables

//DataSourceClass_Initialize Event @319-AE11F443
    function clsReport10DataSource(& $Parent)
    {
        $this->Parent = & $Parent;
        $this->ErrorBlock = "Report Report10";
        $this->Initialize();
        $this->Age = new clsField("Age", ccsInteger, "");
        
        $this->TotalPreg = new clsField("TotalPreg", ccsInteger, "");
        

    }
//End DataSourceClass_Initialize Event

//SetOrder Method @319-9E1383D1
    function SetOrder($SorterName, $SorterDirection)
    {
        $this->Order = "";
        $this->Order = CCGetOrder($this->Order, $SorterName, $SorterDirection, 
            "");
    }
//End SetOrder Method

//Prepare Method @319-081B9768
    function Prepare()
    {
        global $CCSLocales;
        global $DefaultDateFormat;
        $this->wp = new clsSQLParameters($this->ErrorBlock);
        $this->wp->AddParameter("1", "urls_PregRegDate", ccsDate, array("ShortDate"), array("yyyy", "-", "mm", "-", "dd", " ", "HH", ":", "nn", ":", "ss"), $this->Parameters["urls_PregRegDate"], CCFormatDate(CCParseDate("1000-01-01",array("yyyy","-","mm","-","dd")),array("ShortDate")), false);
        $this->wp->AddParameter("2", "urls_PregRegDateTo", ccsDate, array("ShortDate"), array("yyyy", "-", "mm", "-", "dd", " ", "HH", ":", "nn", ":", "ss"), $this->Parameters["urls_PregRegDateTo"], CCFormatDate(CCParseDate("2999-01-01",array("yyyy","-","mm","-","dd")),array("ShortDate")), false);
        $this->wp->AddParameter("3", "urls_FacilityName", ccsText, "", "", $this->Parameters["urls_FacilityName"], "", false);
    }
//End Prepare Method

//Open Method @319-91A49434
    function Open()
    {
        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeBuildSelect", $this->Parent);
        $this->SQL = "SELECT 0 AS Age, (\n" .
        "SELECT COUNT(*) FROM\n" .
        "(\n" .
        "\n" .
        "SELECT DeliveryID, 'O1' AS O\n" .
        "FROM (delivery INNER JOIN pregnancy_outcome ON delivery.PregnancyOutcome1ID = pregnancy_outcome.PregnancyOutcomeID) LEFT JOIN facilities ON\n" .
        "delivery.FacilityID = facilities.FacilityID\n" .
        "WHERE delivery.PregnancyOutcome1ID = 3 AND delivery.GestationAge <=22 AND delivery.DataDelivery >= '" . $this->SQLValue($this->wp->GetDBValue("1"), ccsDate) . "'\n" .
        "AND delivery.DataDelivery <= '" . $this->SQLValue($this->wp->GetDBValue("2"), ccsDate) . "'\n" .
        "AND facilities.FacilityName LIKE '%" . $this->SQLValue($this->wp->GetDBValue("3"), ccsText) . "%' \n" .
        "\n" .
        "UNION\n" .
        "\n" .
        "SELECT DeliveryID, 'O2' AS O\n" .
        "FROM (delivery INNER JOIN pregnancy_outcome ON delivery.PregnancyOutcome2ID = pregnancy_outcome.PregnancyOutcomeID) LEFT JOIN facilities ON\n" .
        "        delivery.FacilityID = facilities.FacilityID\n" .
        "WHERE delivery.PregnancyOutcome2ID = 3 AND delivery.GestationAge <=22 AND delivery.DataDelivery >= '" . $this->SQLValue($this->wp->GetDBValue("1"), ccsDate) . "'\n" .
        "AND delivery.DataDelivery <= '" . $this->SQLValue($this->wp->GetDBValue("2"), ccsDate) . "'\n" .
        "AND facilities.FacilityName LIKE '%" . $this->SQLValue($this->wp->GetDBValue("3"), ccsText) . "%' \n" .
        "\n" .
        "UNION\n" .
        "\n" .
        "SELECT DeliveryID, 'O3' AS O\n" .
        "FROM (delivery INNER JOIN pregnancy_outcome ON delivery.PregnancyOutcome3ID = pregnancy_outcome.PregnancyOutcomeID) LEFT JOIN facilities ON\n" .
        "        delivery.FacilityID = facilities.FacilityID\n" .
        "WHERE delivery.PregnancyOutcome3ID = 3 AND delivery.GestationAge <=22 AND delivery.DataDelivery >= '" . $this->SQLValue($this->wp->GetDBValue("1"), ccsDate) . "'\n" .
        "AND delivery.DataDelivery <= '" . $this->SQLValue($this->wp->GetDBValue("2"), ccsDate) . "'\n" .
        "AND facilities.FacilityName LIKE '%" . $this->SQLValue($this->wp->GetDBValue("3"), ccsText) . "%' \n" .
        "\n" .
        ") AS TotalPregI) AS TotalPreg\n" .
        "\n" .
        "\n" .
        "\n" .
        "";
        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeExecuteSelect", $this->Parent);
        $this->query(CCBuildSQL($this->SQL, $this->Where, $this->Order));
        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "AfterExecuteSelect", $this->Parent);
    }
//End Open Method

//SetValues Method @319-138C645B
    function SetValues()
    {
        $this->Age->SetDBValue(trim($this->f("Age")));
        $this->TotalPreg->SetDBValue(trim($this->f("TotalPreg")));
    }
//End SetValues Method

} //End Report10DataSource Class @319-FCB6E20C

//Report11 ReportGroup class @333-667EAFFE
class clsReportGroupReport11 {
    public $GroupType;
    public $mode; //1 - open, 2 - close
    public $Age, $_AgeAttributes;
    public $TotalPreg, $_TotalPregAttributes;
    public $TotalPreg1, $TotalPreg1345Rel, $_TotalPreg1Attributes;
    public $TotalSum_TotalPreg, $_TotalSum_TotalPregAttributes;
    public $Attributes;
    public $ReportTotalIndex = 0;
    public $PageTotalIndex;
    public $PageNumber;
    public $RowNumber;
    public $Parent;

    function clsReportGroupReport11(& $parent) {
        $this->Parent = & $parent;
        $this->Attributes = $this->Parent->Attributes->GetAsArray();
    }
    function SetControls($PrevGroup = "") {
        $this->Age = $this->Parent->Age->Value;
        $this->TotalPreg = $this->Parent->TotalPreg->Value;
        $this->TotalPreg1 = $this->Parent->TotalPreg1->Value;
    }

    function SetTotalControls($mode = "", $PrevGroup = "") {
        $this->TotalSum_TotalPreg = $this->Parent->TotalSum_TotalPreg->GetTotalValue($mode);
        $this->Parent->TotalPreg1->GetTotalValue($mode);
        $this->TotalPreg1345Rel = $this->Parent->TotalPreg1->ValueRelative;
        $this->_AgeAttributes = $this->Parent->Age->Attributes->GetAsArray();
        $this->_TotalPregAttributes = $this->Parent->TotalPreg->Attributes->GetAsArray();
        $this->_TotalPreg1Attributes = $this->Parent->TotalPreg1->Attributes->GetAsArray();
        $this->_TotalSum_TotalPregAttributes = $this->Parent->TotalSum_TotalPreg->Attributes->GetAsArray();
    }
    function SyncWithHeader(& $Header) {
        $Header->TotalSum_TotalPreg = $this->TotalSum_TotalPreg;
        $Header->_TotalSum_TotalPregAttributes = $this->_TotalSum_TotalPregAttributes;
        $this->Age = $Header->Age;
        $Header->_AgeAttributes = $this->_AgeAttributes;
        $this->Parent->Age->Value = $Header->Age;
        $this->Parent->Age->Attributes->RestoreFromArray($Header->_AgeAttributes);
        $this->TotalPreg = $Header->TotalPreg;
        $Header->_TotalPregAttributes = $this->_TotalPregAttributes;
        $this->Parent->TotalPreg->Value = $Header->TotalPreg;
        $this->Parent->TotalPreg->Attributes->RestoreFromArray($Header->_TotalPregAttributes);
        $this->TotalPreg1 = $Header->TotalPreg1;
        $Header->_TotalPreg1Attributes = $this->_TotalPreg1Attributes;
        $this->Parent->TotalPreg1->Value = $Header->TotalPreg1;
        $this->Parent->TotalPreg1->Attributes->RestoreFromArray($Header->_TotalPreg1Attributes);
        $Header->TotalPreg1345Rel = $this->TotalPreg1345Rel;
    }
    function ChangeTotalControls() {
        $this->TotalPreg1 = $this->Parent->TotalPreg1->GetValue();
        $this->TotalSum_TotalPreg = $this->Parent->TotalSum_TotalPreg->GetValue();
    }
}
//End Report11 ReportGroup class

//Report11 GroupsCollection class @333-C3C89EE1
class clsGroupsCollectionReport11 {
    public $Groups;
    public $mPageCurrentHeaderIndex;
    public $PageSize;
    public $TotalPages = 0;
    public $TotalRows = 0;
    public $CurrentPageSize = 0;
    public $Pages;
    public $Parent;
    public $LastDetailIndex;

    function clsGroupsCollectionReport11(& $parent) {
        $this->Parent = & $parent;
        $this->Groups = array();
        $this->Pages  = array();
        $this->mReportTotalIndex = 0;
        $this->mPageTotalIndex = 1;
    }

    function & InitGroup() {
        $group = new clsReportGroupReport11($this->Parent);
        $group->RowNumber = $this->TotalRows + 1;
        $group->PageNumber = $this->TotalPages;
        $group->PageTotalIndex = $this->mPageCurrentHeaderIndex;
        return $group;
    }

    function RestoreValues() {
        $this->Parent->Age->Value = $this->Parent->Age->initialValue;
        $this->Parent->TotalPreg->Value = $this->Parent->TotalPreg->initialValue;
        $this->Parent->TotalPreg1->Value = $this->Parent->TotalPreg1->initialValue;
        $this->Parent->TotalSum_TotalPreg->Value = $this->Parent->TotalSum_TotalPreg->initialValue;
    }

    function OpenPage() {
        $this->TotalPages++;
        $Group = & $this->InitGroup();
        $this->Parent->Page_Header->CCSEventResult = CCGetEvent($this->Parent->Page_Header->CCSEvents, "OnInitialize", $this->Parent->Page_Header);
        if ($this->Parent->Page_Header->Visible)
            $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Page_Header->Height;
        $Group->SetTotalControls("GetNextValue");
        $this->Parent->Page_Header->CCSEventResult = CCGetEvent($this->Parent->Page_Header->CCSEvents, "OnCalculate", $this->Parent->Page_Header);
        $Group->SetControls();
        $Group->Mode = 1;
        $Group->GroupType = "Page";
        $Group->PageTotalIndex = count($this->Groups);
        $this->mPageCurrentHeaderIndex = count($this->Groups);
        $this->Groups[] =  & $Group;
        $this->Pages[] =  count($this->Groups) == 2 ? 0 : count($this->Groups) - 1;
    }

    function OpenGroup($groupName) {
        $Group = "";
        $OpenFlag = false;
        if ($groupName == "Report") {
            $Group = & $this->InitGroup(true);
            $this->Parent->Report_Header->CCSEventResult = CCGetEvent($this->Parent->Report_Header->CCSEvents, "OnInitialize", $this->Parent->Report_Header);
            if ($this->Parent->Report_Header->Visible) 
                $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Report_Header->Height;
                $Group->SetTotalControls("GetNextValue");
            $this->Parent->Report_Header->CCSEventResult = CCGetEvent($this->Parent->Report_Header->CCSEvents, "OnCalculate", $this->Parent->Report_Header);
            $Group->SetControls();
            $Group->Mode = 1;
            $Group->GroupType = "Report";
            $this->Groups[] = & $Group;
            $this->OpenPage();
        }
    }

    function ClosePage() {
        $Group = & $this->InitGroup();
        $this->Parent->Page_Footer->CCSEventResult = CCGetEvent($this->Parent->Page_Footer->CCSEvents, "OnInitialize", $this->Parent->Page_Footer);
        $Group->SetTotalControls("GetPrevValue");
        $Group->SyncWithHeader($this->Groups[$this->mPageCurrentHeaderIndex]);
        $this->Parent->Page_Footer->CCSEventResult = CCGetEvent($this->Parent->Page_Footer->CCSEvents, "OnCalculate", $this->Parent->Page_Footer);
        $Group->SetControls();
        $this->RestoreValues();
        $this->CurrentPageSize = 0;
        $Group->Mode = 2;
        $Group->GroupType = "Page";
        $this->Groups[] = & $Group;
    }

    function CloseGroup($groupName)
    {
        $Group = "";
        if ($groupName == "Report") {
            $Group = & $this->InitGroup(true);
            $this->Parent->Report_Footer->CCSEventResult = CCGetEvent($this->Parent->Report_Footer->CCSEvents, "OnInitialize", $this->Parent->Report_Footer);
            if ($this->Parent->Page_Footer->Visible) 
                $OverSize = $this->Parent->Report_Footer->Height + $this->Parent->Page_Footer->Height;
            else
                $OverSize = $this->Parent->Report_Footer->Height;
            if (($this->PageSize > 0) and $this->Parent->Report_Footer->Visible and ($this->CurrentPageSize + $OverSize > $this->PageSize)) {
                $this->ClosePage();
                $this->OpenPage();
            }
            $Group->SetTotalControls("GetPrevValue");
            $Group->SyncWithHeader($this->Groups[0]);
            if ($this->Parent->Report_Footer->Visible)
                $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Report_Footer->Height;
            $this->Parent->Report_Footer->CCSEventResult = CCGetEvent($this->Parent->Report_Footer->CCSEvents, "OnCalculate", $this->Parent->Report_Footer);
            $Group->SetControls();
            $this->RestoreValues();
            $Group->Mode = 2;
            $Group->GroupType = "Report";
            $this->Groups[] = & $Group;
            $this->ClosePage();
            return;
        }
    }

    function AddItem()
    {
        $Group = & $this->InitGroup(true);
        $this->Parent->Detail->CCSEventResult = CCGetEvent($this->Parent->Detail->CCSEvents, "OnInitialize", $this->Parent->Detail);
        if ($this->Parent->Page_Footer->Visible) 
            $OverSize = $this->Parent->Detail->Height + $this->Parent->Page_Footer->Height;
        else
            $OverSize = $this->Parent->Detail->Height;
        if (($this->PageSize > 0) and $this->Parent->Detail->Visible and ($this->CurrentPageSize + $OverSize > $this->PageSize)) {
            $this->ClosePage();
            $this->OpenPage();
        }
        $this->TotalRows++;
        if ($this->LastDetailIndex)
            $PrevGroup = & $this->Groups[$this->LastDetailIndex];
        else
            $PrevGroup = "";
        $Group->SetTotalControls("", $PrevGroup);
        if ($this->Parent->Detail->Visible)
            $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Detail->Height;
        $this->Parent->Detail->CCSEventResult = CCGetEvent($this->Parent->Detail->CCSEvents, "OnCalculate", $this->Parent->Detail);
        $Group->SetControls($PrevGroup);
        $this->LastDetailIndex = count($this->Groups);
        $this->Groups[] = & $Group;
    }
}
//End Report11 GroupsCollection class

class clsReportReport11 { //Report11 Class @333-FBF1000D

//Report11 Variables @333-944D286E

    public $ComponentType = "Report";
    public $PageSize;
    public $ComponentName;
    public $Visible;
    public $Errors;
    public $CCSEvents = array();
    public $CCSEventResult;
    public $RelativePath = "";
    public $ViewMode = "Web";
    public $TemplateBlock;
    public $PageNumber;
    public $RowNumber;
    public $TotalRows;
    public $TotalPages;
    public $ControlsVisible = array();
    public $IsEmpty;
    public $Attributes;
    public $DetailBlock, $Detail;
    public $Report_FooterBlock, $Report_Footer;
    public $Report_HeaderBlock, $Report_Header;
    public $Page_FooterBlock, $Page_Footer;
    public $Page_HeaderBlock, $Page_Header;
    public $SorterName, $SorterDirection;

    public $ds;
    public $DataSource;
    public $UseClientPaging = false;

    //Report Controls
    public $StaticControls, $RowControls, $Report_FooterControls, $Report_HeaderControls;
    public $Page_FooterControls, $Page_HeaderControls;
//End Report11 Variables

//Class_Initialize Event @333-85C70E73
    function clsReportReport11($RelativePath = "", & $Parent)
    {
        global $FileName;
        global $CCSLocales;
        global $DefaultDateFormat;
        $this->ComponentName = "Report11";
        $this->Visible = True;
        $this->Parent = & $Parent;
        $this->RelativePath = $RelativePath;
        $this->Attributes = new clsAttributes($this->ComponentName . ":");
        $this->Detail = new clsSection($this);
        $MinPageSize = 0;
        $MaxSectionSize = 0;
        $this->Detail->Height = 1;
        $MaxSectionSize = max($MaxSectionSize, $this->Detail->Height);
        $this->Report_Footer = new clsSection($this);
        $this->Report_Footer->Height = 1;
        $MaxSectionSize = max($MaxSectionSize, $this->Report_Footer->Height);
        $this->Report_Header = new clsSection($this);
        $this->Page_Footer = new clsSection($this);
        $this->Page_Header = new clsSection($this);
        $this->Page_Header->Height = 1;
        $MinPageSize += $this->Page_Header->Height;
        $this->Errors = new clsErrors();
        $this->DataSource = new clsReport11DataSource($this);
        $this->ds = & $this->DataSource;
        $PageSize = CCGetParam($this->ComponentName . "PageSize", "");
        if(is_numeric($PageSize) && $PageSize > 0) {
            $this->PageSize = $PageSize;
        } else {
            if (!is_numeric($PageSize) || $PageSize < 0)
                $this->PageSize = 40;
             else if ($PageSize == "0")
                $this->PageSize = 100;
             else 
                $this->PageSize = min(100, $PageSize);
        }
        $MinPageSize += $MaxSectionSize;
        if ($this->PageSize && $MinPageSize && $this->PageSize < $MinPageSize)
            $this->PageSize = $MinPageSize;
        $this->PageNumber = $this->ViewMode == "Print" ? 1 : intval(CCGetParam($this->ComponentName . "Page", 1));
        if ($this->PageNumber <= 0 ) {
            $this->PageNumber = 1;
        }

        $this->Age = new clsControl(ccsReportLabel, "Age", "Age", ccsInteger, "", "", $this);
        $this->TotalPreg = new clsControl(ccsReportLabel, "TotalPreg", "TotalPreg", ccsInteger, "", "", $this);
        $this->TotalPreg1 = new clsControl(ccsReportLabel, "TotalPreg1", "TotalPreg1", ccsFloat, "", "", $this);
        $this->TotalPreg1->IsPercent = true;
        $this->NoRecords = new clsPanel("NoRecords", $this);
        $this->TotalSum_TotalPreg = new clsControl(ccsReportLabel, "TotalSum_TotalPreg", "TotalSum_TotalPreg", ccsInteger, "", "", $this);
        $this->TotalSum_TotalPreg->TotalFunction = "Sum";
    }
//End Class_Initialize Event

//Initialize Method @333-6C59EE65
    function Initialize()
    {
        if(!$this->Visible) return;

        $this->DataSource->PageSize = $this->PageSize;
        $this->DataSource->AbsolutePage = $this->PageNumber;
        $this->DataSource->SetOrder($this->SorterName, $this->SorterDirection);
    }
//End Initialize Method

//CheckErrors Method @333-E49AEE3E
    function CheckErrors()
    {
        $errors = false;
        $errors = ($errors || $this->Age->Errors->Count());
        $errors = ($errors || $this->TotalPreg->Errors->Count());
        $errors = ($errors || $this->TotalPreg1->Errors->Count());
        $errors = ($errors || $this->TotalSum_TotalPreg->Errors->Count());
        $errors = ($errors || $this->Errors->Count());
        $errors = ($errors || $this->DataSource->Errors->Count());
        return $errors;
    }
//End CheckErrors Method

//GetErrors Method @333-BB86B1E9
    function GetErrors()
    {
        $errors = "";
        $errors = ComposeStrings($errors, $this->Age->Errors->ToString());
        $errors = ComposeStrings($errors, $this->TotalPreg->Errors->ToString());
        $errors = ComposeStrings($errors, $this->TotalPreg1->Errors->ToString());
        $errors = ComposeStrings($errors, $this->TotalSum_TotalPreg->Errors->ToString());
        $errors = ComposeStrings($errors, $this->Errors->ToString());
        $errors = ComposeStrings($errors, $this->DataSource->Errors->ToString());
        return $errors;
    }
//End GetErrors Method

//Show Method @333-CC7E3FBA
    function Show()
    {
        global $Tpl;
        global $CCSLocales;
        if(!$this->Visible) return;

        $ShownRecords = 0;

        $this->DataSource->Parameters["urls_PregRegDate"] = CCGetFromGet("s_PregRegDate", NULL);
        $this->DataSource->Parameters["urls_PregRegDateTo"] = CCGetFromGet("s_PregRegDateTo", NULL);
        $this->DataSource->Parameters["urls_FacilityName"] = CCGetFromGet("s_FacilityName", NULL);

        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeSelect", $this);


        $this->DataSource->Prepare();
        $this->DataSource->Open();

        $Groups = new clsGroupsCollectionReport11($this);
        $Groups->PageSize = $this->PageSize > 0 ? $this->PageSize : 0;

        $is_next_record = $this->DataSource->next_record();
        $this->IsEmpty = ! $is_next_record;
        while($is_next_record) {
            $this->DataSource->SetValues();
            $this->Age->SetValue($this->DataSource->Age->GetValue());
            $this->TotalPreg->SetValue($this->DataSource->TotalPreg->GetValue());
            $this->TotalPreg1->SetValue($this->DataSource->TotalPreg1->GetValue());
            $this->TotalSum_TotalPreg->SetValue($this->DataSource->TotalSum_TotalPreg->GetValue());
            if (count($Groups->Groups) == 0) $Groups->OpenGroup("Report");
            $Groups->AddItem();
            $is_next_record = $this->DataSource->next_record();
        }
        if (!count($Groups->Groups)) 
            $Groups->OpenGroup("Report");
        else
            $this->NoRecords->Visible = false;
        $Groups->CloseGroup("Report");
        $this->TotalPages = $Groups->TotalPages;
        $this->TotalRows = $Groups->TotalRows;

        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeShow", $this);
        if(!$this->Visible) return;

        $this->Attributes->Show();
        $ReportBlock = "Report " . $this->ComponentName;
        $ParentPath = $Tpl->block_path;
        $Tpl->block_path = $ParentPath . "/" . $ReportBlock;

        if($this->CheckErrors()) {
            $Tpl->replaceblock("", $this->GetErrors());
            $Tpl->block_path = $ParentPath;
            return;
        } else {
            $items = & $Groups->Groups;
            $i = $Groups->Pages[min($this->PageNumber, $Groups->TotalPages) - 1];
            $this->ControlsVisible["Age"] = $this->Age->Visible;
            $this->ControlsVisible["TotalPreg"] = $this->TotalPreg->Visible;
            $this->ControlsVisible["TotalPreg1"] = $this->TotalPreg1->Visible;
            do {
                $this->Attributes->RestoreFromArray($items[$i]->Attributes);
                $this->RowNumber = $items[$i]->RowNumber;
                switch ($items[$i]->GroupType) {
                    Case "":
                        $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Detail";
                        $this->Age->SetValue($items[$i]->Age);
                        $this->Age->Attributes->RestoreFromArray($items[$i]->_AgeAttributes);
                        $this->TotalPreg->SetValue($items[$i]->TotalPreg);
                        $this->TotalPreg->Attributes->RestoreFromArray($items[$i]->_TotalPregAttributes);
                        $this->TotalPreg1->SetValue($items[$items[$i]->ReportTotalIndex]->TotalPreg1345Rel && strval($items[$i]->TotalPreg1) != "" ? $items[$i]->TotalPreg1 / $items[$items[$i]->ReportTotalIndex]->TotalPreg1345Rel : "");
                        $this->TotalPreg1->Attributes->RestoreFromArray($items[$i]->_TotalPreg1Attributes);
                        $this->Detail->CCSEventResult = CCGetEvent($this->Detail->CCSEvents, "BeforeShow", $this->Detail);
                        $this->Attributes->Show();
                        $this->Age->Show();
                        $this->TotalPreg->Show();
                        $this->TotalPreg1->Show();
                        $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                        if ($this->Detail->Visible)
                            $Tpl->parseto("Section Detail", true, "Section Detail");
                        break;
                    case "Report":
                        if ($items[$i]->Mode == 1) {
                            $this->Report_Header->CCSEventResult = CCGetEvent($this->Report_Header->CCSEvents, "BeforeShow", $this->Report_Header);
                            if ($this->Report_Header->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Report_Header";
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Report_Header", true, "Section Detail");
                            }
                        }
                        if ($items[$i]->Mode == 2) {
                            $this->TotalSum_TotalPreg->SetValue($items[$i]->TotalSum_TotalPreg);
                            $this->TotalSum_TotalPreg->Attributes->RestoreFromArray($items[$i]->_TotalSum_TotalPregAttributes);
                            $this->Report_Footer->CCSEventResult = CCGetEvent($this->Report_Footer->CCSEvents, "BeforeShow", $this->Report_Footer);
                            if ($this->Report_Footer->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Report_Footer";
                                $this->NoRecords->Show();
                                $this->TotalSum_TotalPreg->Show();
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Report_Footer", true, "Section Detail");
                            }
                        }
                        break;
                    case "Page":
                        if ($items[$i]->Mode == 1) {
                            $this->Page_Header->CCSEventResult = CCGetEvent($this->Page_Header->CCSEvents, "BeforeShow", $this->Page_Header);
                            if ($this->Page_Header->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Page_Header";
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Page_Header", true, "Section Detail");
                            }
                        }
                        if ($items[$i]->Mode == 2 && !$this->UseClientPaging || $items[$i]->Mode == 1 && $this->UseClientPaging) {
                            $this->Page_Footer->CCSEventResult = CCGetEvent($this->Page_Footer->CCSEvents, "BeforeShow", $this->Page_Footer);
                            if ($this->Page_Footer->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Page_Footer";
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Page_Footer", true, "Section Detail");
                            }
                        }
                        break;
                }
                $i++;
            } while ($i < count($items) && ($this->ViewMode == "Print" ||  !($i > 1 && $items[$i]->GroupType == 'Page' && $items[$i]->Mode == 1)));
            $Tpl->block_path = $ParentPath;
            $Tpl->parse($ReportBlock);
            $this->DataSource->close();
        }

    }
//End Show Method

} //End Report11 Class @333-FCB6E20C

class clsReport11DataSource extends clsDBregistry_db {  //Report11DataSource Class @333-38696EE9

//DataSource Variables @333-14B4B728
    public $Parent = "";
    public $CCSEvents = "";
    public $CCSEventResult;
    public $ErrorBlock;
    public $CmdExecution;

    public $wp;


    // Datasource fields
    public $Age;
    public $TotalPreg;
    public $TotalPreg1;
    public $TotalSum_TotalPreg;
//End DataSource Variables

//DataSourceClass_Initialize Event @333-9BCCAB13
    function clsReport11DataSource(& $Parent)
    {
        $this->Parent = & $Parent;
        $this->ErrorBlock = "Report Report11";
        $this->Initialize();
        $this->Age = new clsField("Age", ccsInteger, "");
        
        $this->TotalPreg = new clsField("TotalPreg", ccsInteger, "");
        
        $this->TotalPreg1 = new clsField("TotalPreg1", ccsFloat, "");
        
        $this->TotalSum_TotalPreg = new clsField("TotalSum_TotalPreg", ccsInteger, "");
        

    }
//End DataSourceClass_Initialize Event

//SetOrder Method @333-9E1383D1
    function SetOrder($SorterName, $SorterDirection)
    {
        $this->Order = "";
        $this->Order = CCGetOrder($this->Order, $SorterName, $SorterDirection, 
            "");
    }
//End SetOrder Method

//Prepare Method @333-081B9768
    function Prepare()
    {
        global $CCSLocales;
        global $DefaultDateFormat;
        $this->wp = new clsSQLParameters($this->ErrorBlock);
        $this->wp->AddParameter("1", "urls_PregRegDate", ccsDate, array("ShortDate"), array("yyyy", "-", "mm", "-", "dd", " ", "HH", ":", "nn", ":", "ss"), $this->Parameters["urls_PregRegDate"], CCFormatDate(CCParseDate("1000-01-01",array("yyyy","-","mm","-","dd")),array("ShortDate")), false);
        $this->wp->AddParameter("2", "urls_PregRegDateTo", ccsDate, array("ShortDate"), array("yyyy", "-", "mm", "-", "dd", " ", "HH", ":", "nn", ":", "ss"), $this->Parameters["urls_PregRegDateTo"], CCFormatDate(CCParseDate("2999-01-01",array("yyyy","-","mm","-","dd")),array("ShortDate")), false);
        $this->wp->AddParameter("3", "urls_FacilityName", ccsText, "", "", $this->Parameters["urls_FacilityName"], "", false);
    }
//End Prepare Method

//Open Method @333-80E0DDAB
    function Open()
    {
        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeBuildSelect", $this->Parent);
        $this->SQL = "SELECT 0 AS Age, \n" .
        "(\n" .
        "	SELECT COUNT(*) FROM\n" .
        "	(\n" .
        "		SELECT DeliveryID, 'O1' AS O\n" .
        "		FROM (delivery INNER JOIN pregnancy_outcome ON delivery.PregnancyOutcome1ID = pregnancy_outcome.PregnancyOutcomeID) LEFT JOIN facilities ON\n" .
        "        delivery.FacilityID = facilities.FacilityID\n" .
        "		WHERE delivery.PregnancyOutcome1ID = 3 AND delivery.GestationAge <=22 AND delivery.DataDelivery >= '" . $this->SQLValue($this->wp->GetDBValue("1"), ccsDate) . "'\n" .
        "		AND delivery.DataDelivery <= '" . $this->SQLValue($this->wp->GetDBValue("2"), ccsDate) . "'\n" .
        "		AND facilities.FacilityName LIKE '%" . $this->SQLValue($this->wp->GetDBValue("3"), ccsText) . "%' \n" .
        "\n" .
        "		UNION\n" .
        "\n" .
        "		SELECT DeliveryID, 'O2' AS O\n" .
        "		FROM (delivery INNER JOIN pregnancy_outcome ON delivery.PregnancyOutcome2ID = pregnancy_outcome.PregnancyOutcomeID) LEFT JOIN facilities ON\n" .
        "        delivery.FacilityID = facilities.FacilityID\n" .
        "		WHERE delivery.PregnancyOutcome2ID = 3 AND delivery.GestationAge <=22 AND delivery.DataDelivery >= '" . $this->SQLValue($this->wp->GetDBValue("1"), ccsDate) . "'\n" .
        "		AND delivery.DataDelivery <= '" . $this->SQLValue($this->wp->GetDBValue("2"), ccsDate) . "' \n" .
        "		AND facilities.FacilityName LIKE '%" . $this->SQLValue($this->wp->GetDBValue("3"), ccsText) . "%'\n" .
        "\n" .
        "		UNION\n" .
        "\n" .
        "		SELECT DeliveryID, 'O3' AS O\n" .
        "		FROM (delivery INNER JOIN pregnancy_outcome ON delivery.PregnancyOutcome3ID = pregnancy_outcome.PregnancyOutcomeID) LEFT JOIN facilities ON\n" .
        "        delivery.FacilityID = facilities.FacilityID\n" .
        "		WHERE delivery.PregnancyOutcome3ID = 3 AND delivery.GestationAge <=22 AND delivery.DataDelivery >= '" . $this->SQLValue($this->wp->GetDBValue("1"), ccsDate) . "'\n" .
        "		AND delivery.DataDelivery <= '" . $this->SQLValue($this->wp->GetDBValue("2"), ccsDate) . "' \n" .
        "		AND facilities.FacilityName LIKE '%" . $this->SQLValue($this->wp->GetDBValue("3"), ccsText) . "%'\n" .
        "\n" .
        "	) AS TotalPreg1\n" .
        ") AS TotalPreg\n" .
        "\n" .
        "UNION\n" .
        "\n" .
        "SELECT 1 AS Age, \n" .
        "(\n" .
        "	(\n" .
        "		SELECT COUNT(*) FROM\n" .
        "		(\n" .
        "			SELECT DeliveryID, 'O1' AS O\n" .
        "			FROM (delivery INNER JOIN pregnancy_outcome ON delivery.PregnancyOutcome1ID = pregnancy_outcome.PregnancyOutcomeID) LEFT JOIN facilities ON\n" .
        "        delivery.FacilityID = facilities.FacilityID\n" .
        "			WHERE delivery.PregnancyOutcome1ID != -1 AND delivery.DataDelivery >= '" . $this->SQLValue($this->wp->GetDBValue("1"), ccsDate) . "'\n" .
        "			AND delivery.DataDelivery <= '" . $this->SQLValue($this->wp->GetDBValue("2"), ccsDate) . "' \n" .
        "			AND facilities.FacilityName LIKE '%" . $this->SQLValue($this->wp->GetDBValue("3"), ccsText) . "%'\n" .
        "\n" .
        "			UNION\n" .
        "\n" .
        "			SELECT DeliveryID, 'O2' AS O\n" .
        "			FROM (delivery INNER JOIN pregnancy_outcome ON delivery.PregnancyOutcome2ID = pregnancy_outcome.PregnancyOutcomeID) LEFT JOIN facilities ON\n" .
        "        delivery.FacilityID = facilities.FacilityID\n" .
        "			WHERE delivery.PregnancyOutcome2ID != -1 AND delivery.DataDelivery >= '" . $this->SQLValue($this->wp->GetDBValue("1"), ccsDate) . "'\n" .
        "			AND delivery.DataDelivery <= '" . $this->SQLValue($this->wp->GetDBValue("2"), ccsDate) . "' \n" .
        "			AND facilities.FacilityName LIKE '%" . $this->SQLValue($this->wp->GetDBValue("3"), ccsText) . "%'\n" .
        "\n" .
        "			UNION\n" .
        "\n" .
        "			SELECT DeliveryID, 'O3' AS O\n" .
        "			FROM (delivery INNER JOIN pregnancy_outcome ON delivery.PregnancyOutcome3ID = pregnancy_outcome.PregnancyOutcomeID) LEFT JOIN facilities ON\n" .
        "        delivery.FacilityID = facilities.FacilityID\n" .
        "			WHERE delivery.PregnancyOutcome3ID != -1 AND delivery.DataDelivery >= '" . $this->SQLValue($this->wp->GetDBValue("1"), ccsDate) . "'\n" .
        "			AND delivery.DataDelivery <= '" . $this->SQLValue($this->wp->GetDBValue("2"), ccsDate) . "' \n" .
        "			AND facilities.FacilityName LIKE '%" . $this->SQLValue($this->wp->GetDBValue("3"), ccsText) . "%'\n" .
        "		) AS TotalPreg1\n" .
        "	)\n" .
        "	\n" .
        "	- \n" .
        "	\n" .
        "	(\n" .
        "		SELECT COUNT(*) FROM\n" .
        "		(\n" .
        "			SELECT DeliveryID, 'O1' AS O\n" .
        "			FROM (delivery INNER JOIN pregnancy_outcome ON delivery.PregnancyOutcome1ID = pregnancy_outcome.PregnancyOutcomeID) LEFT JOIN facilities ON\n" .
        "        delivery.FacilityID = facilities.FacilityID\n" .
        "			WHERE delivery.PregnancyOutcome1ID = 3 AND delivery.GestationAge <=22 AND delivery.DataDelivery >= '" . $this->SQLValue($this->wp->GetDBValue("1"), ccsDate) . "'\n" .
        "			AND delivery.DataDelivery <= '" . $this->SQLValue($this->wp->GetDBValue("2"), ccsDate) . "'\n" .
        "			AND facilities.FacilityName LIKE '%" . $this->SQLValue($this->wp->GetDBValue("3"), ccsText) . "%' \n" .
        "\n" .
        "			UNION\n" .
        "\n" .
        "			SELECT DeliveryID, 'O2' AS O\n" .
        "			FROM (delivery INNER JOIN pregnancy_outcome ON delivery.PregnancyOutcome2ID = pregnancy_outcome.PregnancyOutcomeID) LEFT JOIN facilities ON\n" .
        "        delivery.FacilityID = facilities.FacilityID\n" .
        "			WHERE delivery.PregnancyOutcome2ID = 3 AND delivery.GestationAge <=22 AND delivery.DataDelivery >= '" . $this->SQLValue($this->wp->GetDBValue("1"), ccsDate) . "'\n" .
        "			AND delivery.DataDelivery <= '" . $this->SQLValue($this->wp->GetDBValue("2"), ccsDate) . "' \n" .
        "			AND facilities.FacilityName LIKE '%" . $this->SQLValue($this->wp->GetDBValue("3"), ccsText) . "%'\n" .
        "\n" .
        "			UNION\n" .
        "\n" .
        "			SELECT DeliveryID, 'O3' AS O\n" .
        "			FROM (delivery INNER JOIN pregnancy_outcome ON delivery.PregnancyOutcome3ID = pregnancy_outcome.PregnancyOutcomeID) LEFT JOIN facilities ON\n" .
        "        delivery.FacilityID = facilities.FacilityID\n" .
        "			WHERE delivery.PregnancyOutcome3ID = 3 AND delivery.GestationAge <=22 AND delivery.DataDelivery >= '" . $this->SQLValue($this->wp->GetDBValue("1"), ccsDate) . "'\n" .
        "			AND delivery.DataDelivery <= '" . $this->SQLValue($this->wp->GetDBValue("2"), ccsDate) . "' \n" .
        "			AND facilities.FacilityName LIKE '%" . $this->SQLValue($this->wp->GetDBValue("3"), ccsText) . "%'\n" .
        "		) AS TotalPreg2\n" .
        "	)\n" .
        ") AS TotalPreg";
        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeExecuteSelect", $this->Parent);
        $this->query(CCBuildSQL($this->SQL, $this->Where, $this->Order));
        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "AfterExecuteSelect", $this->Parent);
    }
//End Open Method

//SetValues Method @333-258E9AB1
    function SetValues()
    {
        $this->Age->SetDBValue(trim($this->f("Age")));
        $this->TotalPreg->SetDBValue(trim($this->f("TotalPreg")));
        $this->TotalPreg1->SetDBValue(trim($this->f("TotalPreg")));
        $this->TotalSum_TotalPreg->SetDBValue(trim($this->f("TotalPreg")));
    }
//End SetValues Method

} //End Report11DataSource Class @333-FCB6E20C

//Report22 ReportGroup class @530-E4AD418A
class clsReportGroupReport22 {
    public $GroupType;
    public $mode; //1 - open, 2 - close
    public $Age, $_AgeAttributes;
    public $COUNT_1, $_COUNT_1Attributes;
    public $COUNT_2, $COUNT_2537Rel, $_COUNT_2Attributes;
    public $TotalSum_COUNT_1, $_TotalSum_COUNT_1Attributes;
    public $Attributes;
    public $ReportTotalIndex = 0;
    public $PageTotalIndex;
    public $PageNumber;
    public $RowNumber;
    public $Parent;

    function clsReportGroupReport22(& $parent) {
        $this->Parent = & $parent;
        $this->Attributes = $this->Parent->Attributes->GetAsArray();
    }
    function SetControls($PrevGroup = "") {
        $this->Age = $this->Parent->Age->Value;
        $this->COUNT_1 = $this->Parent->COUNT_1->Value;
        $this->COUNT_2 = $this->Parent->COUNT_2->Value;
    }

    function SetTotalControls($mode = "", $PrevGroup = "") {
        $this->TotalSum_COUNT_1 = $this->Parent->TotalSum_COUNT_1->GetTotalValue($mode);
        $this->Parent->COUNT_2->GetTotalValue($mode);
        $this->COUNT_2537Rel = $this->Parent->COUNT_2->ValueRelative;
        $this->_AgeAttributes = $this->Parent->Age->Attributes->GetAsArray();
        $this->_COUNT_1Attributes = $this->Parent->COUNT_1->Attributes->GetAsArray();
        $this->_COUNT_2Attributes = $this->Parent->COUNT_2->Attributes->GetAsArray();
        $this->_TotalSum_COUNT_1Attributes = $this->Parent->TotalSum_COUNT_1->Attributes->GetAsArray();
    }
    function SyncWithHeader(& $Header) {
        $Header->TotalSum_COUNT_1 = $this->TotalSum_COUNT_1;
        $Header->_TotalSum_COUNT_1Attributes = $this->_TotalSum_COUNT_1Attributes;
        $this->Age = $Header->Age;
        $Header->_AgeAttributes = $this->_AgeAttributes;
        $this->Parent->Age->Value = $Header->Age;
        $this->Parent->Age->Attributes->RestoreFromArray($Header->_AgeAttributes);
        $this->COUNT_1 = $Header->COUNT_1;
        $Header->_COUNT_1Attributes = $this->_COUNT_1Attributes;
        $this->Parent->COUNT_1->Value = $Header->COUNT_1;
        $this->Parent->COUNT_1->Attributes->RestoreFromArray($Header->_COUNT_1Attributes);
        $this->COUNT_2 = $Header->COUNT_2;
        $Header->_COUNT_2Attributes = $this->_COUNT_2Attributes;
        $this->Parent->COUNT_2->Value = $Header->COUNT_2;
        $this->Parent->COUNT_2->Attributes->RestoreFromArray($Header->_COUNT_2Attributes);
        $Header->COUNT_2537Rel = $this->COUNT_2537Rel;
    }
    function ChangeTotalControls() {
        $this->COUNT_2 = $this->Parent->COUNT_2->GetValue();
        $this->TotalSum_COUNT_1 = $this->Parent->TotalSum_COUNT_1->GetValue();
    }
}
//End Report22 ReportGroup class

//Report22 GroupsCollection class @530-F7C98166
class clsGroupsCollectionReport22 {
    public $Groups;
    public $mPageCurrentHeaderIndex;
    public $PageSize;
    public $TotalPages = 0;
    public $TotalRows = 0;
    public $CurrentPageSize = 0;
    public $Pages;
    public $Parent;
    public $LastDetailIndex;

    function clsGroupsCollectionReport22(& $parent) {
        $this->Parent = & $parent;
        $this->Groups = array();
        $this->Pages  = array();
        $this->mReportTotalIndex = 0;
        $this->mPageTotalIndex = 1;
    }

    function & InitGroup() {
        $group = new clsReportGroupReport22($this->Parent);
        $group->RowNumber = $this->TotalRows + 1;
        $group->PageNumber = $this->TotalPages;
        $group->PageTotalIndex = $this->mPageCurrentHeaderIndex;
        return $group;
    }

    function RestoreValues() {
        $this->Parent->Age->Value = $this->Parent->Age->initialValue;
        $this->Parent->COUNT_1->Value = $this->Parent->COUNT_1->initialValue;
        $this->Parent->COUNT_2->Value = $this->Parent->COUNT_2->initialValue;
        $this->Parent->TotalSum_COUNT_1->Value = $this->Parent->TotalSum_COUNT_1->initialValue;
    }

    function OpenPage() {
        $this->TotalPages++;
        $Group = & $this->InitGroup();
        $this->Parent->Page_Header->CCSEventResult = CCGetEvent($this->Parent->Page_Header->CCSEvents, "OnInitialize", $this->Parent->Page_Header);
        if ($this->Parent->Page_Header->Visible)
            $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Page_Header->Height;
        $Group->SetTotalControls("GetNextValue");
        $this->Parent->Page_Header->CCSEventResult = CCGetEvent($this->Parent->Page_Header->CCSEvents, "OnCalculate", $this->Parent->Page_Header);
        $Group->SetControls();
        $Group->Mode = 1;
        $Group->GroupType = "Page";
        $Group->PageTotalIndex = count($this->Groups);
        $this->mPageCurrentHeaderIndex = count($this->Groups);
        $this->Groups[] =  & $Group;
        $this->Pages[] =  count($this->Groups) == 2 ? 0 : count($this->Groups) - 1;
    }

    function OpenGroup($groupName) {
        $Group = "";
        $OpenFlag = false;
        if ($groupName == "Report") {
            $Group = & $this->InitGroup(true);
            $this->Parent->Report_Header->CCSEventResult = CCGetEvent($this->Parent->Report_Header->CCSEvents, "OnInitialize", $this->Parent->Report_Header);
            if ($this->Parent->Report_Header->Visible) 
                $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Report_Header->Height;
                $Group->SetTotalControls("GetNextValue");
            $this->Parent->Report_Header->CCSEventResult = CCGetEvent($this->Parent->Report_Header->CCSEvents, "OnCalculate", $this->Parent->Report_Header);
            $Group->SetControls();
            $Group->Mode = 1;
            $Group->GroupType = "Report";
            $this->Groups[] = & $Group;
            $this->OpenPage();
        }
    }

    function ClosePage() {
        $Group = & $this->InitGroup();
        $this->Parent->Page_Footer->CCSEventResult = CCGetEvent($this->Parent->Page_Footer->CCSEvents, "OnInitialize", $this->Parent->Page_Footer);
        $Group->SetTotalControls("GetPrevValue");
        $Group->SyncWithHeader($this->Groups[$this->mPageCurrentHeaderIndex]);
        $this->Parent->Page_Footer->CCSEventResult = CCGetEvent($this->Parent->Page_Footer->CCSEvents, "OnCalculate", $this->Parent->Page_Footer);
        $Group->SetControls();
        $this->RestoreValues();
        $this->CurrentPageSize = 0;
        $Group->Mode = 2;
        $Group->GroupType = "Page";
        $this->Groups[] = & $Group;
    }

    function CloseGroup($groupName)
    {
        $Group = "";
        if ($groupName == "Report") {
            $Group = & $this->InitGroup(true);
            $this->Parent->Report_Footer->CCSEventResult = CCGetEvent($this->Parent->Report_Footer->CCSEvents, "OnInitialize", $this->Parent->Report_Footer);
            if ($this->Parent->Page_Footer->Visible) 
                $OverSize = $this->Parent->Report_Footer->Height + $this->Parent->Page_Footer->Height;
            else
                $OverSize = $this->Parent->Report_Footer->Height;
            if (($this->PageSize > 0) and $this->Parent->Report_Footer->Visible and ($this->CurrentPageSize + $OverSize > $this->PageSize)) {
                $this->ClosePage();
                $this->OpenPage();
            }
            $Group->SetTotalControls("GetPrevValue");
            $Group->SyncWithHeader($this->Groups[0]);
            if ($this->Parent->Report_Footer->Visible)
                $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Report_Footer->Height;
            $this->Parent->Report_Footer->CCSEventResult = CCGetEvent($this->Parent->Report_Footer->CCSEvents, "OnCalculate", $this->Parent->Report_Footer);
            $Group->SetControls();
            $this->RestoreValues();
            $Group->Mode = 2;
            $Group->GroupType = "Report";
            $this->Groups[] = & $Group;
            $this->ClosePage();
            return;
        }
    }

    function AddItem()
    {
        $Group = & $this->InitGroup(true);
        $this->Parent->Detail->CCSEventResult = CCGetEvent($this->Parent->Detail->CCSEvents, "OnInitialize", $this->Parent->Detail);
        if ($this->Parent->Page_Footer->Visible) 
            $OverSize = $this->Parent->Detail->Height + $this->Parent->Page_Footer->Height;
        else
            $OverSize = $this->Parent->Detail->Height;
        if (($this->PageSize > 0) and $this->Parent->Detail->Visible and ($this->CurrentPageSize + $OverSize > $this->PageSize)) {
            $this->ClosePage();
            $this->OpenPage();
        }
        $this->TotalRows++;
        if ($this->LastDetailIndex)
            $PrevGroup = & $this->Groups[$this->LastDetailIndex];
        else
            $PrevGroup = "";
        $Group->SetTotalControls("", $PrevGroup);
        if ($this->Parent->Detail->Visible)
            $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Detail->Height;
        $this->Parent->Detail->CCSEventResult = CCGetEvent($this->Parent->Detail->CCSEvents, "OnCalculate", $this->Parent->Detail);
        $Group->SetControls($PrevGroup);
        $this->LastDetailIndex = count($this->Groups);
        $this->Groups[] = & $Group;
    }
}
//End Report22 GroupsCollection class

class clsReportReport22 { //Report22 Class @530-D29AED97

//Report22 Variables @530-944D286E

    public $ComponentType = "Report";
    public $PageSize;
    public $ComponentName;
    public $Visible;
    public $Errors;
    public $CCSEvents = array();
    public $CCSEventResult;
    public $RelativePath = "";
    public $ViewMode = "Web";
    public $TemplateBlock;
    public $PageNumber;
    public $RowNumber;
    public $TotalRows;
    public $TotalPages;
    public $ControlsVisible = array();
    public $IsEmpty;
    public $Attributes;
    public $DetailBlock, $Detail;
    public $Report_FooterBlock, $Report_Footer;
    public $Report_HeaderBlock, $Report_Header;
    public $Page_FooterBlock, $Page_Footer;
    public $Page_HeaderBlock, $Page_Header;
    public $SorterName, $SorterDirection;

    public $ds;
    public $DataSource;
    public $UseClientPaging = false;

    //Report Controls
    public $StaticControls, $RowControls, $Report_FooterControls, $Report_HeaderControls;
    public $Page_FooterControls, $Page_HeaderControls;
//End Report22 Variables

//Class_Initialize Event @530-7F141B44
    function clsReportReport22($RelativePath = "", & $Parent)
    {
        global $FileName;
        global $CCSLocales;
        global $DefaultDateFormat;
        $this->ComponentName = "Report22";
        $this->Visible = True;
        $this->Parent = & $Parent;
        $this->RelativePath = $RelativePath;
        $this->Attributes = new clsAttributes($this->ComponentName . ":");
        $this->Detail = new clsSection($this);
        $MinPageSize = 0;
        $MaxSectionSize = 0;
        $this->Detail->Height = 1;
        $MaxSectionSize = max($MaxSectionSize, $this->Detail->Height);
        $this->Report_Footer = new clsSection($this);
        $this->Report_Footer->Height = 1;
        $MaxSectionSize = max($MaxSectionSize, $this->Report_Footer->Height);
        $this->Report_Header = new clsSection($this);
        $this->Page_Footer = new clsSection($this);
        $this->Page_Header = new clsSection($this);
        $this->Page_Header->Height = 1;
        $MinPageSize += $this->Page_Header->Height;
        $this->Errors = new clsErrors();
        $this->DataSource = new clsReport22DataSource($this);
        $this->ds = & $this->DataSource;
        $PageSize = CCGetParam($this->ComponentName . "PageSize", "");
        if(is_numeric($PageSize) && $PageSize > 0) {
            $this->PageSize = $PageSize;
        } else {
            if (!is_numeric($PageSize) || $PageSize < 0)
                $this->PageSize = 40;
             else if ($PageSize == "0")
                $this->PageSize = 100;
             else 
                $this->PageSize = min(100, $PageSize);
        }
        $MinPageSize += $MaxSectionSize;
        if ($this->PageSize && $MinPageSize && $this->PageSize < $MinPageSize)
            $this->PageSize = $MinPageSize;
        $this->PageNumber = $this->ViewMode == "Print" ? 1 : intval(CCGetParam($this->ComponentName . "Page", 1));
        if ($this->PageNumber <= 0 ) {
            $this->PageNumber = 1;
        }

        $this->Age = new clsControl(ccsReportLabel, "Age", "Age", ccsInteger, "", "", $this);
        $this->COUNT_1 = new clsControl(ccsReportLabel, "COUNT_1", "COUNT_1", ccsInteger, "", "", $this);
        $this->COUNT_2 = new clsControl(ccsReportLabel, "COUNT_2", "COUNT_2", ccsFloat, "", "", $this);
        $this->COUNT_2->IsPercent = true;
        $this->NoRecords = new clsPanel("NoRecords", $this);
        $this->TotalSum_COUNT_1 = new clsControl(ccsReportLabel, "TotalSum_COUNT_1", "TotalSum_COUNT_1", ccsInteger, "", "", $this);
        $this->TotalSum_COUNT_1->TotalFunction = "Sum";
    }
//End Class_Initialize Event

//Initialize Method @530-6C59EE65
    function Initialize()
    {
        if(!$this->Visible) return;

        $this->DataSource->PageSize = $this->PageSize;
        $this->DataSource->AbsolutePage = $this->PageNumber;
        $this->DataSource->SetOrder($this->SorterName, $this->SorterDirection);
    }
//End Initialize Method

//CheckErrors Method @530-2962420E
    function CheckErrors()
    {
        $errors = false;
        $errors = ($errors || $this->Age->Errors->Count());
        $errors = ($errors || $this->COUNT_1->Errors->Count());
        $errors = ($errors || $this->COUNT_2->Errors->Count());
        $errors = ($errors || $this->TotalSum_COUNT_1->Errors->Count());
        $errors = ($errors || $this->Errors->Count());
        $errors = ($errors || $this->DataSource->Errors->Count());
        return $errors;
    }
//End CheckErrors Method

//GetErrors Method @530-A3F69076
    function GetErrors()
    {
        $errors = "";
        $errors = ComposeStrings($errors, $this->Age->Errors->ToString());
        $errors = ComposeStrings($errors, $this->COUNT_1->Errors->ToString());
        $errors = ComposeStrings($errors, $this->COUNT_2->Errors->ToString());
        $errors = ComposeStrings($errors, $this->TotalSum_COUNT_1->Errors->ToString());
        $errors = ComposeStrings($errors, $this->Errors->ToString());
        $errors = ComposeStrings($errors, $this->DataSource->Errors->ToString());
        return $errors;
    }
//End GetErrors Method

//Show Method @530-759BCCBA
    function Show()
    {
        global $Tpl;
        global $CCSLocales;
        if(!$this->Visible) return;

        $ShownRecords = 0;

        $this->DataSource->Parameters["urls_PregRegDate"] = CCGetFromGet("s_PregRegDate", NULL);
        $this->DataSource->Parameters["urls_PregRegDateTo"] = CCGetFromGet("s_PregRegDateTo", NULL);
        $this->DataSource->Parameters["urls_FacilityName"] = CCGetFromGet("s_FacilityName", NULL);

        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeSelect", $this);


        $this->DataSource->Prepare();
        $this->DataSource->Open();

        $Groups = new clsGroupsCollectionReport22($this);
        $Groups->PageSize = $this->PageSize > 0 ? $this->PageSize : 0;

        $is_next_record = $this->DataSource->next_record();
        $this->IsEmpty = ! $is_next_record;
        while($is_next_record) {
            $this->DataSource->SetValues();
            $this->Age->SetValue($this->DataSource->Age->GetValue());
            $this->COUNT_1->SetValue($this->DataSource->COUNT_1->GetValue());
            $this->COUNT_2->SetValue($this->DataSource->COUNT_2->GetValue());
            $this->TotalSum_COUNT_1->SetValue($this->DataSource->TotalSum_COUNT_1->GetValue());
            if (count($Groups->Groups) == 0) $Groups->OpenGroup("Report");
            $Groups->AddItem();
            $is_next_record = $this->DataSource->next_record();
        }
        if (!count($Groups->Groups)) 
            $Groups->OpenGroup("Report");
        else
            $this->NoRecords->Visible = false;
        $Groups->CloseGroup("Report");
        $this->TotalPages = $Groups->TotalPages;
        $this->TotalRows = $Groups->TotalRows;

        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeShow", $this);
        if(!$this->Visible) return;

        $this->Attributes->Show();
        $ReportBlock = "Report " . $this->ComponentName;
        $ParentPath = $Tpl->block_path;
        $Tpl->block_path = $ParentPath . "/" . $ReportBlock;

        if($this->CheckErrors()) {
            $Tpl->replaceblock("", $this->GetErrors());
            $Tpl->block_path = $ParentPath;
            return;
        } else {
            $items = & $Groups->Groups;
            $i = $Groups->Pages[min($this->PageNumber, $Groups->TotalPages) - 1];
            $this->ControlsVisible["Age"] = $this->Age->Visible;
            $this->ControlsVisible["COUNT_1"] = $this->COUNT_1->Visible;
            $this->ControlsVisible["COUNT_2"] = $this->COUNT_2->Visible;
            do {
                $this->Attributes->RestoreFromArray($items[$i]->Attributes);
                $this->RowNumber = $items[$i]->RowNumber;
                switch ($items[$i]->GroupType) {
                    Case "":
                        $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Detail";
                        $this->Age->SetValue($items[$i]->Age);
                        $this->Age->Attributes->RestoreFromArray($items[$i]->_AgeAttributes);
                        $this->COUNT_1->SetValue($items[$i]->COUNT_1);
                        $this->COUNT_1->Attributes->RestoreFromArray($items[$i]->_COUNT_1Attributes);
                        $this->COUNT_2->SetValue($items[$items[$i]->ReportTotalIndex]->COUNT_2537Rel && strval($items[$i]->COUNT_2) != "" ? $items[$i]->COUNT_2 / $items[$items[$i]->ReportTotalIndex]->COUNT_2537Rel : "");
                        $this->COUNT_2->Attributes->RestoreFromArray($items[$i]->_COUNT_2Attributes);
                        $this->Detail->CCSEventResult = CCGetEvent($this->Detail->CCSEvents, "BeforeShow", $this->Detail);
                        $this->Attributes->Show();
                        $this->Age->Show();
                        $this->COUNT_1->Show();
                        $this->COUNT_2->Show();
                        $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                        if ($this->Detail->Visible)
                            $Tpl->parseto("Section Detail", true, "Section Detail");
                        break;
                    case "Report":
                        if ($items[$i]->Mode == 1) {
                            $this->Report_Header->CCSEventResult = CCGetEvent($this->Report_Header->CCSEvents, "BeforeShow", $this->Report_Header);
                            if ($this->Report_Header->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Report_Header";
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Report_Header", true, "Section Detail");
                            }
                        }
                        if ($items[$i]->Mode == 2) {
                            $this->TotalSum_COUNT_1->SetValue($items[$i]->TotalSum_COUNT_1);
                            $this->TotalSum_COUNT_1->Attributes->RestoreFromArray($items[$i]->_TotalSum_COUNT_1Attributes);
                            $this->Report_Footer->CCSEventResult = CCGetEvent($this->Report_Footer->CCSEvents, "BeforeShow", $this->Report_Footer);
                            if ($this->Report_Footer->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Report_Footer";
                                $this->NoRecords->Show();
                                $this->TotalSum_COUNT_1->Show();
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Report_Footer", true, "Section Detail");
                            }
                        }
                        break;
                    case "Page":
                        if ($items[$i]->Mode == 1) {
                            $this->Page_Header->CCSEventResult = CCGetEvent($this->Page_Header->CCSEvents, "BeforeShow", $this->Page_Header);
                            if ($this->Page_Header->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Page_Header";
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Page_Header", true, "Section Detail");
                            }
                        }
                        if ($items[$i]->Mode == 2 && !$this->UseClientPaging || $items[$i]->Mode == 1 && $this->UseClientPaging) {
                            $this->Page_Footer->CCSEventResult = CCGetEvent($this->Page_Footer->CCSEvents, "BeforeShow", $this->Page_Footer);
                            if ($this->Page_Footer->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Page_Footer";
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Page_Footer", true, "Section Detail");
                            }
                        }
                        break;
                }
                $i++;
            } while ($i < count($items) && ($this->ViewMode == "Print" ||  !($i > 1 && $items[$i]->GroupType == 'Page' && $items[$i]->Mode == 1)));
            $Tpl->block_path = $ParentPath;
            $Tpl->parse($ReportBlock);
            $this->DataSource->close();
        }

    }
//End Show Method

} //End Report22 Class @530-FCB6E20C

class clsReport22DataSource extends clsDBregistry_db {  //Report22DataSource Class @530-D75A2B0E

//DataSource Variables @530-799DA91F
    public $Parent = "";
    public $CCSEvents = "";
    public $CCSEventResult;
    public $ErrorBlock;
    public $CmdExecution;

    public $wp;


    // Datasource fields
    public $Age;
    public $COUNT_1;
    public $COUNT_2;
    public $TotalSum_COUNT_1;
//End DataSource Variables

//DataSourceClass_Initialize Event @530-718142D9
    function clsReport22DataSource(& $Parent)
    {
        $this->Parent = & $Parent;
        $this->ErrorBlock = "Report Report22";
        $this->Initialize();
        $this->Age = new clsField("Age", ccsInteger, "");
        
        $this->COUNT_1 = new clsField("COUNT_1", ccsInteger, "");
        
        $this->COUNT_2 = new clsField("COUNT_2", ccsFloat, "");
        
        $this->TotalSum_COUNT_1 = new clsField("TotalSum_COUNT_1", ccsInteger, "");
        

    }
//End DataSourceClass_Initialize Event

//SetOrder Method @530-9E1383D1
    function SetOrder($SorterName, $SorterDirection)
    {
        $this->Order = "";
        $this->Order = CCGetOrder($this->Order, $SorterName, $SorterDirection, 
            "");
    }
//End SetOrder Method

//Prepare Method @530-081B9768
    function Prepare()
    {
        global $CCSLocales;
        global $DefaultDateFormat;
        $this->wp = new clsSQLParameters($this->ErrorBlock);
        $this->wp->AddParameter("1", "urls_PregRegDate", ccsDate, array("ShortDate"), array("yyyy", "-", "mm", "-", "dd", " ", "HH", ":", "nn", ":", "ss"), $this->Parameters["urls_PregRegDate"], CCFormatDate(CCParseDate("1000-01-01",array("yyyy","-","mm","-","dd")),array("ShortDate")), false);
        $this->wp->AddParameter("2", "urls_PregRegDateTo", ccsDate, array("ShortDate"), array("yyyy", "-", "mm", "-", "dd", " ", "HH", ":", "nn", ":", "ss"), $this->Parameters["urls_PregRegDateTo"], CCFormatDate(CCParseDate("2999-01-01",array("yyyy","-","mm","-","dd")),array("ShortDate")), false);
        $this->wp->AddParameter("3", "urls_FacilityName", ccsText, "", "", $this->Parameters["urls_FacilityName"], "", false);
    }
//End Prepare Method

//Open Method @530-29B976FF
    function Open()
    {
        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeBuildSelect", $this->Parent);
        $this->SQL = "SELECT 0 AS Age, COUNT(*) FROM\n" .
        "(\n" .
        "	SELECT patient_PatientID, pregnancy_PregnancyID, nrTests\n" .
        "	FROM\n" .
        "	(\n" .
        "		SELECT patient.PatientID AS patient_PatientID, pregnancy.PregnancyID AS pregnancy_PregnancyID, COUNT(test.TestCodeID) AS nrTests\n" .
        "		FROM ((((pregnancy INNER JOIN patient ON pregnancy.PatientID = patient.PatientID) INNER JOIN visit ON\n" .
        "		visit.PregnancyID = pregnancy.PregnancyID) INNER JOIN test ON test.VisitID = visit.VisitID) LEFT JOIN delivery ON\n" .
        "delivery.PregnancyID = pregnancy.PregnancyID) LEFT JOIN facilities ON\n" .
        "pregnancy.FacilityID = facilities.FacilityID \n" .
        "		WHERE test.TestCodeID = 3\n" .
        "		AND ((delivery.PregnancyOutcome1ID>0 AND delivery.PregnancyOutcome1ID<3)\n" .
        "		OR (delivery.PregnancyOutcome2ID>0 AND delivery.PregnancyOutcome2ID<3)\n" .
        "		OR (delivery.PregnancyOutcome3ID>0 AND delivery.PregnancyOutcome3ID<3))\n" .
        "		AND delivery.DataDelivery >= '" . $this->SQLValue($this->wp->GetDBValue("1"), ccsDate) . "'\n" .
        "		AND delivery.DataDelivery <= '" . $this->SQLValue($this->wp->GetDBValue("2"), ccsDate) . "'\n" .
        "		AND facilities.FacilityName LIKE '%" . $this->SQLValue($this->wp->GetDBValue("3"), ccsText) . "%'\n" .
        "\n" .
        "		\n" .
        "		GROUP BY pregnancy.PregnancyID\n" .
        "	) AS t1\n" .
        "WHERE nrTests > 1) AS t2\n" .
        "\n" .
        "UNION\n" .
        "\n" .
        "SELECT 1 AS Age,\n" .
        "(\n" .
        "	(\n" .
        "		SELECT COUNT(*) FROM (pregnancy LEFT JOIN delivery ON\n" .
        "delivery.PregnancyID = pregnancy.PregnancyID) LEFT JOIN facilities ON\n" .
        "pregnancy.FacilityID = facilities.FacilityID \n" .
        "		WHERE \n" .
        "		((delivery.PregnancyOutcome1ID>0 AND delivery.PregnancyOutcome1ID<3)\n" .
        "		OR (delivery.PregnancyOutcome2ID>0 AND delivery.PregnancyOutcome2ID<3)\n" .
        "		OR (delivery.PregnancyOutcome3ID>0 AND delivery.PregnancyOutcome3ID<3))\n" .
        "		AND delivery.DataDelivery >= '" . $this->SQLValue($this->wp->GetDBValue("1"), ccsDate) . "'\n" .
        "		AND delivery.DataDelivery <= '" . $this->SQLValue($this->wp->GetDBValue("2"), ccsDate) . "'\n" .
        "		AND facilities.FacilityName LIKE '%" . $this->SQLValue($this->wp->GetDBValue("3"), ccsText) . "%'\n" .
        "\n" .
        "		\n" .
        "	) \n" .
        "	- 	(\n" .
        "		SELECT COUNT(*) \n" .
        "		FROM\n" .
        "		(\n" .
        "			SELECT patient.PatientID AS patient_PatientID, pregnancy.PregnancyID AS pregnancy_PregnancyID, COUNT(test.TestCodeID) AS nrTests\n" .
        "			FROM ((((pregnancy INNER JOIN patient ON pregnancy.PatientID = patient.PatientID) INNER JOIN visit ON\n" .
        "		visit.PregnancyID = pregnancy.PregnancyID) INNER JOIN test ON test.VisitID = visit.VisitID) LEFT JOIN delivery ON\n" .
        "delivery.PregnancyID = pregnancy.PregnancyID) LEFT JOIN facilities ON\n" .
        "pregnancy.FacilityID = facilities.FacilityID \n" .
        "			WHERE test.TestCodeID = 3 \n" .
        "			AND ((delivery.PregnancyOutcome1ID>0 AND delivery.PregnancyOutcome1ID<3)\n" .
        "			OR (delivery.PregnancyOutcome2ID>0 AND delivery.PregnancyOutcome2ID<3)\n" .
        "			OR (delivery.PregnancyOutcome3ID>0 AND delivery.PregnancyOutcome3ID<3))\n" .
        "			AND delivery.DataDelivery >= '" . $this->SQLValue($this->wp->GetDBValue("1"), ccsDate) . "'\n" .
        "			AND delivery.DataDelivery <= '" . $this->SQLValue($this->wp->GetDBValue("2"), ccsDate) . "'\n" .
        "			AND facilities.FacilityName LIKE '%" . $this->SQLValue($this->wp->GetDBValue("3"), ccsText) . "%'\n" .
        "\n" .
        "		\n" .
        "			GROUP BY pregnancy.PregnancyID\n" .
        "		) AS t1\n" .
        "		WHERE nrTests > 1\n" .
        "	) \n" .
        ") AS t2";
        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeExecuteSelect", $this->Parent);
        $this->query(CCBuildSQL($this->SQL, $this->Where, $this->Order));
        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "AfterExecuteSelect", $this->Parent);
    }
//End Open Method

//SetValues Method @530-7F58FC3C
    function SetValues()
    {
        $this->Age->SetDBValue(trim($this->f("Age")));
        $this->COUNT_1->SetDBValue(trim($this->f("COUNT(*)")));
        $this->COUNT_2->SetDBValue(trim($this->f("COUNT(*)")));
        $this->TotalSum_COUNT_1->SetDBValue(trim($this->f("COUNT(*)")));
    }
//End SetValues Method

} //End Report22DataSource Class @530-FCB6E20C

//Report23 ReportGroup class @544-92E52B63
class clsReportGroupReport23 {
    public $GroupType;
    public $mode; //1 - open, 2 - close
    public $Age, $_AgeAttributes;
    public $PPP, $_PPPAttributes;
    public $PPP1, $PPP1551Rel, $_PPP1Attributes;
    public $TotalSum_PPP, $_TotalSum_PPPAttributes;
    public $Attributes;
    public $ReportTotalIndex = 0;
    public $PageTotalIndex;
    public $PageNumber;
    public $RowNumber;
    public $Parent;

    function clsReportGroupReport23(& $parent) {
        $this->Parent = & $parent;
        $this->Attributes = $this->Parent->Attributes->GetAsArray();
    }
    function SetControls($PrevGroup = "") {
        $this->Age = $this->Parent->Age->Value;
        $this->PPP = $this->Parent->PPP->Value;
        $this->PPP1 = $this->Parent->PPP1->Value;
    }

    function SetTotalControls($mode = "", $PrevGroup = "") {
        $this->TotalSum_PPP = $this->Parent->TotalSum_PPP->GetTotalValue($mode);
        $this->Parent->PPP1->GetTotalValue($mode);
        $this->PPP1551Rel = $this->Parent->PPP1->ValueRelative;
        $this->_AgeAttributes = $this->Parent->Age->Attributes->GetAsArray();
        $this->_PPPAttributes = $this->Parent->PPP->Attributes->GetAsArray();
        $this->_PPP1Attributes = $this->Parent->PPP1->Attributes->GetAsArray();
        $this->_TotalSum_PPPAttributes = $this->Parent->TotalSum_PPP->Attributes->GetAsArray();
    }
    function SyncWithHeader(& $Header) {
        $Header->TotalSum_PPP = $this->TotalSum_PPP;
        $Header->_TotalSum_PPPAttributes = $this->_TotalSum_PPPAttributes;
        $this->Age = $Header->Age;
        $Header->_AgeAttributes = $this->_AgeAttributes;
        $this->Parent->Age->Value = $Header->Age;
        $this->Parent->Age->Attributes->RestoreFromArray($Header->_AgeAttributes);
        $this->PPP = $Header->PPP;
        $Header->_PPPAttributes = $this->_PPPAttributes;
        $this->Parent->PPP->Value = $Header->PPP;
        $this->Parent->PPP->Attributes->RestoreFromArray($Header->_PPPAttributes);
        $this->PPP1 = $Header->PPP1;
        $Header->_PPP1Attributes = $this->_PPP1Attributes;
        $this->Parent->PPP1->Value = $Header->PPP1;
        $this->Parent->PPP1->Attributes->RestoreFromArray($Header->_PPP1Attributes);
        $Header->PPP1551Rel = $this->PPP1551Rel;
    }
    function ChangeTotalControls() {
        $this->PPP1 = $this->Parent->PPP1->GetValue();
        $this->TotalSum_PPP = $this->Parent->TotalSum_PPP->GetValue();
    }
}
//End Report23 ReportGroup class

//Report23 GroupsCollection class @544-FB21719F
class clsGroupsCollectionReport23 {
    public $Groups;
    public $mPageCurrentHeaderIndex;
    public $PageSize;
    public $TotalPages = 0;
    public $TotalRows = 0;
    public $CurrentPageSize = 0;
    public $Pages;
    public $Parent;
    public $LastDetailIndex;

    function clsGroupsCollectionReport23(& $parent) {
        $this->Parent = & $parent;
        $this->Groups = array();
        $this->Pages  = array();
        $this->mReportTotalIndex = 0;
        $this->mPageTotalIndex = 1;
    }

    function & InitGroup() {
        $group = new clsReportGroupReport23($this->Parent);
        $group->RowNumber = $this->TotalRows + 1;
        $group->PageNumber = $this->TotalPages;
        $group->PageTotalIndex = $this->mPageCurrentHeaderIndex;
        return $group;
    }

    function RestoreValues() {
        $this->Parent->Age->Value = $this->Parent->Age->initialValue;
        $this->Parent->PPP->Value = $this->Parent->PPP->initialValue;
        $this->Parent->PPP1->Value = $this->Parent->PPP1->initialValue;
        $this->Parent->TotalSum_PPP->Value = $this->Parent->TotalSum_PPP->initialValue;
    }

    function OpenPage() {
        $this->TotalPages++;
        $Group = & $this->InitGroup();
        $this->Parent->Page_Header->CCSEventResult = CCGetEvent($this->Parent->Page_Header->CCSEvents, "OnInitialize", $this->Parent->Page_Header);
        if ($this->Parent->Page_Header->Visible)
            $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Page_Header->Height;
        $Group->SetTotalControls("GetNextValue");
        $this->Parent->Page_Header->CCSEventResult = CCGetEvent($this->Parent->Page_Header->CCSEvents, "OnCalculate", $this->Parent->Page_Header);
        $Group->SetControls();
        $Group->Mode = 1;
        $Group->GroupType = "Page";
        $Group->PageTotalIndex = count($this->Groups);
        $this->mPageCurrentHeaderIndex = count($this->Groups);
        $this->Groups[] =  & $Group;
        $this->Pages[] =  count($this->Groups) == 2 ? 0 : count($this->Groups) - 1;
    }

    function OpenGroup($groupName) {
        $Group = "";
        $OpenFlag = false;
        if ($groupName == "Report") {
            $Group = & $this->InitGroup(true);
            $this->Parent->Report_Header->CCSEventResult = CCGetEvent($this->Parent->Report_Header->CCSEvents, "OnInitialize", $this->Parent->Report_Header);
            if ($this->Parent->Report_Header->Visible) 
                $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Report_Header->Height;
                $Group->SetTotalControls("GetNextValue");
            $this->Parent->Report_Header->CCSEventResult = CCGetEvent($this->Parent->Report_Header->CCSEvents, "OnCalculate", $this->Parent->Report_Header);
            $Group->SetControls();
            $Group->Mode = 1;
            $Group->GroupType = "Report";
            $this->Groups[] = & $Group;
            $this->OpenPage();
        }
    }

    function ClosePage() {
        $Group = & $this->InitGroup();
        $this->Parent->Page_Footer->CCSEventResult = CCGetEvent($this->Parent->Page_Footer->CCSEvents, "OnInitialize", $this->Parent->Page_Footer);
        $Group->SetTotalControls("GetPrevValue");
        $Group->SyncWithHeader($this->Groups[$this->mPageCurrentHeaderIndex]);
        $this->Parent->Page_Footer->CCSEventResult = CCGetEvent($this->Parent->Page_Footer->CCSEvents, "OnCalculate", $this->Parent->Page_Footer);
        $Group->SetControls();
        $this->RestoreValues();
        $this->CurrentPageSize = 0;
        $Group->Mode = 2;
        $Group->GroupType = "Page";
        $this->Groups[] = & $Group;
    }

    function CloseGroup($groupName)
    {
        $Group = "";
        if ($groupName == "Report") {
            $Group = & $this->InitGroup(true);
            $this->Parent->Report_Footer->CCSEventResult = CCGetEvent($this->Parent->Report_Footer->CCSEvents, "OnInitialize", $this->Parent->Report_Footer);
            if ($this->Parent->Page_Footer->Visible) 
                $OverSize = $this->Parent->Report_Footer->Height + $this->Parent->Page_Footer->Height;
            else
                $OverSize = $this->Parent->Report_Footer->Height;
            if (($this->PageSize > 0) and $this->Parent->Report_Footer->Visible and ($this->CurrentPageSize + $OverSize > $this->PageSize)) {
                $this->ClosePage();
                $this->OpenPage();
            }
            $Group->SetTotalControls("GetPrevValue");
            $Group->SyncWithHeader($this->Groups[0]);
            if ($this->Parent->Report_Footer->Visible)
                $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Report_Footer->Height;
            $this->Parent->Report_Footer->CCSEventResult = CCGetEvent($this->Parent->Report_Footer->CCSEvents, "OnCalculate", $this->Parent->Report_Footer);
            $Group->SetControls();
            $this->RestoreValues();
            $Group->Mode = 2;
            $Group->GroupType = "Report";
            $this->Groups[] = & $Group;
            $this->ClosePage();
            return;
        }
    }

    function AddItem()
    {
        $Group = & $this->InitGroup(true);
        $this->Parent->Detail->CCSEventResult = CCGetEvent($this->Parent->Detail->CCSEvents, "OnInitialize", $this->Parent->Detail);
        if ($this->Parent->Page_Footer->Visible) 
            $OverSize = $this->Parent->Detail->Height + $this->Parent->Page_Footer->Height;
        else
            $OverSize = $this->Parent->Detail->Height;
        if (($this->PageSize > 0) and $this->Parent->Detail->Visible and ($this->CurrentPageSize + $OverSize > $this->PageSize)) {
            $this->ClosePage();
            $this->OpenPage();
        }
        $this->TotalRows++;
        if ($this->LastDetailIndex)
            $PrevGroup = & $this->Groups[$this->LastDetailIndex];
        else
            $PrevGroup = "";
        $Group->SetTotalControls("", $PrevGroup);
        if ($this->Parent->Detail->Visible)
            $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Detail->Height;
        $this->Parent->Detail->CCSEventResult = CCGetEvent($this->Parent->Detail->CCSEvents, "OnCalculate", $this->Parent->Detail);
        $Group->SetControls($PrevGroup);
        $this->LastDetailIndex = count($this->Groups);
        $this->Groups[] = & $Group;
    }
}
//End Report23 GroupsCollection class

class clsReportReport23 { //Report23 Class @544-CB81DCD6

//Report23 Variables @544-944D286E

    public $ComponentType = "Report";
    public $PageSize;
    public $ComponentName;
    public $Visible;
    public $Errors;
    public $CCSEvents = array();
    public $CCSEventResult;
    public $RelativePath = "";
    public $ViewMode = "Web";
    public $TemplateBlock;
    public $PageNumber;
    public $RowNumber;
    public $TotalRows;
    public $TotalPages;
    public $ControlsVisible = array();
    public $IsEmpty;
    public $Attributes;
    public $DetailBlock, $Detail;
    public $Report_FooterBlock, $Report_Footer;
    public $Report_HeaderBlock, $Report_Header;
    public $Page_FooterBlock, $Page_Footer;
    public $Page_HeaderBlock, $Page_Header;
    public $SorterName, $SorterDirection;

    public $ds;
    public $DataSource;
    public $UseClientPaging = false;

    //Report Controls
    public $StaticControls, $RowControls, $Report_FooterControls, $Report_HeaderControls;
    public $Page_FooterControls, $Page_HeaderControls;
//End Report23 Variables

//Class_Initialize Event @544-D35287FB
    function clsReportReport23($RelativePath = "", & $Parent)
    {
        global $FileName;
        global $CCSLocales;
        global $DefaultDateFormat;
        $this->ComponentName = "Report23";
        $this->Visible = True;
        $this->Parent = & $Parent;
        $this->RelativePath = $RelativePath;
        $this->Attributes = new clsAttributes($this->ComponentName . ":");
        $this->Detail = new clsSection($this);
        $MinPageSize = 0;
        $MaxSectionSize = 0;
        $this->Detail->Height = 1;
        $MaxSectionSize = max($MaxSectionSize, $this->Detail->Height);
        $this->Report_Footer = new clsSection($this);
        $this->Report_Footer->Height = 1;
        $MaxSectionSize = max($MaxSectionSize, $this->Report_Footer->Height);
        $this->Report_Header = new clsSection($this);
        $this->Page_Footer = new clsSection($this);
        $this->Page_Header = new clsSection($this);
        $this->Page_Header->Height = 1;
        $MinPageSize += $this->Page_Header->Height;
        $this->Errors = new clsErrors();
        $this->DataSource = new clsReport23DataSource($this);
        $this->ds = & $this->DataSource;
        $PageSize = CCGetParam($this->ComponentName . "PageSize", "");
        if(is_numeric($PageSize) && $PageSize > 0) {
            $this->PageSize = $PageSize;
        } else {
            if (!is_numeric($PageSize) || $PageSize < 0)
                $this->PageSize = 40;
             else if ($PageSize == "0")
                $this->PageSize = 100;
             else 
                $this->PageSize = min(100, $PageSize);
        }
        $MinPageSize += $MaxSectionSize;
        if ($this->PageSize && $MinPageSize && $this->PageSize < $MinPageSize)
            $this->PageSize = $MinPageSize;
        $this->PageNumber = $this->ViewMode == "Print" ? 1 : intval(CCGetParam($this->ComponentName . "Page", 1));
        if ($this->PageNumber <= 0 ) {
            $this->PageNumber = 1;
        }

        $this->Age = new clsControl(ccsReportLabel, "Age", "Age", ccsInteger, "", "", $this);
        $this->PPP = new clsControl(ccsReportLabel, "PPP", "PPP", ccsInteger, "", "", $this);
        $this->PPP1 = new clsControl(ccsReportLabel, "PPP1", "PPP1", ccsFloat, "", "", $this);
        $this->PPP1->IsPercent = true;
        $this->NoRecords = new clsPanel("NoRecords", $this);
        $this->TotalSum_PPP = new clsControl(ccsReportLabel, "TotalSum_PPP", "TotalSum_PPP", ccsInteger, "", "", $this);
        $this->TotalSum_PPP->TotalFunction = "Sum";
    }
//End Class_Initialize Event

//Initialize Method @544-6C59EE65
    function Initialize()
    {
        if(!$this->Visible) return;

        $this->DataSource->PageSize = $this->PageSize;
        $this->DataSource->AbsolutePage = $this->PageNumber;
        $this->DataSource->SetOrder($this->SorterName, $this->SorterDirection);
    }
//End Initialize Method

//CheckErrors Method @544-D653F1A4
    function CheckErrors()
    {
        $errors = false;
        $errors = ($errors || $this->Age->Errors->Count());
        $errors = ($errors || $this->PPP->Errors->Count());
        $errors = ($errors || $this->PPP1->Errors->Count());
        $errors = ($errors || $this->TotalSum_PPP->Errors->Count());
        $errors = ($errors || $this->Errors->Count());
        $errors = ($errors || $this->DataSource->Errors->Count());
        return $errors;
    }
//End CheckErrors Method

//GetErrors Method @544-97CC3284
    function GetErrors()
    {
        $errors = "";
        $errors = ComposeStrings($errors, $this->Age->Errors->ToString());
        $errors = ComposeStrings($errors, $this->PPP->Errors->ToString());
        $errors = ComposeStrings($errors, $this->PPP1->Errors->ToString());
        $errors = ComposeStrings($errors, $this->TotalSum_PPP->Errors->ToString());
        $errors = ComposeStrings($errors, $this->Errors->ToString());
        $errors = ComposeStrings($errors, $this->DataSource->Errors->ToString());
        return $errors;
    }
//End GetErrors Method

//Show Method @544-558D0D31
    function Show()
    {
        global $Tpl;
        global $CCSLocales;
        if(!$this->Visible) return;

        $ShownRecords = 0;

        $this->DataSource->Parameters["urls_PregRegDateTo"] = CCGetFromGet("s_PregRegDateTo", NULL);
        $this->DataSource->Parameters["urls_PregRegDate"] = CCGetFromGet("s_PregRegDate", NULL);
        $this->DataSource->Parameters["urls_FacilityName"] = CCGetFromGet("s_FacilityName", NULL);

        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeSelect", $this);


        $this->DataSource->Prepare();
        $this->DataSource->Open();

        $Groups = new clsGroupsCollectionReport23($this);
        $Groups->PageSize = $this->PageSize > 0 ? $this->PageSize : 0;

        $is_next_record = $this->DataSource->next_record();
        $this->IsEmpty = ! $is_next_record;
        while($is_next_record) {
            $this->DataSource->SetValues();
            $this->Age->SetValue($this->DataSource->Age->GetValue());
            $this->PPP->SetValue($this->DataSource->PPP->GetValue());
            $this->PPP1->SetValue($this->DataSource->PPP1->GetValue());
            $this->TotalSum_PPP->SetValue($this->DataSource->TotalSum_PPP->GetValue());
            if (count($Groups->Groups) == 0) $Groups->OpenGroup("Report");
            $Groups->AddItem();
            $is_next_record = $this->DataSource->next_record();
        }
        if (!count($Groups->Groups)) 
            $Groups->OpenGroup("Report");
        else
            $this->NoRecords->Visible = false;
        $Groups->CloseGroup("Report");
        $this->TotalPages = $Groups->TotalPages;
        $this->TotalRows = $Groups->TotalRows;

        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeShow", $this);
        if(!$this->Visible) return;

        $this->Attributes->Show();
        $ReportBlock = "Report " . $this->ComponentName;
        $ParentPath = $Tpl->block_path;
        $Tpl->block_path = $ParentPath . "/" . $ReportBlock;

        if($this->CheckErrors()) {
            $Tpl->replaceblock("", $this->GetErrors());
            $Tpl->block_path = $ParentPath;
            return;
        } else {
            $items = & $Groups->Groups;
            $i = $Groups->Pages[min($this->PageNumber, $Groups->TotalPages) - 1];
            $this->ControlsVisible["Age"] = $this->Age->Visible;
            $this->ControlsVisible["PPP"] = $this->PPP->Visible;
            $this->ControlsVisible["PPP1"] = $this->PPP1->Visible;
            do {
                $this->Attributes->RestoreFromArray($items[$i]->Attributes);
                $this->RowNumber = $items[$i]->RowNumber;
                switch ($items[$i]->GroupType) {
                    Case "":
                        $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Detail";
                        $this->Age->SetValue($items[$i]->Age);
                        $this->Age->Attributes->RestoreFromArray($items[$i]->_AgeAttributes);
                        $this->PPP->SetValue($items[$i]->PPP);
                        $this->PPP->Attributes->RestoreFromArray($items[$i]->_PPPAttributes);
                        $this->PPP1->SetValue($items[$items[$i]->ReportTotalIndex]->PPP1551Rel && strval($items[$i]->PPP1) != "" ? $items[$i]->PPP1 / $items[$items[$i]->ReportTotalIndex]->PPP1551Rel : "");
                        $this->PPP1->Attributes->RestoreFromArray($items[$i]->_PPP1Attributes);
                        $this->Detail->CCSEventResult = CCGetEvent($this->Detail->CCSEvents, "BeforeShow", $this->Detail);
                        $this->Attributes->Show();
                        $this->Age->Show();
                        $this->PPP->Show();
                        $this->PPP1->Show();
                        $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                        if ($this->Detail->Visible)
                            $Tpl->parseto("Section Detail", true, "Section Detail");
                        break;
                    case "Report":
                        if ($items[$i]->Mode == 1) {
                            $this->Report_Header->CCSEventResult = CCGetEvent($this->Report_Header->CCSEvents, "BeforeShow", $this->Report_Header);
                            if ($this->Report_Header->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Report_Header";
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Report_Header", true, "Section Detail");
                            }
                        }
                        if ($items[$i]->Mode == 2) {
                            $this->TotalSum_PPP->SetValue($items[$i]->TotalSum_PPP);
                            $this->TotalSum_PPP->Attributes->RestoreFromArray($items[$i]->_TotalSum_PPPAttributes);
                            $this->Report_Footer->CCSEventResult = CCGetEvent($this->Report_Footer->CCSEvents, "BeforeShow", $this->Report_Footer);
                            if ($this->Report_Footer->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Report_Footer";
                                $this->NoRecords->Show();
                                $this->TotalSum_PPP->Show();
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Report_Footer", true, "Section Detail");
                            }
                        }
                        break;
                    case "Page":
                        if ($items[$i]->Mode == 1) {
                            $this->Page_Header->CCSEventResult = CCGetEvent($this->Page_Header->CCSEvents, "BeforeShow", $this->Page_Header);
                            if ($this->Page_Header->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Page_Header";
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Page_Header", true, "Section Detail");
                            }
                        }
                        if ($items[$i]->Mode == 2 && !$this->UseClientPaging || $items[$i]->Mode == 1 && $this->UseClientPaging) {
                            $this->Page_Footer->CCSEventResult = CCGetEvent($this->Page_Footer->CCSEvents, "BeforeShow", $this->Page_Footer);
                            if ($this->Page_Footer->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Page_Footer";
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Page_Footer", true, "Section Detail");
                            }
                        }
                        break;
                }
                $i++;
            } while ($i < count($items) && ($this->ViewMode == "Print" ||  !($i > 1 && $items[$i]->GroupType == 'Page' && $items[$i]->Mode == 1)));
            $Tpl->block_path = $ParentPath;
            $Tpl->parse($ReportBlock);
            $this->DataSource->close();
        }

    }
//End Show Method

} //End Report23 Class @544-FCB6E20C

class clsReport23DataSource extends clsDBregistry_db {  //Report23DataSource Class @544-18C43CC6

//DataSource Variables @544-5F8FFDD4
    public $Parent = "";
    public $CCSEvents = "";
    public $CCSEventResult;
    public $ErrorBlock;
    public $CmdExecution;

    public $wp;


    // Datasource fields
    public $Age;
    public $PPP;
    public $PPP1;
    public $TotalSum_PPP;
//End DataSource Variables

//DataSourceClass_Initialize Event @544-9CB24602
    function clsReport23DataSource(& $Parent)
    {
        $this->Parent = & $Parent;
        $this->ErrorBlock = "Report Report23";
        $this->Initialize();
        $this->Age = new clsField("Age", ccsInteger, "");
        
        $this->PPP = new clsField("PPP", ccsInteger, "");
        
        $this->PPP1 = new clsField("PPP1", ccsFloat, "");
        
        $this->TotalSum_PPP = new clsField("TotalSum_PPP", ccsInteger, "");
        

    }
//End DataSourceClass_Initialize Event

//SetOrder Method @544-9E1383D1
    function SetOrder($SorterName, $SorterDirection)
    {
        $this->Order = "";
        $this->Order = CCGetOrder($this->Order, $SorterName, $SorterDirection, 
            "");
    }
//End SetOrder Method

//Prepare Method @544-DB9373EF
    function Prepare()
    {
        global $CCSLocales;
        global $DefaultDateFormat;
        $this->wp = new clsSQLParameters($this->ErrorBlock);
        $this->wp->AddParameter("1", "urls_PregRegDateTo", ccsDate, array("ShortDate"), array("yyyy", "-", "mm", "-", "dd", " ", "HH", ":", "nn", ":", "ss"), $this->Parameters["urls_PregRegDateTo"], CCFormatDate(CCParseDate("2999-01-01",array("yyyy","-","mm","-","dd")),array("ShortDate")), false);
        $this->wp->AddParameter("2", "urls_PregRegDate", ccsDate, array("ShortDate"), array("yyyy", "-", "mm", "-", "dd", " ", "HH", ":", "nn", ":", "ss"), $this->Parameters["urls_PregRegDate"], CCFormatDate(CCParseDate("1000-01-01",array("yyyy","-","mm","-","dd")),array("ShortDate")), false);
        $this->wp->AddParameter("3", "urls_FacilityName", ccsText, "", "", $this->Parameters["urls_FacilityName"], "", false);
    }
//End Prepare Method

//Open Method @544-8BBCC78A
    function Open()
    {
        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeBuildSelect", $this->Parent);
        $this->SQL = "SELECT 0 AS Age, COUNT(DISTINCT pregnancy.PregnancyID) AS PPP \n" .
        "FROM (((pregnancy INNER JOIN visit ON\n" .
        "visit.PregnancyID = pregnancy.PregnancyID) INNER JOIN test ON\n" .
        "test.VisitID = visit.VisitID) LEFT JOIN delivery ON\n" .
        "delivery.PregnancyID = pregnancy.PregnancyID) LEFT JOIN facilities ON\n" .
        "pregnancy.FacilityID = facilities.FacilityID \n" .
        "WHERE test.TestCodeID = 1 AND test.TestResultNormal = 0 \n" .
        "AND ((delivery.PregnancyOutcome1ID>0 AND delivery.PregnancyOutcome1ID<3)\n" .
        "OR (delivery.PregnancyOutcome2ID>0 AND delivery.PregnancyOutcome2ID<3)\n" .
        "OR (delivery.PregnancyOutcome3ID>0 AND delivery.PregnancyOutcome3ID<3))\n" .
        "AND delivery.DataDelivery >= '" . $this->SQLValue($this->wp->GetDBValue("2"), ccsDate) . "'\n" .
        "AND delivery.DataDelivery <= '" . $this->SQLValue($this->wp->GetDBValue("1"), ccsDate) . "'\n" .
        "AND facilities.FacilityName LIKE '%" . $this->SQLValue($this->wp->GetDBValue("3"), ccsText) . "%'\n" .
        "\n" .
        "\n" .
        "\n" .
        "UNION\n" .
        "\n" .
        "SELECT 1 AS Age,(\n" .
        "(SELECT COUNT(DISTINCT pregnancy.PregnancyID) AS PPP\n" .
        "FROM (((pregnancy LEFT JOIN visit ON\n" .
        "visit.PregnancyID = pregnancy.PregnancyID) LEFT JOIN test ON\n" .
        "test.VisitID = visit.VisitID) LEFT JOIN delivery ON\n" .
        "delivery.PregnancyID = pregnancy.PregnancyID) LEFT JOIN facilities ON\n" .
        "pregnancy.FacilityID = facilities.FacilityID \n" .
        "WHERE \n" .
        "((delivery.PregnancyOutcome1ID>0 AND delivery.PregnancyOutcome1ID<3)\n" .
        "OR (delivery.PregnancyOutcome2ID>0 AND delivery.PregnancyOutcome2ID<3)\n" .
        "OR (delivery.PregnancyOutcome3ID>0 AND delivery.PregnancyOutcome3ID<3))\n" .
        "AND delivery.DataDelivery >= '" . $this->SQLValue($this->wp->GetDBValue("2"), ccsDate) . "'\n" .
        "AND delivery.DataDelivery <= '" . $this->SQLValue($this->wp->GetDBValue("1"), ccsDate) . "'\n" .
        "AND facilities.FacilityName LIKE '%" . $this->SQLValue($this->wp->GetDBValue("3"), ccsText) . "%'\n" .
        "\n" .
        ") \n" .
        "- \n" .
        "(SELECT COUNT(DISTINCT pregnancy.PregnancyID) AS PPP \n" .
        "FROM (((pregnancy INNER JOIN visit ON\n" .
        "visit.PregnancyID = pregnancy.PregnancyID) INNER JOIN test ON\n" .
        "test.VisitID = visit.VisitID) LEFT JOIN delivery ON\n" .
        "delivery.PregnancyID = pregnancy.PregnancyID) LEFT JOIN facilities ON\n" .
        "pregnancy.FacilityID = facilities.FacilityID \n" .
        "WHERE test.TestCodeID = 1 AND test.TestResultNormal = 0 \n" .
        "AND ((delivery.PregnancyOutcome1ID>0 AND delivery.PregnancyOutcome1ID<3)\n" .
        "OR (delivery.PregnancyOutcome2ID>0 AND delivery.PregnancyOutcome2ID<3)\n" .
        "OR (delivery.PregnancyOutcome3ID>0 AND delivery.PregnancyOutcome3ID<3))\n" .
        "AND delivery.DataDelivery >= '" . $this->SQLValue($this->wp->GetDBValue("2"), ccsDate) . "'\n" .
        "AND delivery.DataDelivery <= '" . $this->SQLValue($this->wp->GetDBValue("1"), ccsDate) . "'\n" .
        "AND facilities.FacilityName LIKE '%" . $this->SQLValue($this->wp->GetDBValue("3"), ccsText) . "%'\n" .
        "\n" .
        ")\n" .
        ")";
        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeExecuteSelect", $this->Parent);
        $this->query(CCBuildSQL($this->SQL, $this->Where, $this->Order));
        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "AfterExecuteSelect", $this->Parent);
    }
//End Open Method

//SetValues Method @544-41F3EDE3
    function SetValues()
    {
        $this->Age->SetDBValue(trim($this->f("Age")));
        $this->PPP->SetDBValue(trim($this->f("PPP")));
        $this->PPP1->SetDBValue(trim($this->f("PPP")));
        $this->TotalSum_PPP->SetDBValue(trim($this->f("PPP")));
    }
//End SetValues Method

} //End Report23DataSource Class @544-FCB6E20C

//Initialize Page @1-9358A7B0
// Variables
$FileName = "";
$Redirect = "";
$Tpl = "";
$TemplateFileName = "";
$BlockToParse = "";
$ComponentName = "";
$Attributes = "";

// Events;
$CCSEvents = "";
$CCSEventResult = "";

$FileName = FileName;
$Redirect = "";
$TemplateFileName = "report_f21_district.html";
$BlockToParse = "main";
$TemplateEncoding = "UTF-8";
$ContentType = "text/html";
$PathToRoot = "./";
$Charset = $Charset ? $Charset : "utf-8";
//End Initialize Page

//Authenticate User @1-4DB1C155
CCSecurityRedirect("1;2", "noaccess.php");
//End Authenticate User

//Include events file @1-F24EBFD3
include_once("./report_f21_district_events.php");
//End Include events file

//Before Initialize @1-E870CEBC
$CCSEventResult = CCGetEvent($CCSEvents, "BeforeInitialize", $MainPage);
//End Before Initialize

//Initialize Objects @1-77CF97C0
$DBregistry_db = new clsDBregistry_db();
$MainPage->Connections["registry_db"] = & $DBregistry_db;
$Attributes = new clsAttributes("page:");
$MainPage->Attributes = & $Attributes;

// Controls
$topmenu = new clstopmenu("", "topmenu", $MainPage);
$topmenu->Initialize();
$pregnancySearch = new clsRecordpregnancySearch("", $MainPage);
$Report_Print = new clsControl(ccsLink, "Report_Print", "Report_Print", ccsText, "", CCGetRequestParam("Report_Print", ccsGet, NULL), $MainPage);
$Report_Print->Page = "report_f21_district.php";
$pregnancy1 = new clsReportpregnancy1("", $MainPage);
$Report1 = new clsReportReport1("", $MainPage);
$Report3 = new clsReportReport3("", $MainPage);
$Report4 = new clsReportReport4("", $MainPage);
$Report5 = new clsReportReport5("", $MainPage);
$Report2 = new clsReportReport2("", $MainPage);
$Report6 = new clsReportReport6("", $MainPage);
$Report7 = new clsReportReport7("", $MainPage);
$Report8 = new clsReportReport8("", $MainPage);
$Report9 = new clsReportReport9("", $MainPage);
$Report10 = new clsReportReport10("", $MainPage);
$Report11 = new clsReportReport11("", $MainPage);
$Report22 = new clsReportReport22("", $MainPage);
$Report23 = new clsReportReport23("", $MainPage);
$MainPage->topmenu = & $topmenu;
$MainPage->pregnancySearch = & $pregnancySearch;
$MainPage->Report_Print = & $Report_Print;
$MainPage->pregnancy1 = & $pregnancy1;
$MainPage->Report1 = & $Report1;
$MainPage->Report3 = & $Report3;
$MainPage->Report4 = & $Report4;
$MainPage->Report5 = & $Report5;
$MainPage->Report2 = & $Report2;
$MainPage->Report6 = & $Report6;
$MainPage->Report7 = & $Report7;
$MainPage->Report8 = & $Report8;
$MainPage->Report9 = & $Report9;
$MainPage->Report10 = & $Report10;
$MainPage->Report11 = & $Report11;
$MainPage->Report22 = & $Report22;
$MainPage->Report23 = & $Report23;
$Report_Print->Parameters = CCGetQueryString("QueryString", array("ccsForm"));
$Report_Print->Parameters = CCAddParam($Report_Print->Parameters, "ViewMode", "Print");
$pregnancy1->Initialize();
$Report1->Initialize();
$Report3->Initialize();
$Report4->Initialize();
$Report5->Initialize();
$Report2->Initialize();
$Report6->Initialize();
$Report7->Initialize();
$Report8->Initialize();
$Report9->Initialize();
$Report10->Initialize();
$Report11->Initialize();
$Report22->Initialize();
$Report23->Initialize();

BindEvents();

$CCSEventResult = CCGetEvent($CCSEvents, "AfterInitialize", $MainPage);

if ($Charset) {
    header("Content-Type: " . $ContentType . "; charset=" . $Charset);
} else {
    header("Content-Type: " . $ContentType);
}
//End Initialize Objects

//Initialize HTML Template @1-A06E9207
$CCSEventResult = CCGetEvent($CCSEvents, "OnInitializeView", $MainPage);
$Tpl = new clsTemplate($FileEncoding, $TemplateEncoding);
$Tpl->LoadTemplate(PathToCurrentPage . $TemplateFileName, $BlockToParse, "UTF-8", "replace");
$Tpl->block_path = "/$BlockToParse";
$CCSEventResult = CCGetEvent($CCSEvents, "BeforeShow", $MainPage);
$Attributes->SetValue("pathToRoot", "");
$Attributes->Show();
//End Initialize HTML Template

//Execute Components @1-16012FCF
$topmenu->Operations();
$pregnancySearch->Operation();
//End Execute Components

//Go to destination page @1-B4DFDD27
if($Redirect)
{
    $CCSEventResult = CCGetEvent($CCSEvents, "BeforeUnload", $MainPage);
    $DBregistry_db->close();
    header("Location: " . $Redirect);
    $topmenu->Class_Terminate();
    unset($topmenu);
    unset($pregnancySearch);
    unset($pregnancy1);
    unset($Report1);
    unset($Report3);
    unset($Report4);
    unset($Report5);
    unset($Report2);
    unset($Report6);
    unset($Report7);
    unset($Report8);
    unset($Report9);
    unset($Report10);
    unset($Report11);
    unset($Report22);
    unset($Report23);
    unset($Tpl);
    exit;
}
//End Go to destination page

//Show Page @1-70FD3555
$topmenu->Show();
$pregnancySearch->Show();
$pregnancy1->Show();
$Report1->Show();
$Report3->Show();
$Report4->Show();
$Report5->Show();
$Report2->Show();
$Report6->Show();
$Report7->Show();
$Report8->Show();
$Report9->Show();
$Report10->Show();
$Report11->Show();
$Report22->Show();
$Report23->Show();
$Report_Print->Show();
$Tpl->block_path = "";
$Tpl->Parse($BlockToParse, false);
if (!isset($main_block)) $main_block = $Tpl->GetVar($BlockToParse);
$CCSEventResult = CCGetEvent($CCSEvents, "BeforeOutput", $MainPage);
if ($CCSEventResult) echo $main_block;
//End Show Page

//Unload Page @1-3BD562CE
$CCSEventResult = CCGetEvent($CCSEvents, "BeforeUnload", $MainPage);
$DBregistry_db->close();
$topmenu->Class_Terminate();
unset($topmenu);
unset($pregnancySearch);
unset($pregnancy1);
unset($Report1);
unset($Report3);
unset($Report4);
unset($Report5);
unset($Report2);
unset($Report6);
unset($Report7);
unset($Report8);
unset($Report9);
unset($Report10);
unset($Report11);
unset($Report22);
unset($Report23);
unset($Tpl);
//End Unload Page


?>
