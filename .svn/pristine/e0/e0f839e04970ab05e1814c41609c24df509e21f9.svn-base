<?php
//Include Common Files @1-D14FE612
define("RelativePath", ".");
define("PathToCurrentPage", "/");
define("FileName", "report_died_before_labor.php");
include_once(RelativePath . "/Common.php");
include_once(RelativePath . "/Template.php");
include_once(RelativePath . "/Sorter.php");
include_once(RelativePath . "/Navigator.php");
//End Include Common Files

//Include Page implementation @2-203FAEA1
include_once(RelativePath . "/topmenu.php");
//End Include Page implementation

//NewBorn27 ReportGroup class @3-B2DED8EA
class clsReportGroupNewBorn27 {
    public $GroupType;
    public $mode; //1 - open, 2 - close
    public $Report_TotalRecords, $_Report_TotalRecordsAttributes;
    public $GroupSex, $_GroupSexAttributes;
    public $CountGroupSex, $_CountGroupSexAttributes;
    public $Attributes;
    public $ReportTotalIndex = 0;
    public $PageTotalIndex;
    public $PageNumber;
    public $RowNumber;
    public $Parent;
    public $SexTotalIndex;

    function clsReportGroupNewBorn27(& $parent) {
        $this->Parent = & $parent;
        $this->Attributes = $this->Parent->Attributes->GetAsArray();
    }
    function SetControls($PrevGroup = "") {
        $this->GroupSex = $this->Parent->GroupSex->Value;
    }

    function SetTotalControls($mode = "", $PrevGroup = "") {
        $this->Report_TotalRecords = $this->Parent->Report_TotalRecords->GetTotalValue($mode);
        $this->CountGroupSex = $this->Parent->CountGroupSex->GetTotalValue($mode);
        $this->_Report_TotalRecordsAttributes = $this->Parent->Report_TotalRecords->Attributes->GetAsArray();
        $this->_GroupSexAttributes = $this->Parent->GroupSex->Attributes->GetAsArray();
        $this->_CountGroupSexAttributes = $this->Parent->CountGroupSex->Attributes->GetAsArray();
    }
    function SyncWithHeader(& $Header) {
        $Header->Report_TotalRecords = $this->Report_TotalRecords;
        $Header->_Report_TotalRecordsAttributes = $this->_Report_TotalRecordsAttributes;
        $Header->CountGroupSex = $this->CountGroupSex;
        $Header->_CountGroupSexAttributes = $this->_CountGroupSexAttributes;
        $this->GroupSex = $Header->GroupSex;
        $Header->_GroupSexAttributes = $this->_GroupSexAttributes;
        $this->Parent->GroupSex->Value = $Header->GroupSex;
        $this->Parent->GroupSex->Attributes->RestoreFromArray($Header->_GroupSexAttributes);
    }
    function ChangeTotalControls() {
        $this->Report_TotalRecords = $this->Parent->Report_TotalRecords->GetValue();
        $this->CountGroupSex = $this->Parent->CountGroupSex->GetValue();
    }
}
//End NewBorn27 ReportGroup class

//NewBorn27 GroupsCollection class @3-DC765408
class clsGroupsCollectionNewBorn27 {
    public $Groups;
    public $mPageCurrentHeaderIndex;
    public $mSexCurrentHeaderIndex;
    public $PageSize;
    public $TotalPages = 0;
    public $TotalRows = 0;
    public $CurrentPageSize = 0;
    public $Pages;
    public $Parent;
    public $LastDetailIndex;

    function clsGroupsCollectionNewBorn27(& $parent) {
        $this->Parent = & $parent;
        $this->Groups = array();
        $this->Pages  = array();
        $this->mSexCurrentHeaderIndex = 1;
        $this->mReportTotalIndex = 0;
        $this->mPageTotalIndex = 1;
    }

    function & InitGroup() {
        $group = new clsReportGroupNewBorn27($this->Parent);
        $group->RowNumber = $this->TotalRows + 1;
        $group->PageNumber = $this->TotalPages;
        $group->PageTotalIndex = $this->mPageCurrentHeaderIndex;
        $group->SexTotalIndex = $this->mSexCurrentHeaderIndex;
        return $group;
    }

    function RestoreValues() {
        $this->Parent->Report_TotalRecords->Value = $this->Parent->Report_TotalRecords->initialValue;
        $this->Parent->GroupSex->Value = $this->Parent->GroupSex->initialValue;
        $this->Parent->CountGroupSex->Value = $this->Parent->CountGroupSex->initialValue;
    }

    function OpenPage() {
        $this->TotalPages++;
        $Group = & $this->InitGroup();
        $this->Parent->Page_Header->CCSEventResult = CCGetEvent($this->Parent->Page_Header->CCSEvents, "OnInitialize", $this->Parent->Page_Header);
        if ($this->Parent->Page_Header->Visible)
            $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Page_Header->Height;
        $Group->SetTotalControls("GetNextValue");
        $this->Parent->Page_Header->CCSEventResult = CCGetEvent($this->Parent->Page_Header->CCSEvents, "OnCalculate", $this->Parent->Page_Header);
        $Group->SetControls();
        $Group->Mode = 1;
        $Group->GroupType = "Page";
        $Group->PageTotalIndex = count($this->Groups);
        $this->mPageCurrentHeaderIndex = count($this->Groups);
        $this->Groups[] =  & $Group;
        $this->Pages[] =  count($this->Groups) == 2 ? 0 : count($this->Groups) - 1;
    }

    function OpenGroup($groupName) {
        $Group = "";
        $OpenFlag = false;
        if ($groupName == "Report") {
            $Group = & $this->InitGroup(true);
            $this->Parent->Report_Header->CCSEventResult = CCGetEvent($this->Parent->Report_Header->CCSEvents, "OnInitialize", $this->Parent->Report_Header);
            if ($this->Parent->Report_Header->Visible) 
                $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Report_Header->Height;
                $Group->SetTotalControls("GetNextValue");
            $this->Parent->Report_Header->CCSEventResult = CCGetEvent($this->Parent->Report_Header->CCSEvents, "OnCalculate", $this->Parent->Report_Header);
            $Group->SetControls();
            $Group->Mode = 1;
            $Group->GroupType = "Report";
            $this->Groups[] = & $Group;
            $this->OpenPage();
        }
        if ($groupName == "Sex") {
            $GroupSex = & $this->InitGroup(true);
            $this->Parent->Sex_Header->CCSEventResult = CCGetEvent($this->Parent->Sex_Header->CCSEvents, "OnInitialize", $this->Parent->Sex_Header);
            if ($this->Parent->Page_Footer->Visible) 
                $OverSize = $this->Parent->Sex_Header->Height + $this->Parent->Page_Footer->Height;
            else
                $OverSize = $this->Parent->Sex_Header->Height;
            if (($this->PageSize > 0) and $this->Parent->Sex_Header->Visible and ($this->CurrentPageSize + $OverSize > $this->PageSize)) {
                $this->ClosePage();
                $this->OpenPage();
            }
            if ($this->Parent->Sex_Header->Visible)
                $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Sex_Header->Height;
                $GroupSex->SetTotalControls("GetNextValue");
            $this->Parent->Sex_Header->CCSEventResult = CCGetEvent($this->Parent->Sex_Header->CCSEvents, "OnCalculate", $this->Parent->Sex_Header);
            $GroupSex->SetControls();
            $GroupSex->Mode = 1;
            $GroupSex->GroupType = "Sex";
            $this->mSexCurrentHeaderIndex = count($this->Groups);
            $this->Groups[] = & $GroupSex;
            $this->Parent->CountGroupSex->Reset();
        }
    }

    function ClosePage() {
        $Group = & $this->InitGroup();
        $this->Parent->Page_Footer->CCSEventResult = CCGetEvent($this->Parent->Page_Footer->CCSEvents, "OnInitialize", $this->Parent->Page_Footer);
        $Group->SetTotalControls("GetPrevValue");
        $Group->SyncWithHeader($this->Groups[$this->mPageCurrentHeaderIndex]);
        $this->Parent->Page_Footer->CCSEventResult = CCGetEvent($this->Parent->Page_Footer->CCSEvents, "OnCalculate", $this->Parent->Page_Footer);
        $Group->SetControls();
        $this->RestoreValues();
        $this->CurrentPageSize = 0;
        $Group->Mode = 2;
        $Group->GroupType = "Page";
        $this->Groups[] = & $Group;
    }

    function CloseGroup($groupName)
    {
        $Group = "";
        if ($groupName == "Report") {
            $Group = & $this->InitGroup(true);
            $this->Parent->Report_Footer->CCSEventResult = CCGetEvent($this->Parent->Report_Footer->CCSEvents, "OnInitialize", $this->Parent->Report_Footer);
            if ($this->Parent->Page_Footer->Visible) 
                $OverSize = $this->Parent->Report_Footer->Height + $this->Parent->Page_Footer->Height;
            else
                $OverSize = $this->Parent->Report_Footer->Height;
            if (($this->PageSize > 0) and $this->Parent->Report_Footer->Visible and ($this->CurrentPageSize + $OverSize > $this->PageSize)) {
                $this->ClosePage();
                $this->OpenPage();
            }
            $Group->SetTotalControls("GetPrevValue");
            $Group->SyncWithHeader($this->Groups[0]);
            if ($this->Parent->Report_Footer->Visible)
                $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Report_Footer->Height;
            $this->Parent->Report_Footer->CCSEventResult = CCGetEvent($this->Parent->Report_Footer->CCSEvents, "OnCalculate", $this->Parent->Report_Footer);
            $Group->SetControls();
            $this->RestoreValues();
            $Group->Mode = 2;
            $Group->GroupType = "Report";
            $this->Groups[] = & $Group;
            $this->ClosePage();
            return;
        }
        $GroupSex = & $this->InitGroup(true);
        $this->Parent->Sex_Footer->CCSEventResult = CCGetEvent($this->Parent->Sex_Footer->CCSEvents, "OnInitialize", $this->Parent->Sex_Footer);
        if ($this->Parent->Page_Footer->Visible) 
            $OverSize = $this->Parent->Sex_Footer->Height + $this->Parent->Page_Footer->Height;
        else
            $OverSize = $this->Parent->Sex_Footer->Height;
        if (($this->PageSize > 0) and $this->Parent->Sex_Footer->Visible and ($this->CurrentPageSize + $OverSize > $this->PageSize)) {
            $this->ClosePage();
            $this->OpenPage();
        }
        $GroupSex->SetTotalControls("GetPrevValue");
        $GroupSex->SyncWithHeader($this->Groups[$this->mSexCurrentHeaderIndex]);
        if ($this->Parent->Sex_Footer->Visible)
            $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Sex_Footer->Height;
        $this->Parent->Sex_Footer->CCSEventResult = CCGetEvent($this->Parent->Sex_Footer->CCSEvents, "OnCalculate", $this->Parent->Sex_Footer);
        $GroupSex->SetControls();
        $this->Parent->CountGroupSex->Reset();
        $this->RestoreValues();
        $GroupSex->Mode = 2;
        $GroupSex->GroupType ="Sex";
        $this->Groups[] = & $GroupSex;
    }

    function AddItem()
    {
        $Group = & $this->InitGroup(true);
        $this->Parent->Detail->CCSEventResult = CCGetEvent($this->Parent->Detail->CCSEvents, "OnInitialize", $this->Parent->Detail);
        if ($this->Parent->Page_Footer->Visible) 
            $OverSize = $this->Parent->Detail->Height + $this->Parent->Page_Footer->Height;
        else
            $OverSize = $this->Parent->Detail->Height;
        if (($this->PageSize > 0) and $this->Parent->Detail->Visible and ($this->CurrentPageSize + $OverSize > $this->PageSize)) {
            $this->ClosePage();
            $this->OpenPage();
        }
        $this->TotalRows++;
        if ($this->LastDetailIndex)
            $PrevGroup = & $this->Groups[$this->LastDetailIndex];
        else
            $PrevGroup = "";
        $Group->SetTotalControls("", $PrevGroup);
        if ($this->Parent->Detail->Visible)
            $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Detail->Height;
        $this->Parent->Detail->CCSEventResult = CCGetEvent($this->Parent->Detail->CCSEvents, "OnCalculate", $this->Parent->Detail);
        $Group->SetControls($PrevGroup);
        $this->LastDetailIndex = count($this->Groups);
        $this->Groups[] = & $Group;
    }
}
//End NewBorn27 GroupsCollection class

class clsReportNewBorn27 { //NewBorn27 Class @3-0F4EBFE6

//NewBorn27 Variables @3-80D63D80

    public $ComponentType = "Report";
    public $PageSize;
    public $ComponentName;
    public $Visible;
    public $Errors;
    public $CCSEvents = array();
    public $CCSEventResult;
    public $RelativePath = "";
    public $ViewMode = "Web";
    public $TemplateBlock;
    public $PageNumber;
    public $RowNumber;
    public $TotalRows;
    public $TotalPages;
    public $ControlsVisible = array();
    public $IsEmpty;
    public $Attributes;
    public $DetailBlock, $Detail;
    public $Report_FooterBlock, $Report_Footer;
    public $Report_HeaderBlock, $Report_Header;
    public $Page_FooterBlock, $Page_Footer;
    public $Page_HeaderBlock, $Page_Header;
    public $Sex_HeaderBlock, $Sex_Header;
    public $Sex_FooterBlock, $Sex_Footer;
    public $SorterName, $SorterDirection;

    public $ds;
    public $DataSource;
    public $UseClientPaging = false;

    //Report Controls
    public $StaticControls, $RowControls, $Report_FooterControls, $Report_HeaderControls;
    public $Page_FooterControls, $Page_HeaderControls;
    public $Sex_HeaderControls, $Sex_FooterControls;
//End NewBorn27 Variables

//Class_Initialize Event @3-8FFFF3D7
    function clsReportNewBorn27($RelativePath = "", & $Parent)
    {
        global $FileName;
        global $CCSLocales;
        global $DefaultDateFormat;
        $this->ComponentName = "NewBorn27";
        $this->Visible = True;
        $this->Parent = & $Parent;
        $this->RelativePath = $RelativePath;
        $this->Attributes = new clsAttributes($this->ComponentName . ":");
        $this->Detail = new clsSection($this);
        $MinPageSize = 0;
        $MaxSectionSize = 0;
        $this->Detail->Height = 1;
        $MaxSectionSize = max($MaxSectionSize, $this->Detail->Height);
        $this->Report_Footer = new clsSection($this);
        $this->Report_Header = new clsSection($this);
        $this->Page_Footer = new clsSection($this);
        $this->Page_Footer->Height = 1;
        $MinPageSize += $this->Page_Footer->Height;
        $this->Page_Header = new clsSection($this);
        $this->Page_Header->Height = 1;
        $MinPageSize += $this->Page_Header->Height;
        $this->Sex_Footer = new clsSection($this);
        $this->Sex_Footer->Height = 1;
        $MaxSectionSize = max($MaxSectionSize, $this->Sex_Footer->Height);
        $this->Sex_Header = new clsSection($this);
        $this->Sex_Header->Height = 1;
        $MaxSectionSize = max($MaxSectionSize, $this->Sex_Header->Height);
        $this->Errors = new clsErrors();
        $this->DataSource = new clsNewBorn27DataSource($this);
        $this->ds = & $this->DataSource;
        $PageSize = CCGetParam($this->ComponentName . "PageSize", "");
        if(is_numeric($PageSize) && $PageSize > 0) {
            $this->PageSize = $PageSize;
        } else {
            if (!is_numeric($PageSize) || $PageSize < 0)
                $this->PageSize = 0;
             else if ($PageSize == "0")
                $this->PageSize = 0;
             else 
                $this->PageSize = $PageSize;
        }
        $MinPageSize += $MaxSectionSize;
        if ($this->PageSize && $MinPageSize && $this->PageSize < $MinPageSize)
            $this->PageSize = $MinPageSize;
        $this->PageNumber = $this->ViewMode == "Print" ? 1 : intval(CCGetParam($this->ComponentName . "Page", 1));
        if ($this->PageNumber <= 0 ) {
            $this->PageNumber = 1;
        }
        $this->Visible = (CCSecurityAccessCheck("3") == "success");

        $this->Report_TotalRecords = new clsControl(ccsReportLabel, "Report_TotalRecords", "Report_TotalRecords", ccsText, "", 0, $this);
        $this->Report_TotalRecords->TotalFunction = "Count";
        $this->Report_TotalRecords->IsEmptySource = true;
        $this->NoRecords = new clsPanel("NoRecords", $this);
        $this->GroupSex = new clsControl(ccsReportLabel, "GroupSex", "GroupSex", ccsInteger, "", "", $this);
        $this->CountGroupSex = new clsControl(ccsReportLabel, "CountGroupSex", "CountGroupSex", ccsText, "", 0, $this);
        $this->CountGroupSex->TotalFunction = "Count";
    }
//End Class_Initialize Event

//Initialize Method @3-6C59EE65
    function Initialize()
    {
        if(!$this->Visible) return;

        $this->DataSource->PageSize = $this->PageSize;
        $this->DataSource->AbsolutePage = $this->PageNumber;
        $this->DataSource->SetOrder($this->SorterName, $this->SorterDirection);
    }
//End Initialize Method

//CheckErrors Method @3-9B8077A3
    function CheckErrors()
    {
        $errors = false;
        $errors = ($errors || $this->Report_TotalRecords->Errors->Count());
        $errors = ($errors || $this->GroupSex->Errors->Count());
        $errors = ($errors || $this->CountGroupSex->Errors->Count());
        $errors = ($errors || $this->Errors->Count());
        $errors = ($errors || $this->DataSource->Errors->Count());
        return $errors;
    }
//End CheckErrors Method

//GetErrors Method @3-4C3BD975
    function GetErrors()
    {
        $errors = "";
        $errors = ComposeStrings($errors, $this->Report_TotalRecords->Errors->ToString());
        $errors = ComposeStrings($errors, $this->GroupSex->Errors->ToString());
        $errors = ComposeStrings($errors, $this->CountGroupSex->Errors->ToString());
        $errors = ComposeStrings($errors, $this->Errors->ToString());
        $errors = ComposeStrings($errors, $this->DataSource->Errors->ToString());
        return $errors;
    }
//End GetErrors Method

//Show Method @3-54FA4976
    function Show()
    {
        global $Tpl;
        global $CCSLocales;
        if(!$this->Visible) return;

        $ShownRecords = 0;

        $this->DataSource->Parameters["urls_BirthDate"] = CCGetFromGet("s_BirthDate", NULL);
        $this->DataSource->Parameters["urls_BirthDate1"] = CCGetFromGet("s_BirthDate1", NULL);
        $this->DataSource->Parameters["sess_Facilities"] = CCGetSession("s_Facilities", NULL);

        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeSelect", $this);


        $this->DataSource->Prepare();
        $this->DataSource->Open();

        $SexKey = "";
        $Groups = new clsGroupsCollectionNewBorn27($this);
        $Groups->PageSize = $this->PageSize > 0 ? $this->PageSize : 0;

        $is_next_record = $this->DataSource->next_record();
        $this->IsEmpty = ! $is_next_record;
        while($is_next_record) {
            $this->DataSource->SetValues();
            $this->GroupSex->SetValue($this->DataSource->GroupSex->GetValue());
            $this->CountGroupSex->SetValue($this->DataSource->CountGroupSex->GetValue());
            $this->Report_TotalRecords->SetValue(1);
            if (count($Groups->Groups) == 0) $Groups->OpenGroup("Report");
            if (count($Groups->Groups) == 2 or $SexKey != $this->DataSource->f("Sex")) {
                $Groups->OpenGroup("Sex");
            }
            $Groups->AddItem();
            $SexKey = $this->DataSource->f("Sex");
            $is_next_record = $this->DataSource->next_record();
            if (!$is_next_record || $SexKey != $this->DataSource->f("Sex")) {
                $Groups->CloseGroup("Sex");
            }
        }
        if (!count($Groups->Groups)) 
            $Groups->OpenGroup("Report");
        else
            $this->NoRecords->Visible = false;
        $Groups->CloseGroup("Report");
        $this->TotalPages = $Groups->TotalPages;
        $this->TotalRows = $Groups->TotalRows;

        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeShow", $this);
        if(!$this->Visible) return;

        $this->Attributes->Show();
        $ReportBlock = "Report " . $this->ComponentName;
        $ParentPath = $Tpl->block_path;
        $Tpl->block_path = $ParentPath . "/" . $ReportBlock;

        if($this->CheckErrors()) {
            $Tpl->replaceblock("", $this->GetErrors());
            $Tpl->block_path = $ParentPath;
            return;
        } else {
            $items = & $Groups->Groups;
            $i = $Groups->Pages[min($this->PageNumber, $Groups->TotalPages) - 1];
            $this->ControlsVisible["GroupSex"] = $this->GroupSex->Visible;
            $this->ControlsVisible["CountGroupSex"] = $this->CountGroupSex->Visible;
            do {
                $this->Attributes->RestoreFromArray($items[$i]->Attributes);
                $this->RowNumber = $items[$i]->RowNumber;
                switch ($items[$i]->GroupType) {
                    Case "":
                        $this->Detail->CCSEventResult = CCGetEvent($this->Detail->CCSEvents, "BeforeShow", $this->Detail);
                        if ($this->Detail->Visible) {
                            $this->Attributes->Show();
                            $Tpl->parseto("Section Detail", true, "Section Detail");
                        }
                        break;
                    case "Report":
                        if ($items[$i]->Mode == 1) {
                            $this->Report_TotalRecords->SetValue($items[$i]->Report_TotalRecords);
                            $this->Report_TotalRecords->Attributes->RestoreFromArray($items[$i]->_Report_TotalRecordsAttributes);
                            $this->Report_Header->CCSEventResult = CCGetEvent($this->Report_Header->CCSEvents, "BeforeShow", $this->Report_Header);
                            if ($this->Report_Header->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Report_Header";
                                $this->Attributes->Show();
                                $this->Report_TotalRecords->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Report_Header", true, "Section Detail");
                            }
                        }
                        if ($items[$i]->Mode == 2) {
                            $this->Report_Footer->CCSEventResult = CCGetEvent($this->Report_Footer->CCSEvents, "BeforeShow", $this->Report_Footer);
                            if ($this->Report_Footer->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Report_Footer";
                                $this->NoRecords->Show();
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Report_Footer", true, "Section Detail");
                            }
                        }
                        break;
                    case "Page":
                        if ($items[$i]->Mode == 1) {
                            $this->Page_Header->CCSEventResult = CCGetEvent($this->Page_Header->CCSEvents, "BeforeShow", $this->Page_Header);
                            if ($this->Page_Header->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Page_Header";
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Page_Header", true, "Section Detail");
                            }
                        }
                        if ($items[$i]->Mode == 2 && !$this->UseClientPaging || $items[$i]->Mode == 1 && $this->UseClientPaging) {
                            $this->Page_Footer->CCSEventResult = CCGetEvent($this->Page_Footer->CCSEvents, "BeforeShow", $this->Page_Footer);
                            if ($this->Page_Footer->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Page_Footer";
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Page_Footer", true, "Section Detail");
                            }
                        }
                        break;
                    case "Sex":
                        if ($items[$i]->Mode == 1) {
                            $this->GroupSex->SetValue($items[$i]->GroupSex);
                            $this->GroupSex->Attributes->RestoreFromArray($items[$i]->_GroupSexAttributes);
                            $this->CountGroupSex->SetValue($items[$i]->CountGroupSex);
                            $this->CountGroupSex->Attributes->RestoreFromArray($items[$i]->_CountGroupSexAttributes);
                            $this->Sex_Header->CCSEventResult = CCGetEvent($this->Sex_Header->CCSEvents, "BeforeShow", $this->Sex_Header);
                            if ($this->Sex_Header->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Sex_Header";
                                $this->Attributes->Show();
                                $this->GroupSex->Show();
                                $this->CountGroupSex->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Sex_Header", true, "Section Detail");
                            }
                        }
                        if ($items[$i]->Mode == 2) {
                            $this->Sex_Footer->CCSEventResult = CCGetEvent($this->Sex_Footer->CCSEvents, "BeforeShow", $this->Sex_Footer);
                            if ($this->Sex_Footer->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Sex_Footer";
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Sex_Footer", true, "Section Detail");
                            }
                        }
                        break;
                }
                $i++;
            } while ($i < count($items) && ($this->ViewMode == "Print" ||  !($i > 1 && $items[$i]->GroupType == 'Page' && $items[$i]->Mode == 1)));
            $Tpl->block_path = $ParentPath;
            $Tpl->parse($ReportBlock);
            $this->DataSource->close();
        }

    }
//End Show Method

} //End NewBorn27 Class @3-FCB6E20C

class clsNewBorn27DataSource extends clsDBregistry_db {  //NewBorn27DataSource Class @3-46E1328B

//DataSource Variables @3-94ED7D63
    public $Parent = "";
    public $CCSEvents = "";
    public $CCSEventResult;
    public $ErrorBlock;
    public $CmdExecution;

    public $wp;


    // Datasource fields
    public $GroupSex;
    public $CountGroupSex;
//End DataSource Variables

//DataSourceClass_Initialize Event @3-9ED4F283
    function clsNewBorn27DataSource(& $Parent)
    {
        $this->Parent = & $Parent;
        $this->ErrorBlock = "Report NewBorn27";
        $this->Initialize();
        $this->GroupSex = new clsField("GroupSex", ccsInteger, "");
        
        $this->CountGroupSex = new clsField("CountGroupSex", ccsText, "");
        

    }
//End DataSourceClass_Initialize Event

//SetOrder Method @3-9E1383D1
    function SetOrder($SorterName, $SorterDirection)
    {
        $this->Order = "";
        $this->Order = CCGetOrder($this->Order, $SorterName, $SorterDirection, 
            "");
    }
//End SetOrder Method

//Prepare Method @3-0ABFAEDD
    function Prepare()
    {
        global $CCSLocales;
        global $DefaultDateFormat;
        $this->wp = new clsSQLParameters($this->ErrorBlock);
        $this->wp->AddParameter("1", "urls_BirthDate", ccsDate, array("ShortDate"), array("yyyy", "-", "mm", "-", "dd", " ", "HH", ":", "nn", ":", "ss"), $this->Parameters["urls_BirthDate"], "", false);
        $this->wp->AddParameter("2", "urls_BirthDate1", ccsDate, array("ShortDate"), array("yyyy", "-", "mm", "-", "dd", " ", "HH", ":", "nn", ":", "ss"), $this->Parameters["urls_BirthDate1"], "", false);
        $this->wp->AddParameter("3", "sess_Facilities", ccsInteger, "", "", $this->Parameters["sess_Facilities"], 0, false);
        $this->wp->Criterion[1] = $this->wp->Operation(opGreaterThanOrEqual, "newborn.BirthDate", $this->wp->GetDBValue("1"), $this->ToSQL($this->wp->GetDBValue("1"), ccsDate),false);
        $this->wp->Criterion[2] = $this->wp->Operation(opLessThanOrEqual, "newborn.BirthDate", $this->wp->GetDBValue("2"), $this->ToSQL($this->wp->GetDBValue("2"), ccsDate),false);
        $this->wp->Criterion[3] = $this->wp->Operation(opIn, "facilities.FacilityID", $this->wp->GetDBValue("3"), $this->ToSQL($this->wp->GetDBValue("3"), ccsInteger, true),false);
        $this->wp->Criterion[4] = "( newborn.Died=1 )";
        $this->wp->Criterion[5] = "( newborn.DiedID=1 )";
        $this->Where = $this->wp->opAND(
             false, $this->wp->opAND(
             false, $this->wp->opAND(
             false, $this->wp->opAND(
             false, 
             $this->wp->Criterion[1], 
             $this->wp->Criterion[2]), 
             $this->wp->Criterion[3]), 
             $this->wp->Criterion[4]), 
             $this->wp->Criterion[5]);
    }
//End Prepare Method

//Open Method @3-E3BDF83B
    function Open()
    {
        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeBuildSelect", $this->Parent);
        $this->SQL = "SELECT delivery.DeliveryID AS delivery_DeliveryID, FacilityName, Sex, NewBornID, BirthDate, Weight \n\n" .
        "FROM (delivery INNER JOIN newborn ON\n\n" .
        "newborn.DeliveryID = delivery.DeliveryID) INNER JOIN facilities ON\n\n" .
        "delivery.FacilityID = facilities.FacilityID {SQL_Where} {SQL_OrderBy}";
        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeExecuteSelect", $this->Parent);
        $this->query(CCBuildSQL($this->SQL, $this->Where, "newborn.Sex asc" .  ($this->Order ? ", " . $this->Order: "")));
        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "AfterExecuteSelect", $this->Parent);
    }
//End Open Method

//SetValues Method @3-5BFFA3DB
    function SetValues()
    {
        $this->GroupSex->SetDBValue(trim($this->f("Sex")));
        $this->CountGroupSex->SetDBValue($this->f("Sex"));
    }
//End SetValues Method

} //End NewBorn27DataSource Class @3-FCB6E20C

//NewBorn28 ReportGroup class @63-206ED54D
class clsReportGroupNewBorn28 {
    public $GroupType;
    public $mode; //1 - open, 2 - close
    public $Report_TotalRecords, $_Report_TotalRecordsAttributes;
    public $GroupSex1, $_GroupSex1Attributes;
    public $CountGroupSex, $_CountGroupSexAttributes;
    public $Attributes;
    public $ReportTotalIndex = 0;
    public $PageTotalIndex;
    public $PageNumber;
    public $RowNumber;
    public $Parent;
    public $SexTotalIndex;

    function clsReportGroupNewBorn28(& $parent) {
        $this->Parent = & $parent;
        $this->Attributes = $this->Parent->Attributes->GetAsArray();
    }
    function SetControls($PrevGroup = "") {
        $this->GroupSex1 = $this->Parent->GroupSex1->Value;
    }

    function SetTotalControls($mode = "", $PrevGroup = "") {
        $this->Report_TotalRecords = $this->Parent->Report_TotalRecords->GetTotalValue($mode);
        $this->CountGroupSex = $this->Parent->CountGroupSex->GetTotalValue($mode);
        $this->_Report_TotalRecordsAttributes = $this->Parent->Report_TotalRecords->Attributes->GetAsArray();
        $this->_GroupSex1Attributes = $this->Parent->GroupSex1->Attributes->GetAsArray();
        $this->_CountGroupSexAttributes = $this->Parent->CountGroupSex->Attributes->GetAsArray();
    }
    function SyncWithHeader(& $Header) {
        $Header->Report_TotalRecords = $this->Report_TotalRecords;
        $Header->_Report_TotalRecordsAttributes = $this->_Report_TotalRecordsAttributes;
        $Header->CountGroupSex = $this->CountGroupSex;
        $Header->_CountGroupSexAttributes = $this->_CountGroupSexAttributes;
        $this->GroupSex1 = $Header->GroupSex1;
        $Header->_GroupSex1Attributes = $this->_GroupSex1Attributes;
        $this->Parent->GroupSex1->Value = $Header->GroupSex1;
        $this->Parent->GroupSex1->Attributes->RestoreFromArray($Header->_GroupSex1Attributes);
    }
    function ChangeTotalControls() {
        $this->Report_TotalRecords = $this->Parent->Report_TotalRecords->GetValue();
        $this->CountGroupSex = $this->Parent->CountGroupSex->GetValue();
    }
}
//End NewBorn28 ReportGroup class

//NewBorn28 GroupsCollection class @63-ADC19203
class clsGroupsCollectionNewBorn28 {
    public $Groups;
    public $mPageCurrentHeaderIndex;
    public $mSexCurrentHeaderIndex;
    public $PageSize;
    public $TotalPages = 0;
    public $TotalRows = 0;
    public $CurrentPageSize = 0;
    public $Pages;
    public $Parent;
    public $LastDetailIndex;

    function clsGroupsCollectionNewBorn28(& $parent) {
        $this->Parent = & $parent;
        $this->Groups = array();
        $this->Pages  = array();
        $this->mSexCurrentHeaderIndex = 1;
        $this->mReportTotalIndex = 0;
        $this->mPageTotalIndex = 1;
    }

    function & InitGroup() {
        $group = new clsReportGroupNewBorn28($this->Parent);
        $group->RowNumber = $this->TotalRows + 1;
        $group->PageNumber = $this->TotalPages;
        $group->PageTotalIndex = $this->mPageCurrentHeaderIndex;
        $group->SexTotalIndex = $this->mSexCurrentHeaderIndex;
        return $group;
    }

    function RestoreValues() {
        $this->Parent->Report_TotalRecords->Value = $this->Parent->Report_TotalRecords->initialValue;
        $this->Parent->GroupSex1->Value = $this->Parent->GroupSex1->initialValue;
        $this->Parent->CountGroupSex->Value = $this->Parent->CountGroupSex->initialValue;
    }

    function OpenPage() {
        $this->TotalPages++;
        $Group = & $this->InitGroup();
        $this->Parent->Page_Header->CCSEventResult = CCGetEvent($this->Parent->Page_Header->CCSEvents, "OnInitialize", $this->Parent->Page_Header);
        if ($this->Parent->Page_Header->Visible)
            $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Page_Header->Height;
        $Group->SetTotalControls("GetNextValue");
        $this->Parent->Page_Header->CCSEventResult = CCGetEvent($this->Parent->Page_Header->CCSEvents, "OnCalculate", $this->Parent->Page_Header);
        $Group->SetControls();
        $Group->Mode = 1;
        $Group->GroupType = "Page";
        $Group->PageTotalIndex = count($this->Groups);
        $this->mPageCurrentHeaderIndex = count($this->Groups);
        $this->Groups[] =  & $Group;
        $this->Pages[] =  count($this->Groups) == 2 ? 0 : count($this->Groups) - 1;
    }

    function OpenGroup($groupName) {
        $Group = "";
        $OpenFlag = false;
        if ($groupName == "Report") {
            $Group = & $this->InitGroup(true);
            $this->Parent->Report_Header->CCSEventResult = CCGetEvent($this->Parent->Report_Header->CCSEvents, "OnInitialize", $this->Parent->Report_Header);
            if ($this->Parent->Report_Header->Visible) 
                $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Report_Header->Height;
                $Group->SetTotalControls("GetNextValue");
            $this->Parent->Report_Header->CCSEventResult = CCGetEvent($this->Parent->Report_Header->CCSEvents, "OnCalculate", $this->Parent->Report_Header);
            $Group->SetControls();
            $Group->Mode = 1;
            $Group->GroupType = "Report";
            $this->Groups[] = & $Group;
            $this->OpenPage();
        }
        if ($groupName == "Sex") {
            $GroupSex = & $this->InitGroup(true);
            $this->Parent->Sex_Header->CCSEventResult = CCGetEvent($this->Parent->Sex_Header->CCSEvents, "OnInitialize", $this->Parent->Sex_Header);
            if ($this->Parent->Page_Footer->Visible) 
                $OverSize = $this->Parent->Sex_Header->Height + $this->Parent->Page_Footer->Height;
            else
                $OverSize = $this->Parent->Sex_Header->Height;
            if (($this->PageSize > 0) and $this->Parent->Sex_Header->Visible and ($this->CurrentPageSize + $OverSize > $this->PageSize)) {
                $this->ClosePage();
                $this->OpenPage();
            }
            if ($this->Parent->Sex_Header->Visible)
                $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Sex_Header->Height;
                $GroupSex->SetTotalControls("GetNextValue");
            $this->Parent->Sex_Header->CCSEventResult = CCGetEvent($this->Parent->Sex_Header->CCSEvents, "OnCalculate", $this->Parent->Sex_Header);
            $GroupSex->SetControls();
            $GroupSex->Mode = 1;
            $GroupSex->GroupType = "Sex";
            $this->mSexCurrentHeaderIndex = count($this->Groups);
            $this->Groups[] = & $GroupSex;
            $this->Parent->CountGroupSex->Reset();
        }
    }

    function ClosePage() {
        $Group = & $this->InitGroup();
        $this->Parent->Page_Footer->CCSEventResult = CCGetEvent($this->Parent->Page_Footer->CCSEvents, "OnInitialize", $this->Parent->Page_Footer);
        $Group->SetTotalControls("GetPrevValue");
        $Group->SyncWithHeader($this->Groups[$this->mPageCurrentHeaderIndex]);
        $this->Parent->Page_Footer->CCSEventResult = CCGetEvent($this->Parent->Page_Footer->CCSEvents, "OnCalculate", $this->Parent->Page_Footer);
        $Group->SetControls();
        $this->RestoreValues();
        $this->CurrentPageSize = 0;
        $Group->Mode = 2;
        $Group->GroupType = "Page";
        $this->Groups[] = & $Group;
    }

    function CloseGroup($groupName)
    {
        $Group = "";
        if ($groupName == "Report") {
            $Group = & $this->InitGroup(true);
            $this->Parent->Report_Footer->CCSEventResult = CCGetEvent($this->Parent->Report_Footer->CCSEvents, "OnInitialize", $this->Parent->Report_Footer);
            if ($this->Parent->Page_Footer->Visible) 
                $OverSize = $this->Parent->Report_Footer->Height + $this->Parent->Page_Footer->Height;
            else
                $OverSize = $this->Parent->Report_Footer->Height;
            if (($this->PageSize > 0) and $this->Parent->Report_Footer->Visible and ($this->CurrentPageSize + $OverSize > $this->PageSize)) {
                $this->ClosePage();
                $this->OpenPage();
            }
            $Group->SetTotalControls("GetPrevValue");
            $Group->SyncWithHeader($this->Groups[0]);
            if ($this->Parent->Report_Footer->Visible)
                $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Report_Footer->Height;
            $this->Parent->Report_Footer->CCSEventResult = CCGetEvent($this->Parent->Report_Footer->CCSEvents, "OnCalculate", $this->Parent->Report_Footer);
            $Group->SetControls();
            $this->RestoreValues();
            $Group->Mode = 2;
            $Group->GroupType = "Report";
            $this->Groups[] = & $Group;
            $this->ClosePage();
            return;
        }
        $GroupSex = & $this->InitGroup(true);
        $this->Parent->Sex_Footer->CCSEventResult = CCGetEvent($this->Parent->Sex_Footer->CCSEvents, "OnInitialize", $this->Parent->Sex_Footer);
        if ($this->Parent->Page_Footer->Visible) 
            $OverSize = $this->Parent->Sex_Footer->Height + $this->Parent->Page_Footer->Height;
        else
            $OverSize = $this->Parent->Sex_Footer->Height;
        if (($this->PageSize > 0) and $this->Parent->Sex_Footer->Visible and ($this->CurrentPageSize + $OverSize > $this->PageSize)) {
            $this->ClosePage();
            $this->OpenPage();
        }
        $GroupSex->SetTotalControls("GetPrevValue");
        $GroupSex->SyncWithHeader($this->Groups[$this->mSexCurrentHeaderIndex]);
        if ($this->Parent->Sex_Footer->Visible)
            $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Sex_Footer->Height;
        $this->Parent->Sex_Footer->CCSEventResult = CCGetEvent($this->Parent->Sex_Footer->CCSEvents, "OnCalculate", $this->Parent->Sex_Footer);
        $GroupSex->SetControls();
        $this->Parent->CountGroupSex->Reset();
        $this->RestoreValues();
        $GroupSex->Mode = 2;
        $GroupSex->GroupType ="Sex";
        $this->Groups[] = & $GroupSex;
    }

    function AddItem()
    {
        $Group = & $this->InitGroup(true);
        $this->Parent->Detail->CCSEventResult = CCGetEvent($this->Parent->Detail->CCSEvents, "OnInitialize", $this->Parent->Detail);
        if ($this->Parent->Page_Footer->Visible) 
            $OverSize = $this->Parent->Detail->Height + $this->Parent->Page_Footer->Height;
        else
            $OverSize = $this->Parent->Detail->Height;
        if (($this->PageSize > 0) and $this->Parent->Detail->Visible and ($this->CurrentPageSize + $OverSize > $this->PageSize)) {
            $this->ClosePage();
            $this->OpenPage();
        }
        $this->TotalRows++;
        if ($this->LastDetailIndex)
            $PrevGroup = & $this->Groups[$this->LastDetailIndex];
        else
            $PrevGroup = "";
        $Group->SetTotalControls("", $PrevGroup);
        if ($this->Parent->Detail->Visible)
            $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Detail->Height;
        $this->Parent->Detail->CCSEventResult = CCGetEvent($this->Parent->Detail->CCSEvents, "OnCalculate", $this->Parent->Detail);
        $Group->SetControls($PrevGroup);
        $this->LastDetailIndex = count($this->Groups);
        $this->Groups[] = & $Group;
    }
}
//End NewBorn28 GroupsCollection class

class clsReportNewBorn28 { //NewBorn28 Class @63-88D6A329

//NewBorn28 Variables @63-80D63D80

    public $ComponentType = "Report";
    public $PageSize;
    public $ComponentName;
    public $Visible;
    public $Errors;
    public $CCSEvents = array();
    public $CCSEventResult;
    public $RelativePath = "";
    public $ViewMode = "Web";
    public $TemplateBlock;
    public $PageNumber;
    public $RowNumber;
    public $TotalRows;
    public $TotalPages;
    public $ControlsVisible = array();
    public $IsEmpty;
    public $Attributes;
    public $DetailBlock, $Detail;
    public $Report_FooterBlock, $Report_Footer;
    public $Report_HeaderBlock, $Report_Header;
    public $Page_FooterBlock, $Page_Footer;
    public $Page_HeaderBlock, $Page_Header;
    public $Sex_HeaderBlock, $Sex_Header;
    public $Sex_FooterBlock, $Sex_Footer;
    public $SorterName, $SorterDirection;

    public $ds;
    public $DataSource;
    public $UseClientPaging = false;

    //Report Controls
    public $StaticControls, $RowControls, $Report_FooterControls, $Report_HeaderControls;
    public $Page_FooterControls, $Page_HeaderControls;
    public $Sex_HeaderControls, $Sex_FooterControls;
//End NewBorn28 Variables

//Class_Initialize Event @63-20F955CC
    function clsReportNewBorn28($RelativePath = "", & $Parent)
    {
        global $FileName;
        global $CCSLocales;
        global $DefaultDateFormat;
        $this->ComponentName = "NewBorn28";
        $this->Visible = True;
        $this->Parent = & $Parent;
        $this->RelativePath = $RelativePath;
        $this->Attributes = new clsAttributes($this->ComponentName . ":");
        $this->Detail = new clsSection($this);
        $MinPageSize = 0;
        $MaxSectionSize = 0;
        $this->Detail->Height = 1;
        $MaxSectionSize = max($MaxSectionSize, $this->Detail->Height);
        $this->Report_Footer = new clsSection($this);
        $this->Report_Header = new clsSection($this);
        $this->Page_Footer = new clsSection($this);
        $this->Page_Footer->Height = 1;
        $MinPageSize += $this->Page_Footer->Height;
        $this->Page_Header = new clsSection($this);
        $this->Page_Header->Height = 1;
        $MinPageSize += $this->Page_Header->Height;
        $this->Sex_Footer = new clsSection($this);
        $this->Sex_Footer->Height = 1;
        $MaxSectionSize = max($MaxSectionSize, $this->Sex_Footer->Height);
        $this->Sex_Header = new clsSection($this);
        $this->Sex_Header->Height = 1;
        $MaxSectionSize = max($MaxSectionSize, $this->Sex_Header->Height);
        $this->Errors = new clsErrors();
        $this->DataSource = new clsNewBorn28DataSource($this);
        $this->ds = & $this->DataSource;
        $PageSize = CCGetParam($this->ComponentName . "PageSize", "");
        if(is_numeric($PageSize) && $PageSize > 0) {
            $this->PageSize = $PageSize;
        } else {
            if (!is_numeric($PageSize) || $PageSize < 0)
                $this->PageSize = 0;
             else if ($PageSize == "0")
                $this->PageSize = 0;
             else 
                $this->PageSize = $PageSize;
        }
        $MinPageSize += $MaxSectionSize;
        if ($this->PageSize && $MinPageSize && $this->PageSize < $MinPageSize)
            $this->PageSize = $MinPageSize;
        $this->PageNumber = $this->ViewMode == "Print" ? 1 : intval(CCGetParam($this->ComponentName . "Page", 1));
        if ($this->PageNumber <= 0 ) {
            $this->PageNumber = 1;
        }
        $this->Visible = (CCSecurityAccessCheck("3") == "success");

        $this->Report_TotalRecords = new clsControl(ccsReportLabel, "Report_TotalRecords", "Report_TotalRecords", ccsText, "", 0, $this);
        $this->Report_TotalRecords->TotalFunction = "Count";
        $this->Report_TotalRecords->IsEmptySource = true;
        $this->NoRecords = new clsPanel("NoRecords", $this);
        $this->GroupSex1 = new clsControl(ccsReportLabel, "GroupSex1", "GroupSex1", ccsInteger, "", "", $this);
        $this->CountGroupSex = new clsControl(ccsReportLabel, "CountGroupSex", "CountGroupSex", ccsText, "", 0, $this);
        $this->CountGroupSex->TotalFunction = "Count";
    }
//End Class_Initialize Event

//Initialize Method @63-6C59EE65
    function Initialize()
    {
        if(!$this->Visible) return;

        $this->DataSource->PageSize = $this->PageSize;
        $this->DataSource->AbsolutePage = $this->PageNumber;
        $this->DataSource->SetOrder($this->SorterName, $this->SorterDirection);
    }
//End Initialize Method

//CheckErrors Method @63-59C7908B
    function CheckErrors()
    {
        $errors = false;
        $errors = ($errors || $this->Report_TotalRecords->Errors->Count());
        $errors = ($errors || $this->GroupSex1->Errors->Count());
        $errors = ($errors || $this->CountGroupSex->Errors->Count());
        $errors = ($errors || $this->Errors->Count());
        $errors = ($errors || $this->DataSource->Errors->Count());
        return $errors;
    }
//End CheckErrors Method

//GetErrors Method @63-2AF875A1
    function GetErrors()
    {
        $errors = "";
        $errors = ComposeStrings($errors, $this->Report_TotalRecords->Errors->ToString());
        $errors = ComposeStrings($errors, $this->GroupSex1->Errors->ToString());
        $errors = ComposeStrings($errors, $this->CountGroupSex->Errors->ToString());
        $errors = ComposeStrings($errors, $this->Errors->ToString());
        $errors = ComposeStrings($errors, $this->DataSource->Errors->ToString());
        return $errors;
    }
//End GetErrors Method

//Show Method @63-CEB1E461
    function Show()
    {
        global $Tpl;
        global $CCSLocales;
        if(!$this->Visible) return;

        $ShownRecords = 0;

        $this->DataSource->Parameters["urls_BirthDate"] = CCGetFromGet("s_BirthDate", NULL);
        $this->DataSource->Parameters["urls_BirthDate1"] = CCGetFromGet("s_BirthDate1", NULL);
        $this->DataSource->Parameters["sess_Facilities"] = CCGetSession("s_Facilities", NULL);

        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeSelect", $this);


        $this->DataSource->Prepare();
        $this->DataSource->Open();

        $SexKey = "";
        $Groups = new clsGroupsCollectionNewBorn28($this);
        $Groups->PageSize = $this->PageSize > 0 ? $this->PageSize : 0;

        $is_next_record = $this->DataSource->next_record();
        $this->IsEmpty = ! $is_next_record;
        while($is_next_record) {
            $this->DataSource->SetValues();
            $this->GroupSex1->SetValue($this->DataSource->GroupSex1->GetValue());
            $this->CountGroupSex->SetValue($this->DataSource->CountGroupSex->GetValue());
            $this->Report_TotalRecords->SetValue(1);
            if (count($Groups->Groups) == 0) $Groups->OpenGroup("Report");
            if (count($Groups->Groups) == 2 or $SexKey != $this->DataSource->f("Sex")) {
                $Groups->OpenGroup("Sex");
            }
            $Groups->AddItem();
            $SexKey = $this->DataSource->f("Sex");
            $is_next_record = $this->DataSource->next_record();
            if (!$is_next_record || $SexKey != $this->DataSource->f("Sex")) {
                $Groups->CloseGroup("Sex");
            }
        }
        if (!count($Groups->Groups)) 
            $Groups->OpenGroup("Report");
        else
            $this->NoRecords->Visible = false;
        $Groups->CloseGroup("Report");
        $this->TotalPages = $Groups->TotalPages;
        $this->TotalRows = $Groups->TotalRows;

        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeShow", $this);
        if(!$this->Visible) return;

        $this->Attributes->Show();
        $ReportBlock = "Report " . $this->ComponentName;
        $ParentPath = $Tpl->block_path;
        $Tpl->block_path = $ParentPath . "/" . $ReportBlock;

        if($this->CheckErrors()) {
            $Tpl->replaceblock("", $this->GetErrors());
            $Tpl->block_path = $ParentPath;
            return;
        } else {
            $items = & $Groups->Groups;
            $i = $Groups->Pages[min($this->PageNumber, $Groups->TotalPages) - 1];
            $this->ControlsVisible["GroupSex1"] = $this->GroupSex1->Visible;
            $this->ControlsVisible["CountGroupSex"] = $this->CountGroupSex->Visible;
            do {
                $this->Attributes->RestoreFromArray($items[$i]->Attributes);
                $this->RowNumber = $items[$i]->RowNumber;
                switch ($items[$i]->GroupType) {
                    Case "":
                        $this->Detail->CCSEventResult = CCGetEvent($this->Detail->CCSEvents, "BeforeShow", $this->Detail);
                        if ($this->Detail->Visible) {
                            $this->Attributes->Show();
                            $Tpl->parseto("Section Detail", true, "Section Detail");
                        }
                        break;
                    case "Report":
                        if ($items[$i]->Mode == 1) {
                            $this->Report_TotalRecords->SetValue($items[$i]->Report_TotalRecords);
                            $this->Report_TotalRecords->Attributes->RestoreFromArray($items[$i]->_Report_TotalRecordsAttributes);
                            $this->Report_Header->CCSEventResult = CCGetEvent($this->Report_Header->CCSEvents, "BeforeShow", $this->Report_Header);
                            if ($this->Report_Header->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Report_Header";
                                $this->Attributes->Show();
                                $this->Report_TotalRecords->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Report_Header", true, "Section Detail");
                            }
                        }
                        if ($items[$i]->Mode == 2) {
                            $this->Report_Footer->CCSEventResult = CCGetEvent($this->Report_Footer->CCSEvents, "BeforeShow", $this->Report_Footer);
                            if ($this->Report_Footer->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Report_Footer";
                                $this->NoRecords->Show();
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Report_Footer", true, "Section Detail");
                            }
                        }
                        break;
                    case "Page":
                        if ($items[$i]->Mode == 1) {
                            $this->Page_Header->CCSEventResult = CCGetEvent($this->Page_Header->CCSEvents, "BeforeShow", $this->Page_Header);
                            if ($this->Page_Header->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Page_Header";
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Page_Header", true, "Section Detail");
                            }
                        }
                        if ($items[$i]->Mode == 2 && !$this->UseClientPaging || $items[$i]->Mode == 1 && $this->UseClientPaging) {
                            $this->Page_Footer->CCSEventResult = CCGetEvent($this->Page_Footer->CCSEvents, "BeforeShow", $this->Page_Footer);
                            if ($this->Page_Footer->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Page_Footer";
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Page_Footer", true, "Section Detail");
                            }
                        }
                        break;
                    case "Sex":
                        if ($items[$i]->Mode == 1) {
                            $this->GroupSex1->SetValue($items[$i]->GroupSex1);
                            $this->GroupSex1->Attributes->RestoreFromArray($items[$i]->_GroupSex1Attributes);
                            $this->CountGroupSex->SetValue($items[$i]->CountGroupSex);
                            $this->CountGroupSex->Attributes->RestoreFromArray($items[$i]->_CountGroupSexAttributes);
                            $this->Sex_Header->CCSEventResult = CCGetEvent($this->Sex_Header->CCSEvents, "BeforeShow", $this->Sex_Header);
                            if ($this->Sex_Header->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Sex_Header";
                                $this->Attributes->Show();
                                $this->GroupSex1->Show();
                                $this->CountGroupSex->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Sex_Header", true, "Section Detail");
                            }
                        }
                        if ($items[$i]->Mode == 2) {
                            $this->Sex_Footer->CCSEventResult = CCGetEvent($this->Sex_Footer->CCSEvents, "BeforeShow", $this->Sex_Footer);
                            if ($this->Sex_Footer->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Sex_Footer";
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Sex_Footer", true, "Section Detail");
                            }
                        }
                        break;
                }
                $i++;
            } while ($i < count($items) && ($this->ViewMode == "Print" ||  !($i > 1 && $items[$i]->GroupType == 'Page' && $items[$i]->Mode == 1)));
            $Tpl->block_path = $ParentPath;
            $Tpl->parse($ReportBlock);
            $this->DataSource->close();
        }

    }
//End Show Method

} //End NewBorn28 Class @63-FCB6E20C

class clsNewBorn28DataSource extends clsDBregistry_db {  //NewBorn28DataSource Class @63-8FEDFE35

//DataSource Variables @63-83E06D24
    public $Parent = "";
    public $CCSEvents = "";
    public $CCSEventResult;
    public $ErrorBlock;
    public $CmdExecution;

    public $wp;


    // Datasource fields
    public $GroupSex1;
    public $CountGroupSex;
//End DataSource Variables

//DataSourceClass_Initialize Event @63-A0AD0AB6
    function clsNewBorn28DataSource(& $Parent)
    {
        $this->Parent = & $Parent;
        $this->ErrorBlock = "Report NewBorn28";
        $this->Initialize();
        $this->GroupSex1 = new clsField("GroupSex1", ccsInteger, "");
        
        $this->CountGroupSex = new clsField("CountGroupSex", ccsText, "");
        

    }
//End DataSourceClass_Initialize Event

//SetOrder Method @63-9E1383D1
    function SetOrder($SorterName, $SorterDirection)
    {
        $this->Order = "";
        $this->Order = CCGetOrder($this->Order, $SorterName, $SorterDirection, 
            "");
    }
//End SetOrder Method

//Prepare Method @63-2D7685FD
    function Prepare()
    {
        global $CCSLocales;
        global $DefaultDateFormat;
        $this->wp = new clsSQLParameters($this->ErrorBlock);
        $this->wp->AddParameter("2", "urls_BirthDate", ccsDate, array("ShortDate"), array("yyyy", "-", "mm", "-", "dd", " ", "HH", ":", "nn", ":", "ss"), $this->Parameters["urls_BirthDate"], "", false);
        $this->wp->AddParameter("3", "urls_BirthDate1", ccsDate, array("ShortDate"), array("yyyy", "-", "mm", "-", "dd", " ", "HH", ":", "nn", ":", "ss"), $this->Parameters["urls_BirthDate1"], "", false);
        $this->wp->AddParameter("4", "sess_Facilities", ccsInteger, "", "", $this->Parameters["sess_Facilities"], 0, false);
        $this->wp->Criterion[1] = "( newborn.Weight<500 )";
        $this->wp->Criterion[2] = $this->wp->Operation(opGreaterThanOrEqual, "newborn.BirthDate", $this->wp->GetDBValue("2"), $this->ToSQL($this->wp->GetDBValue("2"), ccsDate),false);
        $this->wp->Criterion[3] = $this->wp->Operation(opLessThanOrEqual, "newborn.BirthDate", $this->wp->GetDBValue("3"), $this->ToSQL($this->wp->GetDBValue("3"), ccsDate),false);
        $this->wp->Criterion[4] = $this->wp->Operation(opIn, "facilities.FacilityID", $this->wp->GetDBValue("4"), $this->ToSQL($this->wp->GetDBValue("4"), ccsInteger, true),false);
        $this->wp->Criterion[5] = "( newborn.Died=1 )";
        $this->wp->Criterion[6] = "( newborn.DiedID=1 )";
        $this->Where = $this->wp->opAND(
             false, $this->wp->opAND(
             false, $this->wp->opAND(
             false, $this->wp->opAND(
             false, $this->wp->opAND(
             false, 
             $this->wp->Criterion[1], 
             $this->wp->Criterion[2]), 
             $this->wp->Criterion[3]), 
             $this->wp->Criterion[4]), 
             $this->wp->Criterion[5]), 
             $this->wp->Criterion[6]);
    }
//End Prepare Method

//Open Method @63-191103F6
    function Open()
    {
        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeBuildSelect", $this->Parent);
        $this->SQL = "SELECT delivery.DeliveryID AS delivery_DeliveryID, FacilityName, Sex, NewBornID, BirthDate, Weight, facilities.FacilityID AS facilities_FacilityID \n\n" .
        "FROM (delivery INNER JOIN facilities ON\n\n" .
        "delivery.FacilityID = facilities.FacilityID) INNER JOIN newborn ON\n\n" .
        "newborn.DeliveryID = delivery.DeliveryID {SQL_Where} {SQL_OrderBy}";
        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeExecuteSelect", $this->Parent);
        $this->query(CCBuildSQL($this->SQL, $this->Where, "newborn.Sex asc" .  ($this->Order ? ", " . $this->Order: "")));
        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "AfterExecuteSelect", $this->Parent);
    }
//End Open Method

//SetValues Method @63-0F75DA76
    function SetValues()
    {
        $this->GroupSex1->SetDBValue(trim($this->f("Sex")));
        $this->CountGroupSex->SetDBValue($this->f("Sex"));
    }
//End SetValues Method

} //End NewBorn28DataSource Class @63-FCB6E20C

//NewBorn29 ReportGroup class @127-12126DE8
class clsReportGroupNewBorn29 {
    public $GroupType;
    public $mode; //1 - open, 2 - close
    public $Report_TotalRecords, $_Report_TotalRecordsAttributes;
    public $GroupSex2, $_GroupSex2Attributes;
    public $CountGroupSex, $_CountGroupSexAttributes;
    public $Attributes;
    public $ReportTotalIndex = 0;
    public $PageTotalIndex;
    public $PageNumber;
    public $RowNumber;
    public $Parent;
    public $SexTotalIndex;

    function clsReportGroupNewBorn29(& $parent) {
        $this->Parent = & $parent;
        $this->Attributes = $this->Parent->Attributes->GetAsArray();
    }
    function SetControls($PrevGroup = "") {
        $this->GroupSex2 = $this->Parent->GroupSex2->Value;
    }

    function SetTotalControls($mode = "", $PrevGroup = "") {
        $this->Report_TotalRecords = $this->Parent->Report_TotalRecords->GetTotalValue($mode);
        $this->CountGroupSex = $this->Parent->CountGroupSex->GetTotalValue($mode);
        $this->_Report_TotalRecordsAttributes = $this->Parent->Report_TotalRecords->Attributes->GetAsArray();
        $this->_GroupSex2Attributes = $this->Parent->GroupSex2->Attributes->GetAsArray();
        $this->_CountGroupSexAttributes = $this->Parent->CountGroupSex->Attributes->GetAsArray();
    }
    function SyncWithHeader(& $Header) {
        $Header->Report_TotalRecords = $this->Report_TotalRecords;
        $Header->_Report_TotalRecordsAttributes = $this->_Report_TotalRecordsAttributes;
        $Header->CountGroupSex = $this->CountGroupSex;
        $Header->_CountGroupSexAttributes = $this->_CountGroupSexAttributes;
        $this->GroupSex2 = $Header->GroupSex2;
        $Header->_GroupSex2Attributes = $this->_GroupSex2Attributes;
        $this->Parent->GroupSex2->Value = $Header->GroupSex2;
        $this->Parent->GroupSex2->Attributes->RestoreFromArray($Header->_GroupSex2Attributes);
    }
    function ChangeTotalControls() {
        $this->Report_TotalRecords = $this->Parent->Report_TotalRecords->GetValue();
        $this->CountGroupSex = $this->Parent->CountGroupSex->GetValue();
    }
}
//End NewBorn29 ReportGroup class

//NewBorn29 GroupsCollection class @127-ECF30AFA
class clsGroupsCollectionNewBorn29 {
    public $Groups;
    public $mPageCurrentHeaderIndex;
    public $mSexCurrentHeaderIndex;
    public $PageSize;
    public $TotalPages = 0;
    public $TotalRows = 0;
    public $CurrentPageSize = 0;
    public $Pages;
    public $Parent;
    public $LastDetailIndex;

    function clsGroupsCollectionNewBorn29(& $parent) {
        $this->Parent = & $parent;
        $this->Groups = array();
        $this->Pages  = array();
        $this->mSexCurrentHeaderIndex = 1;
        $this->mReportTotalIndex = 0;
        $this->mPageTotalIndex = 1;
    }

    function & InitGroup() {
        $group = new clsReportGroupNewBorn29($this->Parent);
        $group->RowNumber = $this->TotalRows + 1;
        $group->PageNumber = $this->TotalPages;
        $group->PageTotalIndex = $this->mPageCurrentHeaderIndex;
        $group->SexTotalIndex = $this->mSexCurrentHeaderIndex;
        return $group;
    }

    function RestoreValues() {
        $this->Parent->Report_TotalRecords->Value = $this->Parent->Report_TotalRecords->initialValue;
        $this->Parent->GroupSex2->Value = $this->Parent->GroupSex2->initialValue;
        $this->Parent->CountGroupSex->Value = $this->Parent->CountGroupSex->initialValue;
    }

    function OpenPage() {
        $this->TotalPages++;
        $Group = & $this->InitGroup();
        $this->Parent->Page_Header->CCSEventResult = CCGetEvent($this->Parent->Page_Header->CCSEvents, "OnInitialize", $this->Parent->Page_Header);
        if ($this->Parent->Page_Header->Visible)
            $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Page_Header->Height;
        $Group->SetTotalControls("GetNextValue");
        $this->Parent->Page_Header->CCSEventResult = CCGetEvent($this->Parent->Page_Header->CCSEvents, "OnCalculate", $this->Parent->Page_Header);
        $Group->SetControls();
        $Group->Mode = 1;
        $Group->GroupType = "Page";
        $Group->PageTotalIndex = count($this->Groups);
        $this->mPageCurrentHeaderIndex = count($this->Groups);
        $this->Groups[] =  & $Group;
        $this->Pages[] =  count($this->Groups) == 2 ? 0 : count($this->Groups) - 1;
    }

    function OpenGroup($groupName) {
        $Group = "";
        $OpenFlag = false;
        if ($groupName == "Report") {
            $Group = & $this->InitGroup(true);
            $this->Parent->Report_Header->CCSEventResult = CCGetEvent($this->Parent->Report_Header->CCSEvents, "OnInitialize", $this->Parent->Report_Header);
            if ($this->Parent->Report_Header->Visible) 
                $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Report_Header->Height;
                $Group->SetTotalControls("GetNextValue");
            $this->Parent->Report_Header->CCSEventResult = CCGetEvent($this->Parent->Report_Header->CCSEvents, "OnCalculate", $this->Parent->Report_Header);
            $Group->SetControls();
            $Group->Mode = 1;
            $Group->GroupType = "Report";
            $this->Groups[] = & $Group;
            $this->OpenPage();
        }
        if ($groupName == "Sex") {
            $GroupSex = & $this->InitGroup(true);
            $this->Parent->Sex_Header->CCSEventResult = CCGetEvent($this->Parent->Sex_Header->CCSEvents, "OnInitialize", $this->Parent->Sex_Header);
            if ($this->Parent->Page_Footer->Visible) 
                $OverSize = $this->Parent->Sex_Header->Height + $this->Parent->Page_Footer->Height;
            else
                $OverSize = $this->Parent->Sex_Header->Height;
            if (($this->PageSize > 0) and $this->Parent->Sex_Header->Visible and ($this->CurrentPageSize + $OverSize > $this->PageSize)) {
                $this->ClosePage();
                $this->OpenPage();
            }
            if ($this->Parent->Sex_Header->Visible)
                $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Sex_Header->Height;
                $GroupSex->SetTotalControls("GetNextValue");
            $this->Parent->Sex_Header->CCSEventResult = CCGetEvent($this->Parent->Sex_Header->CCSEvents, "OnCalculate", $this->Parent->Sex_Header);
            $GroupSex->SetControls();
            $GroupSex->Mode = 1;
            $GroupSex->GroupType = "Sex";
            $this->mSexCurrentHeaderIndex = count($this->Groups);
            $this->Groups[] = & $GroupSex;
            $this->Parent->CountGroupSex->Reset();
        }
    }

    function ClosePage() {
        $Group = & $this->InitGroup();
        $this->Parent->Page_Footer->CCSEventResult = CCGetEvent($this->Parent->Page_Footer->CCSEvents, "OnInitialize", $this->Parent->Page_Footer);
        $Group->SetTotalControls("GetPrevValue");
        $Group->SyncWithHeader($this->Groups[$this->mPageCurrentHeaderIndex]);
        $this->Parent->Page_Footer->CCSEventResult = CCGetEvent($this->Parent->Page_Footer->CCSEvents, "OnCalculate", $this->Parent->Page_Footer);
        $Group->SetControls();
        $this->RestoreValues();
        $this->CurrentPageSize = 0;
        $Group->Mode = 2;
        $Group->GroupType = "Page";
        $this->Groups[] = & $Group;
    }

    function CloseGroup($groupName)
    {
        $Group = "";
        if ($groupName == "Report") {
            $Group = & $this->InitGroup(true);
            $this->Parent->Report_Footer->CCSEventResult = CCGetEvent($this->Parent->Report_Footer->CCSEvents, "OnInitialize", $this->Parent->Report_Footer);
            if ($this->Parent->Page_Footer->Visible) 
                $OverSize = $this->Parent->Report_Footer->Height + $this->Parent->Page_Footer->Height;
            else
                $OverSize = $this->Parent->Report_Footer->Height;
            if (($this->PageSize > 0) and $this->Parent->Report_Footer->Visible and ($this->CurrentPageSize + $OverSize > $this->PageSize)) {
                $this->ClosePage();
                $this->OpenPage();
            }
            $Group->SetTotalControls("GetPrevValue");
            $Group->SyncWithHeader($this->Groups[0]);
            if ($this->Parent->Report_Footer->Visible)
                $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Report_Footer->Height;
            $this->Parent->Report_Footer->CCSEventResult = CCGetEvent($this->Parent->Report_Footer->CCSEvents, "OnCalculate", $this->Parent->Report_Footer);
            $Group->SetControls();
            $this->RestoreValues();
            $Group->Mode = 2;
            $Group->GroupType = "Report";
            $this->Groups[] = & $Group;
            $this->ClosePage();
            return;
        }
        $GroupSex = & $this->InitGroup(true);
        $this->Parent->Sex_Footer->CCSEventResult = CCGetEvent($this->Parent->Sex_Footer->CCSEvents, "OnInitialize", $this->Parent->Sex_Footer);
        if ($this->Parent->Page_Footer->Visible) 
            $OverSize = $this->Parent->Sex_Footer->Height + $this->Parent->Page_Footer->Height;
        else
            $OverSize = $this->Parent->Sex_Footer->Height;
        if (($this->PageSize > 0) and $this->Parent->Sex_Footer->Visible and ($this->CurrentPageSize + $OverSize > $this->PageSize)) {
            $this->ClosePage();
            $this->OpenPage();
        }
        $GroupSex->SetTotalControls("GetPrevValue");
        $GroupSex->SyncWithHeader($this->Groups[$this->mSexCurrentHeaderIndex]);
        if ($this->Parent->Sex_Footer->Visible)
            $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Sex_Footer->Height;
        $this->Parent->Sex_Footer->CCSEventResult = CCGetEvent($this->Parent->Sex_Footer->CCSEvents, "OnCalculate", $this->Parent->Sex_Footer);
        $GroupSex->SetControls();
        $this->Parent->CountGroupSex->Reset();
        $this->RestoreValues();
        $GroupSex->Mode = 2;
        $GroupSex->GroupType ="Sex";
        $this->Groups[] = & $GroupSex;
    }

    function AddItem()
    {
        $Group = & $this->InitGroup(true);
        $this->Parent->Detail->CCSEventResult = CCGetEvent($this->Parent->Detail->CCSEvents, "OnInitialize", $this->Parent->Detail);
        if ($this->Parent->Page_Footer->Visible) 
            $OverSize = $this->Parent->Detail->Height + $this->Parent->Page_Footer->Height;
        else
            $OverSize = $this->Parent->Detail->Height;
        if (($this->PageSize > 0) and $this->Parent->Detail->Visible and ($this->CurrentPageSize + $OverSize > $this->PageSize)) {
            $this->ClosePage();
            $this->OpenPage();
        }
        $this->TotalRows++;
        if ($this->LastDetailIndex)
            $PrevGroup = & $this->Groups[$this->LastDetailIndex];
        else
            $PrevGroup = "";
        $Group->SetTotalControls("", $PrevGroup);
        if ($this->Parent->Detail->Visible)
            $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Detail->Height;
        $this->Parent->Detail->CCSEventResult = CCGetEvent($this->Parent->Detail->CCSEvents, "OnCalculate", $this->Parent->Detail);
        $Group->SetControls($PrevGroup);
        $this->LastDetailIndex = count($this->Groups);
        $this->Groups[] = & $Group;
    }
}
//End NewBorn29 GroupsCollection class

class clsReportNewBorn29 { //NewBorn29 Class @127-91CD9268

//NewBorn29 Variables @127-80D63D80

    public $ComponentType = "Report";
    public $PageSize;
    public $ComponentName;
    public $Visible;
    public $Errors;
    public $CCSEvents = array();
    public $CCSEventResult;
    public $RelativePath = "";
    public $ViewMode = "Web";
    public $TemplateBlock;
    public $PageNumber;
    public $RowNumber;
    public $TotalRows;
    public $TotalPages;
    public $ControlsVisible = array();
    public $IsEmpty;
    public $Attributes;
    public $DetailBlock, $Detail;
    public $Report_FooterBlock, $Report_Footer;
    public $Report_HeaderBlock, $Report_Header;
    public $Page_FooterBlock, $Page_Footer;
    public $Page_HeaderBlock, $Page_Header;
    public $Sex_HeaderBlock, $Sex_Header;
    public $Sex_FooterBlock, $Sex_Footer;
    public $SorterName, $SorterDirection;

    public $ds;
    public $DataSource;
    public $UseClientPaging = false;

    //Report Controls
    public $StaticControls, $RowControls, $Report_FooterControls, $Report_HeaderControls;
    public $Page_FooterControls, $Page_HeaderControls;
    public $Sex_HeaderControls, $Sex_FooterControls;
//End NewBorn29 Variables

//Class_Initialize Event @127-3C5B1AF7
    function clsReportNewBorn29($RelativePath = "", & $Parent)
    {
        global $FileName;
        global $CCSLocales;
        global $DefaultDateFormat;
        $this->ComponentName = "NewBorn29";
        $this->Visible = True;
        $this->Parent = & $Parent;
        $this->RelativePath = $RelativePath;
        $this->Attributes = new clsAttributes($this->ComponentName . ":");
        $this->Detail = new clsSection($this);
        $MinPageSize = 0;
        $MaxSectionSize = 0;
        $this->Detail->Height = 1;
        $MaxSectionSize = max($MaxSectionSize, $this->Detail->Height);
        $this->Report_Footer = new clsSection($this);
        $this->Report_Header = new clsSection($this);
        $this->Page_Footer = new clsSection($this);
        $this->Page_Footer->Height = 1;
        $MinPageSize += $this->Page_Footer->Height;
        $this->Page_Header = new clsSection($this);
        $this->Page_Header->Height = 1;
        $MinPageSize += $this->Page_Header->Height;
        $this->Sex_Footer = new clsSection($this);
        $this->Sex_Footer->Height = 1;
        $MaxSectionSize = max($MaxSectionSize, $this->Sex_Footer->Height);
        $this->Sex_Header = new clsSection($this);
        $this->Sex_Header->Height = 1;
        $MaxSectionSize = max($MaxSectionSize, $this->Sex_Header->Height);
        $this->Errors = new clsErrors();
        $this->DataSource = new clsNewBorn29DataSource($this);
        $this->ds = & $this->DataSource;
        $PageSize = CCGetParam($this->ComponentName . "PageSize", "");
        if(is_numeric($PageSize) && $PageSize > 0) {
            $this->PageSize = $PageSize;
        } else {
            if (!is_numeric($PageSize) || $PageSize < 0)
                $this->PageSize = 0;
             else if ($PageSize == "0")
                $this->PageSize = 0;
             else 
                $this->PageSize = $PageSize;
        }
        $MinPageSize += $MaxSectionSize;
        if ($this->PageSize && $MinPageSize && $this->PageSize < $MinPageSize)
            $this->PageSize = $MinPageSize;
        $this->PageNumber = $this->ViewMode == "Print" ? 1 : intval(CCGetParam($this->ComponentName . "Page", 1));
        if ($this->PageNumber <= 0 ) {
            $this->PageNumber = 1;
        }
        $this->Visible = (CCSecurityAccessCheck("3") == "success");

        $this->Report_TotalRecords = new clsControl(ccsReportLabel, "Report_TotalRecords", "Report_TotalRecords", ccsText, "", 0, $this);
        $this->Report_TotalRecords->TotalFunction = "Count";
        $this->Report_TotalRecords->IsEmptySource = true;
        $this->NoRecords = new clsPanel("NoRecords", $this);
        $this->GroupSex2 = new clsControl(ccsReportLabel, "GroupSex2", "GroupSex2", ccsInteger, "", "", $this);
        $this->CountGroupSex = new clsControl(ccsReportLabel, "CountGroupSex", "CountGroupSex", ccsText, "", 0, $this);
        $this->CountGroupSex->TotalFunction = "Count";
    }
//End Class_Initialize Event

//Initialize Method @127-6C59EE65
    function Initialize()
    {
        if(!$this->Visible) return;

        $this->DataSource->PageSize = $this->PageSize;
        $this->DataSource->AbsolutePage = $this->PageNumber;
        $this->DataSource->SetOrder($this->SorterName, $this->SorterDirection);
    }
//End Initialize Method

//CheckErrors Method @127-CD002B70
    function CheckErrors()
    {
        $errors = false;
        $errors = ($errors || $this->Report_TotalRecords->Errors->Count());
        $errors = ($errors || $this->GroupSex2->Errors->Count());
        $errors = ($errors || $this->CountGroupSex->Errors->Count());
        $errors = ($errors || $this->Errors->Count());
        $errors = ($errors || $this->DataSource->Errors->Count());
        return $errors;
    }
//End CheckErrors Method

//GetErrors Method @127-B2E862A1
    function GetErrors()
    {
        $errors = "";
        $errors = ComposeStrings($errors, $this->Report_TotalRecords->Errors->ToString());
        $errors = ComposeStrings($errors, $this->GroupSex2->Errors->ToString());
        $errors = ComposeStrings($errors, $this->CountGroupSex->Errors->ToString());
        $errors = ComposeStrings($errors, $this->Errors->ToString());
        $errors = ComposeStrings($errors, $this->DataSource->Errors->ToString());
        return $errors;
    }
//End GetErrors Method

//Show Method @127-6255EA9D
    function Show()
    {
        global $Tpl;
        global $CCSLocales;
        if(!$this->Visible) return;

        $ShownRecords = 0;

        $this->DataSource->Parameters["urls_BirthDate"] = CCGetFromGet("s_BirthDate", NULL);
        $this->DataSource->Parameters["urls_BirthDate1"] = CCGetFromGet("s_BirthDate1", NULL);
        $this->DataSource->Parameters["sess_Facilities"] = CCGetSession("s_Facilities", NULL);

        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeSelect", $this);


        $this->DataSource->Prepare();
        $this->DataSource->Open();

        $SexKey = "";
        $Groups = new clsGroupsCollectionNewBorn29($this);
        $Groups->PageSize = $this->PageSize > 0 ? $this->PageSize : 0;

        $is_next_record = $this->DataSource->next_record();
        $this->IsEmpty = ! $is_next_record;
        while($is_next_record) {
            $this->DataSource->SetValues();
            $this->GroupSex2->SetValue($this->DataSource->GroupSex2->GetValue());
            $this->CountGroupSex->SetValue($this->DataSource->CountGroupSex->GetValue());
            $this->Report_TotalRecords->SetValue(1);
            if (count($Groups->Groups) == 0) $Groups->OpenGroup("Report");
            if (count($Groups->Groups) == 2 or $SexKey != $this->DataSource->f("Sex")) {
                $Groups->OpenGroup("Sex");
            }
            $Groups->AddItem();
            $SexKey = $this->DataSource->f("Sex");
            $is_next_record = $this->DataSource->next_record();
            if (!$is_next_record || $SexKey != $this->DataSource->f("Sex")) {
                $Groups->CloseGroup("Sex");
            }
        }
        if (!count($Groups->Groups)) 
            $Groups->OpenGroup("Report");
        else
            $this->NoRecords->Visible = false;
        $Groups->CloseGroup("Report");
        $this->TotalPages = $Groups->TotalPages;
        $this->TotalRows = $Groups->TotalRows;

        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeShow", $this);
        if(!$this->Visible) return;

        $this->Attributes->Show();
        $ReportBlock = "Report " . $this->ComponentName;
        $ParentPath = $Tpl->block_path;
        $Tpl->block_path = $ParentPath . "/" . $ReportBlock;

        if($this->CheckErrors()) {
            $Tpl->replaceblock("", $this->GetErrors());
            $Tpl->block_path = $ParentPath;
            return;
        } else {
            $items = & $Groups->Groups;
            $i = $Groups->Pages[min($this->PageNumber, $Groups->TotalPages) - 1];
            $this->ControlsVisible["GroupSex2"] = $this->GroupSex2->Visible;
            $this->ControlsVisible["CountGroupSex"] = $this->CountGroupSex->Visible;
            do {
                $this->Attributes->RestoreFromArray($items[$i]->Attributes);
                $this->RowNumber = $items[$i]->RowNumber;
                switch ($items[$i]->GroupType) {
                    Case "":
                        $this->Detail->CCSEventResult = CCGetEvent($this->Detail->CCSEvents, "BeforeShow", $this->Detail);
                        if ($this->Detail->Visible) {
                            $this->Attributes->Show();
                            $Tpl->parseto("Section Detail", true, "Section Detail");
                        }
                        break;
                    case "Report":
                        if ($items[$i]->Mode == 1) {
                            $this->Report_TotalRecords->SetValue($items[$i]->Report_TotalRecords);
                            $this->Report_TotalRecords->Attributes->RestoreFromArray($items[$i]->_Report_TotalRecordsAttributes);
                            $this->Report_Header->CCSEventResult = CCGetEvent($this->Report_Header->CCSEvents, "BeforeShow", $this->Report_Header);
                            if ($this->Report_Header->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Report_Header";
                                $this->Attributes->Show();
                                $this->Report_TotalRecords->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Report_Header", true, "Section Detail");
                            }
                        }
                        if ($items[$i]->Mode == 2) {
                            $this->Report_Footer->CCSEventResult = CCGetEvent($this->Report_Footer->CCSEvents, "BeforeShow", $this->Report_Footer);
                            if ($this->Report_Footer->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Report_Footer";
                                $this->NoRecords->Show();
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Report_Footer", true, "Section Detail");
                            }
                        }
                        break;
                    case "Page":
                        if ($items[$i]->Mode == 1) {
                            $this->Page_Header->CCSEventResult = CCGetEvent($this->Page_Header->CCSEvents, "BeforeShow", $this->Page_Header);
                            if ($this->Page_Header->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Page_Header";
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Page_Header", true, "Section Detail");
                            }
                        }
                        if ($items[$i]->Mode == 2 && !$this->UseClientPaging || $items[$i]->Mode == 1 && $this->UseClientPaging) {
                            $this->Page_Footer->CCSEventResult = CCGetEvent($this->Page_Footer->CCSEvents, "BeforeShow", $this->Page_Footer);
                            if ($this->Page_Footer->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Page_Footer";
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Page_Footer", true, "Section Detail");
                            }
                        }
                        break;
                    case "Sex":
                        if ($items[$i]->Mode == 1) {
                            $this->GroupSex2->SetValue($items[$i]->GroupSex2);
                            $this->GroupSex2->Attributes->RestoreFromArray($items[$i]->_GroupSex2Attributes);
                            $this->CountGroupSex->SetValue($items[$i]->CountGroupSex);
                            $this->CountGroupSex->Attributes->RestoreFromArray($items[$i]->_CountGroupSexAttributes);
                            $this->Sex_Header->CCSEventResult = CCGetEvent($this->Sex_Header->CCSEvents, "BeforeShow", $this->Sex_Header);
                            if ($this->Sex_Header->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Sex_Header";
                                $this->Attributes->Show();
                                $this->GroupSex2->Show();
                                $this->CountGroupSex->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Sex_Header", true, "Section Detail");
                            }
                        }
                        if ($items[$i]->Mode == 2) {
                            $this->Sex_Footer->CCSEventResult = CCGetEvent($this->Sex_Footer->CCSEvents, "BeforeShow", $this->Sex_Footer);
                            if ($this->Sex_Footer->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Sex_Footer";
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Sex_Footer", true, "Section Detail");
                            }
                        }
                        break;
                }
                $i++;
            } while ($i < count($items) && ($this->ViewMode == "Print" ||  !($i > 1 && $items[$i]->GroupType == 'Page' && $items[$i]->Mode == 1)));
            $Tpl->block_path = $ParentPath;
            $Tpl->parse($ReportBlock);
            $this->DataSource->close();
        }

    }
//End Show Method

} //End NewBorn29 Class @127-FCB6E20C

class clsNewBorn29DataSource extends clsDBregistry_db {  //NewBorn29DataSource Class @127-4073E9FD

//DataSource Variables @127-F5055419
    public $Parent = "";
    public $CCSEvents = "";
    public $CCSEventResult;
    public $ErrorBlock;
    public $CmdExecution;

    public $wp;


    // Datasource fields
    public $GroupSex2;
    public $CountGroupSex;
//End DataSource Variables

//DataSourceClass_Initialize Event @127-8E3E2000
    function clsNewBorn29DataSource(& $Parent)
    {
        $this->Parent = & $Parent;
        $this->ErrorBlock = "Report NewBorn29";
        $this->Initialize();
        $this->GroupSex2 = new clsField("GroupSex2", ccsInteger, "");
        
        $this->CountGroupSex = new clsField("CountGroupSex", ccsText, "");
        

    }
//End DataSourceClass_Initialize Event

//SetOrder Method @127-9E1383D1
    function SetOrder($SorterName, $SorterDirection)
    {
        $this->Order = "";
        $this->Order = CCGetOrder($this->Order, $SorterName, $SorterDirection, 
            "");
    }
//End SetOrder Method

//Prepare Method @127-FB062DE5
    function Prepare()
    {
        global $CCSLocales;
        global $DefaultDateFormat;
        $this->wp = new clsSQLParameters($this->ErrorBlock);
        $this->wp->AddParameter("3", "urls_BirthDate", ccsDate, array("ShortDate"), array("yyyy", "-", "mm", "-", "dd", " ", "HH", ":", "nn", ":", "ss"), $this->Parameters["urls_BirthDate"], "", false);
        $this->wp->AddParameter("4", "urls_BirthDate1", ccsDate, array("ShortDate"), array("yyyy", "-", "mm", "-", "dd", " ", "HH", ":", "nn", ":", "ss"), $this->Parameters["urls_BirthDate1"], "", false);
        $this->wp->AddParameter("5", "sess_Facilities", ccsInteger, "", "", $this->Parameters["sess_Facilities"], 0, false);
        $this->wp->Criterion[1] = "( newborn.Weight>=500 )";
        $this->wp->Criterion[2] = "( newborn.Weight<=999 )";
        $this->wp->Criterion[3] = $this->wp->Operation(opGreaterThanOrEqual, "newborn.BirthDate", $this->wp->GetDBValue("3"), $this->ToSQL($this->wp->GetDBValue("3"), ccsDate),false);
        $this->wp->Criterion[4] = $this->wp->Operation(opLessThanOrEqual, "newborn.BirthDate", $this->wp->GetDBValue("4"), $this->ToSQL($this->wp->GetDBValue("4"), ccsDate),false);
        $this->wp->Criterion[5] = $this->wp->Operation(opIn, "facilities.FacilityID", $this->wp->GetDBValue("5"), $this->ToSQL($this->wp->GetDBValue("5"), ccsInteger, true),false);
        $this->wp->Criterion[6] = "( newborn.Died=1 )";
        $this->wp->Criterion[7] = "( newborn.DiedID=1 )";
        $this->Where = $this->wp->opAND(
             false, $this->wp->opAND(
             false, $this->wp->opAND(
             false, $this->wp->opAND(
             false, $this->wp->opAND(
             false, $this->wp->opAND(
             false, 
             $this->wp->Criterion[1], 
             $this->wp->Criterion[2]), 
             $this->wp->Criterion[3]), 
             $this->wp->Criterion[4]), 
             $this->wp->Criterion[5]), 
             $this->wp->Criterion[6]), 
             $this->wp->Criterion[7]);
    }
//End Prepare Method

//Open Method @127-CA3C9D7B
    function Open()
    {
        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeBuildSelect", $this->Parent);
        $this->SQL = "SELECT delivery.DeliveryID AS delivery_DeliveryID, FacilityName, Sex, NewBornID, BirthDate, Weight \n\n" .
        "FROM (delivery INNER JOIN facilities ON\n\n" .
        "delivery.FacilityID = facilities.FacilityID) INNER JOIN newborn ON\n\n" .
        "newborn.DeliveryID = delivery.DeliveryID {SQL_Where} {SQL_OrderBy}";
        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeExecuteSelect", $this->Parent);
        $this->query(CCBuildSQL($this->SQL, $this->Where, "newborn.Sex asc" .  ($this->Order ? ", " . $this->Order: "")));
        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "AfterExecuteSelect", $this->Parent);
    }
//End Open Method

//SetValues Method @127-F73A025D
    function SetValues()
    {
        $this->GroupSex2->SetDBValue(trim($this->f("Sex")));
        $this->CountGroupSex->SetDBValue($this->f("Sex"));
    }
//End SetValues Method

} //End NewBorn29DataSource Class @127-FCB6E20C

//NewBorn30 ReportGroup class @191-9FC2066C
class clsReportGroupNewBorn30 {
    public $GroupType;
    public $mode; //1 - open, 2 - close
    public $Report_TotalRecords, $_Report_TotalRecordsAttributes;
    public $GroupSex2, $_GroupSex2Attributes;
    public $CountGroupSex, $_CountGroupSexAttributes;
    public $Attributes;
    public $ReportTotalIndex = 0;
    public $PageTotalIndex;
    public $PageNumber;
    public $RowNumber;
    public $Parent;
    public $SexTotalIndex;

    function clsReportGroupNewBorn30(& $parent) {
        $this->Parent = & $parent;
        $this->Attributes = $this->Parent->Attributes->GetAsArray();
    }
    function SetControls($PrevGroup = "") {
        $this->GroupSex2 = $this->Parent->GroupSex2->Value;
    }

    function SetTotalControls($mode = "", $PrevGroup = "") {
        $this->Report_TotalRecords = $this->Parent->Report_TotalRecords->GetTotalValue($mode);
        $this->CountGroupSex = $this->Parent->CountGroupSex->GetTotalValue($mode);
        $this->_Report_TotalRecordsAttributes = $this->Parent->Report_TotalRecords->Attributes->GetAsArray();
        $this->_GroupSex2Attributes = $this->Parent->GroupSex2->Attributes->GetAsArray();
        $this->_CountGroupSexAttributes = $this->Parent->CountGroupSex->Attributes->GetAsArray();
    }
    function SyncWithHeader(& $Header) {
        $Header->Report_TotalRecords = $this->Report_TotalRecords;
        $Header->_Report_TotalRecordsAttributes = $this->_Report_TotalRecordsAttributes;
        $Header->CountGroupSex = $this->CountGroupSex;
        $Header->_CountGroupSexAttributes = $this->_CountGroupSexAttributes;
        $this->GroupSex2 = $Header->GroupSex2;
        $Header->_GroupSex2Attributes = $this->_GroupSex2Attributes;
        $this->Parent->GroupSex2->Value = $Header->GroupSex2;
        $this->Parent->GroupSex2->Attributes->RestoreFromArray($Header->_GroupSex2Attributes);
    }
    function ChangeTotalControls() {
        $this->Report_TotalRecords = $this->Parent->Report_TotalRecords->GetValue();
        $this->CountGroupSex = $this->Parent->CountGroupSex->GetValue();
    }
}
//End NewBorn30 ReportGroup class

//NewBorn30 GroupsCollection class @191-203F7BE2
class clsGroupsCollectionNewBorn30 {
    public $Groups;
    public $mPageCurrentHeaderIndex;
    public $mSexCurrentHeaderIndex;
    public $PageSize;
    public $TotalPages = 0;
    public $TotalRows = 0;
    public $CurrentPageSize = 0;
    public $Pages;
    public $Parent;
    public $LastDetailIndex;

    function clsGroupsCollectionNewBorn30(& $parent) {
        $this->Parent = & $parent;
        $this->Groups = array();
        $this->Pages  = array();
        $this->mSexCurrentHeaderIndex = 1;
        $this->mReportTotalIndex = 0;
        $this->mPageTotalIndex = 1;
    }

    function & InitGroup() {
        $group = new clsReportGroupNewBorn30($this->Parent);
        $group->RowNumber = $this->TotalRows + 1;
        $group->PageNumber = $this->TotalPages;
        $group->PageTotalIndex = $this->mPageCurrentHeaderIndex;
        $group->SexTotalIndex = $this->mSexCurrentHeaderIndex;
        return $group;
    }

    function RestoreValues() {
        $this->Parent->Report_TotalRecords->Value = $this->Parent->Report_TotalRecords->initialValue;
        $this->Parent->GroupSex2->Value = $this->Parent->GroupSex2->initialValue;
        $this->Parent->CountGroupSex->Value = $this->Parent->CountGroupSex->initialValue;
    }

    function OpenPage() {
        $this->TotalPages++;
        $Group = & $this->InitGroup();
        $this->Parent->Page_Header->CCSEventResult = CCGetEvent($this->Parent->Page_Header->CCSEvents, "OnInitialize", $this->Parent->Page_Header);
        if ($this->Parent->Page_Header->Visible)
            $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Page_Header->Height;
        $Group->SetTotalControls("GetNextValue");
        $this->Parent->Page_Header->CCSEventResult = CCGetEvent($this->Parent->Page_Header->CCSEvents, "OnCalculate", $this->Parent->Page_Header);
        $Group->SetControls();
        $Group->Mode = 1;
        $Group->GroupType = "Page";
        $Group->PageTotalIndex = count($this->Groups);
        $this->mPageCurrentHeaderIndex = count($this->Groups);
        $this->Groups[] =  & $Group;
        $this->Pages[] =  count($this->Groups) == 2 ? 0 : count($this->Groups) - 1;
    }

    function OpenGroup($groupName) {
        $Group = "";
        $OpenFlag = false;
        if ($groupName == "Report") {
            $Group = & $this->InitGroup(true);
            $this->Parent->Report_Header->CCSEventResult = CCGetEvent($this->Parent->Report_Header->CCSEvents, "OnInitialize", $this->Parent->Report_Header);
            if ($this->Parent->Report_Header->Visible) 
                $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Report_Header->Height;
                $Group->SetTotalControls("GetNextValue");
            $this->Parent->Report_Header->CCSEventResult = CCGetEvent($this->Parent->Report_Header->CCSEvents, "OnCalculate", $this->Parent->Report_Header);
            $Group->SetControls();
            $Group->Mode = 1;
            $Group->GroupType = "Report";
            $this->Groups[] = & $Group;
            $this->OpenPage();
        }
        if ($groupName == "Sex") {
            $GroupSex = & $this->InitGroup(true);
            $this->Parent->Sex_Header->CCSEventResult = CCGetEvent($this->Parent->Sex_Header->CCSEvents, "OnInitialize", $this->Parent->Sex_Header);
            if ($this->Parent->Page_Footer->Visible) 
                $OverSize = $this->Parent->Sex_Header->Height + $this->Parent->Page_Footer->Height;
            else
                $OverSize = $this->Parent->Sex_Header->Height;
            if (($this->PageSize > 0) and $this->Parent->Sex_Header->Visible and ($this->CurrentPageSize + $OverSize > $this->PageSize)) {
                $this->ClosePage();
                $this->OpenPage();
            }
            if ($this->Parent->Sex_Header->Visible)
                $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Sex_Header->Height;
                $GroupSex->SetTotalControls("GetNextValue");
            $this->Parent->Sex_Header->CCSEventResult = CCGetEvent($this->Parent->Sex_Header->CCSEvents, "OnCalculate", $this->Parent->Sex_Header);
            $GroupSex->SetControls();
            $GroupSex->Mode = 1;
            $GroupSex->GroupType = "Sex";
            $this->mSexCurrentHeaderIndex = count($this->Groups);
            $this->Groups[] = & $GroupSex;
            $this->Parent->CountGroupSex->Reset();
        }
    }

    function ClosePage() {
        $Group = & $this->InitGroup();
        $this->Parent->Page_Footer->CCSEventResult = CCGetEvent($this->Parent->Page_Footer->CCSEvents, "OnInitialize", $this->Parent->Page_Footer);
        $Group->SetTotalControls("GetPrevValue");
        $Group->SyncWithHeader($this->Groups[$this->mPageCurrentHeaderIndex]);
        $this->Parent->Page_Footer->CCSEventResult = CCGetEvent($this->Parent->Page_Footer->CCSEvents, "OnCalculate", $this->Parent->Page_Footer);
        $Group->SetControls();
        $this->RestoreValues();
        $this->CurrentPageSize = 0;
        $Group->Mode = 2;
        $Group->GroupType = "Page";
        $this->Groups[] = & $Group;
    }

    function CloseGroup($groupName)
    {
        $Group = "";
        if ($groupName == "Report") {
            $Group = & $this->InitGroup(true);
            $this->Parent->Report_Footer->CCSEventResult = CCGetEvent($this->Parent->Report_Footer->CCSEvents, "OnInitialize", $this->Parent->Report_Footer);
            if ($this->Parent->Page_Footer->Visible) 
                $OverSize = $this->Parent->Report_Footer->Height + $this->Parent->Page_Footer->Height;
            else
                $OverSize = $this->Parent->Report_Footer->Height;
            if (($this->PageSize > 0) and $this->Parent->Report_Footer->Visible and ($this->CurrentPageSize + $OverSize > $this->PageSize)) {
                $this->ClosePage();
                $this->OpenPage();
            }
            $Group->SetTotalControls("GetPrevValue");
            $Group->SyncWithHeader($this->Groups[0]);
            if ($this->Parent->Report_Footer->Visible)
                $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Report_Footer->Height;
            $this->Parent->Report_Footer->CCSEventResult = CCGetEvent($this->Parent->Report_Footer->CCSEvents, "OnCalculate", $this->Parent->Report_Footer);
            $Group->SetControls();
            $this->RestoreValues();
            $Group->Mode = 2;
            $Group->GroupType = "Report";
            $this->Groups[] = & $Group;
            $this->ClosePage();
            return;
        }
        $GroupSex = & $this->InitGroup(true);
        $this->Parent->Sex_Footer->CCSEventResult = CCGetEvent($this->Parent->Sex_Footer->CCSEvents, "OnInitialize", $this->Parent->Sex_Footer);
        if ($this->Parent->Page_Footer->Visible) 
            $OverSize = $this->Parent->Sex_Footer->Height + $this->Parent->Page_Footer->Height;
        else
            $OverSize = $this->Parent->Sex_Footer->Height;
        if (($this->PageSize > 0) and $this->Parent->Sex_Footer->Visible and ($this->CurrentPageSize + $OverSize > $this->PageSize)) {
            $this->ClosePage();
            $this->OpenPage();
        }
        $GroupSex->SetTotalControls("GetPrevValue");
        $GroupSex->SyncWithHeader($this->Groups[$this->mSexCurrentHeaderIndex]);
        if ($this->Parent->Sex_Footer->Visible)
            $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Sex_Footer->Height;
        $this->Parent->Sex_Footer->CCSEventResult = CCGetEvent($this->Parent->Sex_Footer->CCSEvents, "OnCalculate", $this->Parent->Sex_Footer);
        $GroupSex->SetControls();
        $this->Parent->CountGroupSex->Reset();
        $this->RestoreValues();
        $GroupSex->Mode = 2;
        $GroupSex->GroupType ="Sex";
        $this->Groups[] = & $GroupSex;
    }

    function AddItem()
    {
        $Group = & $this->InitGroup(true);
        $this->Parent->Detail->CCSEventResult = CCGetEvent($this->Parent->Detail->CCSEvents, "OnInitialize", $this->Parent->Detail);
        if ($this->Parent->Page_Footer->Visible) 
            $OverSize = $this->Parent->Detail->Height + $this->Parent->Page_Footer->Height;
        else
            $OverSize = $this->Parent->Detail->Height;
        if (($this->PageSize > 0) and $this->Parent->Detail->Visible and ($this->CurrentPageSize + $OverSize > $this->PageSize)) {
            $this->ClosePage();
            $this->OpenPage();
        }
        $this->TotalRows++;
        if ($this->LastDetailIndex)
            $PrevGroup = & $this->Groups[$this->LastDetailIndex];
        else
            $PrevGroup = "";
        $Group->SetTotalControls("", $PrevGroup);
        if ($this->Parent->Detail->Visible)
            $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Detail->Height;
        $this->Parent->Detail->CCSEventResult = CCGetEvent($this->Parent->Detail->CCSEvents, "OnCalculate", $this->Parent->Detail);
        $Group->SetControls($PrevGroup);
        $this->LastDetailIndex = count($this->Groups);
        $this->Groups[] = & $Group;
    }
}
//End NewBorn30 GroupsCollection class

class clsReportNewBorn30 { //NewBorn30 Class @191-41CD4316

//NewBorn30 Variables @191-80D63D80

    public $ComponentType = "Report";
    public $PageSize;
    public $ComponentName;
    public $Visible;
    public $Errors;
    public $CCSEvents = array();
    public $CCSEventResult;
    public $RelativePath = "";
    public $ViewMode = "Web";
    public $TemplateBlock;
    public $PageNumber;
    public $RowNumber;
    public $TotalRows;
    public $TotalPages;
    public $ControlsVisible = array();
    public $IsEmpty;
    public $Attributes;
    public $DetailBlock, $Detail;
    public $Report_FooterBlock, $Report_Footer;
    public $Report_HeaderBlock, $Report_Header;
    public $Page_FooterBlock, $Page_Footer;
    public $Page_HeaderBlock, $Page_Header;
    public $Sex_HeaderBlock, $Sex_Header;
    public $Sex_FooterBlock, $Sex_Footer;
    public $SorterName, $SorterDirection;

    public $ds;
    public $DataSource;
    public $UseClientPaging = false;

    //Report Controls
    public $StaticControls, $RowControls, $Report_FooterControls, $Report_HeaderControls;
    public $Page_FooterControls, $Page_HeaderControls;
    public $Sex_HeaderControls, $Sex_FooterControls;
//End NewBorn30 Variables

//Class_Initialize Event @191-C9EA80CC
    function clsReportNewBorn30($RelativePath = "", & $Parent)
    {
        global $FileName;
        global $CCSLocales;
        global $DefaultDateFormat;
        $this->ComponentName = "NewBorn30";
        $this->Visible = True;
        $this->Parent = & $Parent;
        $this->RelativePath = $RelativePath;
        $this->Attributes = new clsAttributes($this->ComponentName . ":");
        $this->Detail = new clsSection($this);
        $MinPageSize = 0;
        $MaxSectionSize = 0;
        $this->Detail->Height = 1;
        $MaxSectionSize = max($MaxSectionSize, $this->Detail->Height);
        $this->Report_Footer = new clsSection($this);
        $this->Report_Header = new clsSection($this);
        $this->Page_Footer = new clsSection($this);
        $this->Page_Footer->Height = 1;
        $MinPageSize += $this->Page_Footer->Height;
        $this->Page_Header = new clsSection($this);
        $this->Page_Header->Height = 1;
        $MinPageSize += $this->Page_Header->Height;
        $this->Sex_Footer = new clsSection($this);
        $this->Sex_Footer->Height = 1;
        $MaxSectionSize = max($MaxSectionSize, $this->Sex_Footer->Height);
        $this->Sex_Header = new clsSection($this);
        $this->Sex_Header->Height = 1;
        $MaxSectionSize = max($MaxSectionSize, $this->Sex_Header->Height);
        $this->Errors = new clsErrors();
        $this->DataSource = new clsNewBorn30DataSource($this);
        $this->ds = & $this->DataSource;
        $PageSize = CCGetParam($this->ComponentName . "PageSize", "");
        if(is_numeric($PageSize) && $PageSize > 0) {
            $this->PageSize = $PageSize;
        } else {
            if (!is_numeric($PageSize) || $PageSize < 0)
                $this->PageSize = 0;
             else if ($PageSize == "0")
                $this->PageSize = 0;
             else 
                $this->PageSize = $PageSize;
        }
        $MinPageSize += $MaxSectionSize;
        if ($this->PageSize && $MinPageSize && $this->PageSize < $MinPageSize)
            $this->PageSize = $MinPageSize;
        $this->PageNumber = $this->ViewMode == "Print" ? 1 : intval(CCGetParam($this->ComponentName . "Page", 1));
        if ($this->PageNumber <= 0 ) {
            $this->PageNumber = 1;
        }
        $this->Visible = (CCSecurityAccessCheck("3") == "success");

        $this->Report_TotalRecords = new clsControl(ccsReportLabel, "Report_TotalRecords", "Report_TotalRecords", ccsText, "", 0, $this);
        $this->Report_TotalRecords->TotalFunction = "Count";
        $this->Report_TotalRecords->IsEmptySource = true;
        $this->NoRecords = new clsPanel("NoRecords", $this);
        $this->GroupSex2 = new clsControl(ccsReportLabel, "GroupSex2", "GroupSex2", ccsInteger, "", "", $this);
        $this->CountGroupSex = new clsControl(ccsReportLabel, "CountGroupSex", "CountGroupSex", ccsText, "", 0, $this);
        $this->CountGroupSex->TotalFunction = "Count";
    }
//End Class_Initialize Event

//Initialize Method @191-6C59EE65
    function Initialize()
    {
        if(!$this->Visible) return;

        $this->DataSource->PageSize = $this->PageSize;
        $this->DataSource->AbsolutePage = $this->PageNumber;
        $this->DataSource->SetOrder($this->SorterName, $this->SorterDirection);
    }
//End Initialize Method

//CheckErrors Method @191-CD002B70
    function CheckErrors()
    {
        $errors = false;
        $errors = ($errors || $this->Report_TotalRecords->Errors->Count());
        $errors = ($errors || $this->GroupSex2->Errors->Count());
        $errors = ($errors || $this->CountGroupSex->Errors->Count());
        $errors = ($errors || $this->Errors->Count());
        $errors = ($errors || $this->DataSource->Errors->Count());
        return $errors;
    }
//End CheckErrors Method

//GetErrors Method @191-B2E862A1
    function GetErrors()
    {
        $errors = "";
        $errors = ComposeStrings($errors, $this->Report_TotalRecords->Errors->ToString());
        $errors = ComposeStrings($errors, $this->GroupSex2->Errors->ToString());
        $errors = ComposeStrings($errors, $this->CountGroupSex->Errors->ToString());
        $errors = ComposeStrings($errors, $this->Errors->ToString());
        $errors = ComposeStrings($errors, $this->DataSource->Errors->ToString());
        return $errors;
    }
//End GetErrors Method

//Show Method @191-B5FC6A08
    function Show()
    {
        global $Tpl;
        global $CCSLocales;
        if(!$this->Visible) return;

        $ShownRecords = 0;

        $this->DataSource->Parameters["urls_BirthDate"] = CCGetFromGet("s_BirthDate", NULL);
        $this->DataSource->Parameters["urls_BirthDate1"] = CCGetFromGet("s_BirthDate1", NULL);
        $this->DataSource->Parameters["sess_Facilities"] = CCGetSession("s_Facilities", NULL);

        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeSelect", $this);


        $this->DataSource->Prepare();
        $this->DataSource->Open();

        $SexKey = "";
        $Groups = new clsGroupsCollectionNewBorn30($this);
        $Groups->PageSize = $this->PageSize > 0 ? $this->PageSize : 0;

        $is_next_record = $this->DataSource->next_record();
        $this->IsEmpty = ! $is_next_record;
        while($is_next_record) {
            $this->DataSource->SetValues();
            $this->GroupSex2->SetValue($this->DataSource->GroupSex2->GetValue());
            $this->CountGroupSex->SetValue($this->DataSource->CountGroupSex->GetValue());
            $this->Report_TotalRecords->SetValue(1);
            if (count($Groups->Groups) == 0) $Groups->OpenGroup("Report");
            if (count($Groups->Groups) == 2 or $SexKey != $this->DataSource->f("Sex")) {
                $Groups->OpenGroup("Sex");
            }
            $Groups->AddItem();
            $SexKey = $this->DataSource->f("Sex");
            $is_next_record = $this->DataSource->next_record();
            if (!$is_next_record || $SexKey != $this->DataSource->f("Sex")) {
                $Groups->CloseGroup("Sex");
            }
        }
        if (!count($Groups->Groups)) 
            $Groups->OpenGroup("Report");
        else
            $this->NoRecords->Visible = false;
        $Groups->CloseGroup("Report");
        $this->TotalPages = $Groups->TotalPages;
        $this->TotalRows = $Groups->TotalRows;

        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeShow", $this);
        if(!$this->Visible) return;

        $this->Attributes->Show();
        $ReportBlock = "Report " . $this->ComponentName;
        $ParentPath = $Tpl->block_path;
        $Tpl->block_path = $ParentPath . "/" . $ReportBlock;

        if($this->CheckErrors()) {
            $Tpl->replaceblock("", $this->GetErrors());
            $Tpl->block_path = $ParentPath;
            return;
        } else {
            $items = & $Groups->Groups;
            $i = $Groups->Pages[min($this->PageNumber, $Groups->TotalPages) - 1];
            $this->ControlsVisible["GroupSex2"] = $this->GroupSex2->Visible;
            $this->ControlsVisible["CountGroupSex"] = $this->CountGroupSex->Visible;
            do {
                $this->Attributes->RestoreFromArray($items[$i]->Attributes);
                $this->RowNumber = $items[$i]->RowNumber;
                switch ($items[$i]->GroupType) {
                    Case "":
                        $this->Detail->CCSEventResult = CCGetEvent($this->Detail->CCSEvents, "BeforeShow", $this->Detail);
                        if ($this->Detail->Visible) {
                            $this->Attributes->Show();
                            $Tpl->parseto("Section Detail", true, "Section Detail");
                        }
                        break;
                    case "Report":
                        if ($items[$i]->Mode == 1) {
                            $this->Report_TotalRecords->SetValue($items[$i]->Report_TotalRecords);
                            $this->Report_TotalRecords->Attributes->RestoreFromArray($items[$i]->_Report_TotalRecordsAttributes);
                            $this->Report_Header->CCSEventResult = CCGetEvent($this->Report_Header->CCSEvents, "BeforeShow", $this->Report_Header);
                            if ($this->Report_Header->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Report_Header";
                                $this->Attributes->Show();
                                $this->Report_TotalRecords->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Report_Header", true, "Section Detail");
                            }
                        }
                        if ($items[$i]->Mode == 2) {
                            $this->Report_Footer->CCSEventResult = CCGetEvent($this->Report_Footer->CCSEvents, "BeforeShow", $this->Report_Footer);
                            if ($this->Report_Footer->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Report_Footer";
                                $this->NoRecords->Show();
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Report_Footer", true, "Section Detail");
                            }
                        }
                        break;
                    case "Page":
                        if ($items[$i]->Mode == 1) {
                            $this->Page_Header->CCSEventResult = CCGetEvent($this->Page_Header->CCSEvents, "BeforeShow", $this->Page_Header);
                            if ($this->Page_Header->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Page_Header";
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Page_Header", true, "Section Detail");
                            }
                        }
                        if ($items[$i]->Mode == 2 && !$this->UseClientPaging || $items[$i]->Mode == 1 && $this->UseClientPaging) {
                            $this->Page_Footer->CCSEventResult = CCGetEvent($this->Page_Footer->CCSEvents, "BeforeShow", $this->Page_Footer);
                            if ($this->Page_Footer->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Page_Footer";
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Page_Footer", true, "Section Detail");
                            }
                        }
                        break;
                    case "Sex":
                        if ($items[$i]->Mode == 1) {
                            $this->GroupSex2->SetValue($items[$i]->GroupSex2);
                            $this->GroupSex2->Attributes->RestoreFromArray($items[$i]->_GroupSex2Attributes);
                            $this->CountGroupSex->SetValue($items[$i]->CountGroupSex);
                            $this->CountGroupSex->Attributes->RestoreFromArray($items[$i]->_CountGroupSexAttributes);
                            $this->Sex_Header->CCSEventResult = CCGetEvent($this->Sex_Header->CCSEvents, "BeforeShow", $this->Sex_Header);
                            if ($this->Sex_Header->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Sex_Header";
                                $this->Attributes->Show();
                                $this->GroupSex2->Show();
                                $this->CountGroupSex->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Sex_Header", true, "Section Detail");
                            }
                        }
                        if ($items[$i]->Mode == 2) {
                            $this->Sex_Footer->CCSEventResult = CCGetEvent($this->Sex_Footer->CCSEvents, "BeforeShow", $this->Sex_Footer);
                            if ($this->Sex_Footer->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Sex_Footer";
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Sex_Footer", true, "Section Detail");
                            }
                        }
                        break;
                }
                $i++;
            } while ($i < count($items) && ($this->ViewMode == "Print" ||  !($i > 1 && $items[$i]->GroupType == 'Page' && $items[$i]->Mode == 1)));
            $Tpl->block_path = $ParentPath;
            $Tpl->parse($ReportBlock);
            $this->DataSource->close();
        }

    }
//End Show Method

} //End NewBorn30 Class @191-FCB6E20C

class clsNewBorn30DataSource extends clsDBregistry_db {  //NewBorn30DataSource Class @191-D0D88BA5

//DataSource Variables @191-F5055419
    public $Parent = "";
    public $CCSEvents = "";
    public $CCSEventResult;
    public $ErrorBlock;
    public $CmdExecution;

    public $wp;


    // Datasource fields
    public $GroupSex2;
    public $CountGroupSex;
//End DataSource Variables

//DataSourceClass_Initialize Event @191-80BBBB45
    function clsNewBorn30DataSource(& $Parent)
    {
        $this->Parent = & $Parent;
        $this->ErrorBlock = "Report NewBorn30";
        $this->Initialize();
        $this->GroupSex2 = new clsField("GroupSex2", ccsInteger, "");
        
        $this->CountGroupSex = new clsField("CountGroupSex", ccsText, "");
        

    }
//End DataSourceClass_Initialize Event

//SetOrder Method @191-9E1383D1
    function SetOrder($SorterName, $SorterDirection)
    {
        $this->Order = "";
        $this->Order = CCGetOrder($this->Order, $SorterName, $SorterDirection, 
            "");
    }
//End SetOrder Method

//Prepare Method @191-06526DEC
    function Prepare()
    {
        global $CCSLocales;
        global $DefaultDateFormat;
        $this->wp = new clsSQLParameters($this->ErrorBlock);
        $this->wp->AddParameter("3", "urls_BirthDate", ccsDate, array("ShortDate"), array("yyyy", "-", "mm", "-", "dd", " ", "HH", ":", "nn", ":", "ss"), $this->Parameters["urls_BirthDate"], "", false);
        $this->wp->AddParameter("4", "urls_BirthDate1", ccsDate, array("ShortDate"), array("yyyy", "-", "mm", "-", "dd", " ", "HH", ":", "nn", ":", "ss"), $this->Parameters["urls_BirthDate1"], "", false);
        $this->wp->AddParameter("5", "sess_Facilities", ccsInteger, "", "", $this->Parameters["sess_Facilities"], 0, false);
        $this->wp->Criterion[1] = "( newborn.Weight>=1000 )";
        $this->wp->Criterion[2] = "( newborn.Weight<=1499 )";
        $this->wp->Criterion[3] = $this->wp->Operation(opGreaterThanOrEqual, "newborn.BirthDate", $this->wp->GetDBValue("3"), $this->ToSQL($this->wp->GetDBValue("3"), ccsDate),false);
        $this->wp->Criterion[4] = $this->wp->Operation(opLessThanOrEqual, "newborn.BirthDate", $this->wp->GetDBValue("4"), $this->ToSQL($this->wp->GetDBValue("4"), ccsDate),false);
        $this->wp->Criterion[5] = $this->wp->Operation(opIn, "facilities.FacilityID", $this->wp->GetDBValue("5"), $this->ToSQL($this->wp->GetDBValue("5"), ccsInteger, true),false);
        $this->wp->Criterion[6] = "( newborn.Died=1 )";
        $this->wp->Criterion[7] = "( newborn.DiedID=1 )";
        $this->Where = $this->wp->opAND(
             false, $this->wp->opAND(
             false, $this->wp->opAND(
             false, $this->wp->opAND(
             false, $this->wp->opAND(
             false, $this->wp->opAND(
             false, 
             $this->wp->Criterion[1], 
             $this->wp->Criterion[2]), 
             $this->wp->Criterion[3]), 
             $this->wp->Criterion[4]), 
             $this->wp->Criterion[5]), 
             $this->wp->Criterion[6]), 
             $this->wp->Criterion[7]);
    }
//End Prepare Method

//Open Method @191-CA3C9D7B
    function Open()
    {
        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeBuildSelect", $this->Parent);
        $this->SQL = "SELECT delivery.DeliveryID AS delivery_DeliveryID, FacilityName, Sex, NewBornID, BirthDate, Weight \n\n" .
        "FROM (delivery INNER JOIN facilities ON\n\n" .
        "delivery.FacilityID = facilities.FacilityID) INNER JOIN newborn ON\n\n" .
        "newborn.DeliveryID = delivery.DeliveryID {SQL_Where} {SQL_OrderBy}";
        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeExecuteSelect", $this->Parent);
        $this->query(CCBuildSQL($this->SQL, $this->Where, "newborn.Sex asc" .  ($this->Order ? ", " . $this->Order: "")));
        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "AfterExecuteSelect", $this->Parent);
    }
//End Open Method

//SetValues Method @191-F73A025D
    function SetValues()
    {
        $this->GroupSex2->SetDBValue(trim($this->f("Sex")));
        $this->CountGroupSex->SetDBValue($this->f("Sex"));
    }
//End SetValues Method

} //End NewBorn30DataSource Class @191-FCB6E20C

//NewBorn31 ReportGroup class @255-86B57B55
class clsReportGroupNewBorn31 {
    public $GroupType;
    public $mode; //1 - open, 2 - close
    public $Report_TotalRecords, $_Report_TotalRecordsAttributes;
    public $GroupSex2, $_GroupSex2Attributes;
    public $CountGroupSex, $_CountGroupSexAttributes;
    public $Attributes;
    public $ReportTotalIndex = 0;
    public $PageTotalIndex;
    public $PageNumber;
    public $RowNumber;
    public $Parent;
    public $SexTotalIndex;

    function clsReportGroupNewBorn31(& $parent) {
        $this->Parent = & $parent;
        $this->Attributes = $this->Parent->Attributes->GetAsArray();
    }
    function SetControls($PrevGroup = "") {
        $this->GroupSex2 = $this->Parent->GroupSex2->Value;
    }

    function SetTotalControls($mode = "", $PrevGroup = "") {
        $this->Report_TotalRecords = $this->Parent->Report_TotalRecords->GetTotalValue($mode);
        $this->CountGroupSex = $this->Parent->CountGroupSex->GetTotalValue($mode);
        $this->_Report_TotalRecordsAttributes = $this->Parent->Report_TotalRecords->Attributes->GetAsArray();
        $this->_GroupSex2Attributes = $this->Parent->GroupSex2->Attributes->GetAsArray();
        $this->_CountGroupSexAttributes = $this->Parent->CountGroupSex->Attributes->GetAsArray();
    }
    function SyncWithHeader(& $Header) {
        $Header->Report_TotalRecords = $this->Report_TotalRecords;
        $Header->_Report_TotalRecordsAttributes = $this->_Report_TotalRecordsAttributes;
        $Header->CountGroupSex = $this->CountGroupSex;
        $Header->_CountGroupSexAttributes = $this->_CountGroupSexAttributes;
        $this->GroupSex2 = $Header->GroupSex2;
        $Header->_GroupSex2Attributes = $this->_GroupSex2Attributes;
        $this->Parent->GroupSex2->Value = $Header->GroupSex2;
        $this->Parent->GroupSex2->Attributes->RestoreFromArray($Header->_GroupSex2Attributes);
    }
    function ChangeTotalControls() {
        $this->Report_TotalRecords = $this->Parent->Report_TotalRecords->GetValue();
        $this->CountGroupSex = $this->Parent->CountGroupSex->GetValue();
    }
}
//End NewBorn31 ReportGroup class

//NewBorn31 GroupsCollection class @255-872CF610
class clsGroupsCollectionNewBorn31 {
    public $Groups;
    public $mPageCurrentHeaderIndex;
    public $mSexCurrentHeaderIndex;
    public $PageSize;
    public $TotalPages = 0;
    public $TotalRows = 0;
    public $CurrentPageSize = 0;
    public $Pages;
    public $Parent;
    public $LastDetailIndex;

    function clsGroupsCollectionNewBorn31(& $parent) {
        $this->Parent = & $parent;
        $this->Groups = array();
        $this->Pages  = array();
        $this->mSexCurrentHeaderIndex = 1;
        $this->mReportTotalIndex = 0;
        $this->mPageTotalIndex = 1;
    }

    function & InitGroup() {
        $group = new clsReportGroupNewBorn31($this->Parent);
        $group->RowNumber = $this->TotalRows + 1;
        $group->PageNumber = $this->TotalPages;
        $group->PageTotalIndex = $this->mPageCurrentHeaderIndex;
        $group->SexTotalIndex = $this->mSexCurrentHeaderIndex;
        return $group;
    }

    function RestoreValues() {
        $this->Parent->Report_TotalRecords->Value = $this->Parent->Report_TotalRecords->initialValue;
        $this->Parent->GroupSex2->Value = $this->Parent->GroupSex2->initialValue;
        $this->Parent->CountGroupSex->Value = $this->Parent->CountGroupSex->initialValue;
    }

    function OpenPage() {
        $this->TotalPages++;
        $Group = & $this->InitGroup();
        $this->Parent->Page_Header->CCSEventResult = CCGetEvent($this->Parent->Page_Header->CCSEvents, "OnInitialize", $this->Parent->Page_Header);
        if ($this->Parent->Page_Header->Visible)
            $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Page_Header->Height;
        $Group->SetTotalControls("GetNextValue");
        $this->Parent->Page_Header->CCSEventResult = CCGetEvent($this->Parent->Page_Header->CCSEvents, "OnCalculate", $this->Parent->Page_Header);
        $Group->SetControls();
        $Group->Mode = 1;
        $Group->GroupType = "Page";
        $Group->PageTotalIndex = count($this->Groups);
        $this->mPageCurrentHeaderIndex = count($this->Groups);
        $this->Groups[] =  & $Group;
        $this->Pages[] =  count($this->Groups) == 2 ? 0 : count($this->Groups) - 1;
    }

    function OpenGroup($groupName) {
        $Group = "";
        $OpenFlag = false;
        if ($groupName == "Report") {
            $Group = & $this->InitGroup(true);
            $this->Parent->Report_Header->CCSEventResult = CCGetEvent($this->Parent->Report_Header->CCSEvents, "OnInitialize", $this->Parent->Report_Header);
            if ($this->Parent->Report_Header->Visible) 
                $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Report_Header->Height;
                $Group->SetTotalControls("GetNextValue");
            $this->Parent->Report_Header->CCSEventResult = CCGetEvent($this->Parent->Report_Header->CCSEvents, "OnCalculate", $this->Parent->Report_Header);
            $Group->SetControls();
            $Group->Mode = 1;
            $Group->GroupType = "Report";
            $this->Groups[] = & $Group;
            $this->OpenPage();
        }
        if ($groupName == "Sex") {
            $GroupSex = & $this->InitGroup(true);
            $this->Parent->Sex_Header->CCSEventResult = CCGetEvent($this->Parent->Sex_Header->CCSEvents, "OnInitialize", $this->Parent->Sex_Header);
            if ($this->Parent->Page_Footer->Visible) 
                $OverSize = $this->Parent->Sex_Header->Height + $this->Parent->Page_Footer->Height;
            else
                $OverSize = $this->Parent->Sex_Header->Height;
            if (($this->PageSize > 0) and $this->Parent->Sex_Header->Visible and ($this->CurrentPageSize + $OverSize > $this->PageSize)) {
                $this->ClosePage();
                $this->OpenPage();
            }
            if ($this->Parent->Sex_Header->Visible)
                $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Sex_Header->Height;
                $GroupSex->SetTotalControls("GetNextValue");
            $this->Parent->Sex_Header->CCSEventResult = CCGetEvent($this->Parent->Sex_Header->CCSEvents, "OnCalculate", $this->Parent->Sex_Header);
            $GroupSex->SetControls();
            $GroupSex->Mode = 1;
            $GroupSex->GroupType = "Sex";
            $this->mSexCurrentHeaderIndex = count($this->Groups);
            $this->Groups[] = & $GroupSex;
            $this->Parent->CountGroupSex->Reset();
        }
    }

    function ClosePage() {
        $Group = & $this->InitGroup();
        $this->Parent->Page_Footer->CCSEventResult = CCGetEvent($this->Parent->Page_Footer->CCSEvents, "OnInitialize", $this->Parent->Page_Footer);
        $Group->SetTotalControls("GetPrevValue");
        $Group->SyncWithHeader($this->Groups[$this->mPageCurrentHeaderIndex]);
        $this->Parent->Page_Footer->CCSEventResult = CCGetEvent($this->Parent->Page_Footer->CCSEvents, "OnCalculate", $this->Parent->Page_Footer);
        $Group->SetControls();
        $this->RestoreValues();
        $this->CurrentPageSize = 0;
        $Group->Mode = 2;
        $Group->GroupType = "Page";
        $this->Groups[] = & $Group;
    }

    function CloseGroup($groupName)
    {
        $Group = "";
        if ($groupName == "Report") {
            $Group = & $this->InitGroup(true);
            $this->Parent->Report_Footer->CCSEventResult = CCGetEvent($this->Parent->Report_Footer->CCSEvents, "OnInitialize", $this->Parent->Report_Footer);
            if ($this->Parent->Page_Footer->Visible) 
                $OverSize = $this->Parent->Report_Footer->Height + $this->Parent->Page_Footer->Height;
            else
                $OverSize = $this->Parent->Report_Footer->Height;
            if (($this->PageSize > 0) and $this->Parent->Report_Footer->Visible and ($this->CurrentPageSize + $OverSize > $this->PageSize)) {
                $this->ClosePage();
                $this->OpenPage();
            }
            $Group->SetTotalControls("GetPrevValue");
            $Group->SyncWithHeader($this->Groups[0]);
            if ($this->Parent->Report_Footer->Visible)
                $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Report_Footer->Height;
            $this->Parent->Report_Footer->CCSEventResult = CCGetEvent($this->Parent->Report_Footer->CCSEvents, "OnCalculate", $this->Parent->Report_Footer);
            $Group->SetControls();
            $this->RestoreValues();
            $Group->Mode = 2;
            $Group->GroupType = "Report";
            $this->Groups[] = & $Group;
            $this->ClosePage();
            return;
        }
        $GroupSex = & $this->InitGroup(true);
        $this->Parent->Sex_Footer->CCSEventResult = CCGetEvent($this->Parent->Sex_Footer->CCSEvents, "OnInitialize", $this->Parent->Sex_Footer);
        if ($this->Parent->Page_Footer->Visible) 
            $OverSize = $this->Parent->Sex_Footer->Height + $this->Parent->Page_Footer->Height;
        else
            $OverSize = $this->Parent->Sex_Footer->Height;
        if (($this->PageSize > 0) and $this->Parent->Sex_Footer->Visible and ($this->CurrentPageSize + $OverSize > $this->PageSize)) {
            $this->ClosePage();
            $this->OpenPage();
        }
        $GroupSex->SetTotalControls("GetPrevValue");
        $GroupSex->SyncWithHeader($this->Groups[$this->mSexCurrentHeaderIndex]);
        if ($this->Parent->Sex_Footer->Visible)
            $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Sex_Footer->Height;
        $this->Parent->Sex_Footer->CCSEventResult = CCGetEvent($this->Parent->Sex_Footer->CCSEvents, "OnCalculate", $this->Parent->Sex_Footer);
        $GroupSex->SetControls();
        $this->Parent->CountGroupSex->Reset();
        $this->RestoreValues();
        $GroupSex->Mode = 2;
        $GroupSex->GroupType ="Sex";
        $this->Groups[] = & $GroupSex;
    }

    function AddItem()
    {
        $Group = & $this->InitGroup(true);
        $this->Parent->Detail->CCSEventResult = CCGetEvent($this->Parent->Detail->CCSEvents, "OnInitialize", $this->Parent->Detail);
        if ($this->Parent->Page_Footer->Visible) 
            $OverSize = $this->Parent->Detail->Height + $this->Parent->Page_Footer->Height;
        else
            $OverSize = $this->Parent->Detail->Height;
        if (($this->PageSize > 0) and $this->Parent->Detail->Visible and ($this->CurrentPageSize + $OverSize > $this->PageSize)) {
            $this->ClosePage();
            $this->OpenPage();
        }
        $this->TotalRows++;
        if ($this->LastDetailIndex)
            $PrevGroup = & $this->Groups[$this->LastDetailIndex];
        else
            $PrevGroup = "";
        $Group->SetTotalControls("", $PrevGroup);
        if ($this->Parent->Detail->Visible)
            $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Detail->Height;
        $this->Parent->Detail->CCSEventResult = CCGetEvent($this->Parent->Detail->CCSEvents, "OnCalculate", $this->Parent->Detail);
        $Group->SetControls($PrevGroup);
        $this->LastDetailIndex = count($this->Groups);
        $this->Groups[] = & $Group;
    }
}
//End NewBorn31 GroupsCollection class

class clsReportNewBorn31 { //NewBorn31 Class @255-58D67257

//NewBorn31 Variables @255-80D63D80

    public $ComponentType = "Report";
    public $PageSize;
    public $ComponentName;
    public $Visible;
    public $Errors;
    public $CCSEvents = array();
    public $CCSEventResult;
    public $RelativePath = "";
    public $ViewMode = "Web";
    public $TemplateBlock;
    public $PageNumber;
    public $RowNumber;
    public $TotalRows;
    public $TotalPages;
    public $ControlsVisible = array();
    public $IsEmpty;
    public $Attributes;
    public $DetailBlock, $Detail;
    public $Report_FooterBlock, $Report_Footer;
    public $Report_HeaderBlock, $Report_Header;
    public $Page_FooterBlock, $Page_Footer;
    public $Page_HeaderBlock, $Page_Header;
    public $Sex_HeaderBlock, $Sex_Header;
    public $Sex_FooterBlock, $Sex_Footer;
    public $SorterName, $SorterDirection;

    public $ds;
    public $DataSource;
    public $UseClientPaging = false;

    //Report Controls
    public $StaticControls, $RowControls, $Report_FooterControls, $Report_HeaderControls;
    public $Page_FooterControls, $Page_HeaderControls;
    public $Sex_HeaderControls, $Sex_FooterControls;
//End NewBorn31 Variables

//Class_Initialize Event @255-E9672342
    function clsReportNewBorn31($RelativePath = "", & $Parent)
    {
        global $FileName;
        global $CCSLocales;
        global $DefaultDateFormat;
        $this->ComponentName = "NewBorn31";
        $this->Visible = True;
        $this->Parent = & $Parent;
        $this->RelativePath = $RelativePath;
        $this->Attributes = new clsAttributes($this->ComponentName . ":");
        $this->Detail = new clsSection($this);
        $MinPageSize = 0;
        $MaxSectionSize = 0;
        $this->Detail->Height = 1;
        $MaxSectionSize = max($MaxSectionSize, $this->Detail->Height);
        $this->Report_Footer = new clsSection($this);
        $this->Report_Header = new clsSection($this);
        $this->Page_Footer = new clsSection($this);
        $this->Page_Footer->Height = 1;
        $MinPageSize += $this->Page_Footer->Height;
        $this->Page_Header = new clsSection($this);
        $this->Page_Header->Height = 1;
        $MinPageSize += $this->Page_Header->Height;
        $this->Sex_Footer = new clsSection($this);
        $this->Sex_Footer->Height = 1;
        $MaxSectionSize = max($MaxSectionSize, $this->Sex_Footer->Height);
        $this->Sex_Header = new clsSection($this);
        $this->Sex_Header->Height = 1;
        $MaxSectionSize = max($MaxSectionSize, $this->Sex_Header->Height);
        $this->Errors = new clsErrors();
        $this->DataSource = new clsNewBorn31DataSource($this);
        $this->ds = & $this->DataSource;
        $PageSize = CCGetParam($this->ComponentName . "PageSize", "");
        if(is_numeric($PageSize) && $PageSize > 0) {
            $this->PageSize = $PageSize;
        } else {
            if (!is_numeric($PageSize) || $PageSize < 0)
                $this->PageSize = 0;
             else if ($PageSize == "0")
                $this->PageSize = 0;
             else 
                $this->PageSize = $PageSize;
        }
        $MinPageSize += $MaxSectionSize;
        if ($this->PageSize && $MinPageSize && $this->PageSize < $MinPageSize)
            $this->PageSize = $MinPageSize;
        $this->PageNumber = $this->ViewMode == "Print" ? 1 : intval(CCGetParam($this->ComponentName . "Page", 1));
        if ($this->PageNumber <= 0 ) {
            $this->PageNumber = 1;
        }
        $this->Visible = (CCSecurityAccessCheck("3") == "success");

        $this->Report_TotalRecords = new clsControl(ccsReportLabel, "Report_TotalRecords", "Report_TotalRecords", ccsText, "", 0, $this);
        $this->Report_TotalRecords->TotalFunction = "Count";
        $this->Report_TotalRecords->IsEmptySource = true;
        $this->NoRecords = new clsPanel("NoRecords", $this);
        $this->GroupSex2 = new clsControl(ccsReportLabel, "GroupSex2", "GroupSex2", ccsInteger, "", "", $this);
        $this->CountGroupSex = new clsControl(ccsReportLabel, "CountGroupSex", "CountGroupSex", ccsText, "", 0, $this);
        $this->CountGroupSex->TotalFunction = "Count";
    }
//End Class_Initialize Event

//Initialize Method @255-6C59EE65
    function Initialize()
    {
        if(!$this->Visible) return;

        $this->DataSource->PageSize = $this->PageSize;
        $this->DataSource->AbsolutePage = $this->PageNumber;
        $this->DataSource->SetOrder($this->SorterName, $this->SorterDirection);
    }
//End Initialize Method

//CheckErrors Method @255-CD002B70
    function CheckErrors()
    {
        $errors = false;
        $errors = ($errors || $this->Report_TotalRecords->Errors->Count());
        $errors = ($errors || $this->GroupSex2->Errors->Count());
        $errors = ($errors || $this->CountGroupSex->Errors->Count());
        $errors = ($errors || $this->Errors->Count());
        $errors = ($errors || $this->DataSource->Errors->Count());
        return $errors;
    }
//End CheckErrors Method

//GetErrors Method @255-B2E862A1
    function GetErrors()
    {
        $errors = "";
        $errors = ComposeStrings($errors, $this->Report_TotalRecords->Errors->ToString());
        $errors = ComposeStrings($errors, $this->GroupSex2->Errors->ToString());
        $errors = ComposeStrings($errors, $this->CountGroupSex->Errors->ToString());
        $errors = ComposeStrings($errors, $this->Errors->ToString());
        $errors = ComposeStrings($errors, $this->DataSource->Errors->ToString());
        return $errors;
    }
//End GetErrors Method

//Show Method @255-D65758DB
    function Show()
    {
        global $Tpl;
        global $CCSLocales;
        if(!$this->Visible) return;

        $ShownRecords = 0;

        $this->DataSource->Parameters["urls_BirthDate"] = CCGetFromGet("s_BirthDate", NULL);
        $this->DataSource->Parameters["urls_BirthDate1"] = CCGetFromGet("s_BirthDate1", NULL);
        $this->DataSource->Parameters["sess_Facilities"] = CCGetSession("s_Facilities", NULL);

        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeSelect", $this);


        $this->DataSource->Prepare();
        $this->DataSource->Open();

        $SexKey = "";
        $Groups = new clsGroupsCollectionNewBorn31($this);
        $Groups->PageSize = $this->PageSize > 0 ? $this->PageSize : 0;

        $is_next_record = $this->DataSource->next_record();
        $this->IsEmpty = ! $is_next_record;
        while($is_next_record) {
            $this->DataSource->SetValues();
            $this->GroupSex2->SetValue($this->DataSource->GroupSex2->GetValue());
            $this->CountGroupSex->SetValue($this->DataSource->CountGroupSex->GetValue());
            $this->Report_TotalRecords->SetValue(1);
            if (count($Groups->Groups) == 0) $Groups->OpenGroup("Report");
            if (count($Groups->Groups) == 2 or $SexKey != $this->DataSource->f("Sex")) {
                $Groups->OpenGroup("Sex");
            }
            $Groups->AddItem();
            $SexKey = $this->DataSource->f("Sex");
            $is_next_record = $this->DataSource->next_record();
            if (!$is_next_record || $SexKey != $this->DataSource->f("Sex")) {
                $Groups->CloseGroup("Sex");
            }
        }
        if (!count($Groups->Groups)) 
            $Groups->OpenGroup("Report");
        else
            $this->NoRecords->Visible = false;
        $Groups->CloseGroup("Report");
        $this->TotalPages = $Groups->TotalPages;
        $this->TotalRows = $Groups->TotalRows;

        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeShow", $this);
        if(!$this->Visible) return;

        $this->Attributes->Show();
        $ReportBlock = "Report " . $this->ComponentName;
        $ParentPath = $Tpl->block_path;
        $Tpl->block_path = $ParentPath . "/" . $ReportBlock;

        if($this->CheckErrors()) {
            $Tpl->replaceblock("", $this->GetErrors());
            $Tpl->block_path = $ParentPath;
            return;
        } else {
            $items = & $Groups->Groups;
            $i = $Groups->Pages[min($this->PageNumber, $Groups->TotalPages) - 1];
            $this->ControlsVisible["GroupSex2"] = $this->GroupSex2->Visible;
            $this->ControlsVisible["CountGroupSex"] = $this->CountGroupSex->Visible;
            do {
                $this->Attributes->RestoreFromArray($items[$i]->Attributes);
                $this->RowNumber = $items[$i]->RowNumber;
                switch ($items[$i]->GroupType) {
                    Case "":
                        $this->Detail->CCSEventResult = CCGetEvent($this->Detail->CCSEvents, "BeforeShow", $this->Detail);
                        if ($this->Detail->Visible) {
                            $this->Attributes->Show();
                            $Tpl->parseto("Section Detail", true, "Section Detail");
                        }
                        break;
                    case "Report":
                        if ($items[$i]->Mode == 1) {
                            $this->Report_TotalRecords->SetValue($items[$i]->Report_TotalRecords);
                            $this->Report_TotalRecords->Attributes->RestoreFromArray($items[$i]->_Report_TotalRecordsAttributes);
                            $this->Report_Header->CCSEventResult = CCGetEvent($this->Report_Header->CCSEvents, "BeforeShow", $this->Report_Header);
                            if ($this->Report_Header->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Report_Header";
                                $this->Attributes->Show();
                                $this->Report_TotalRecords->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Report_Header", true, "Section Detail");
                            }
                        }
                        if ($items[$i]->Mode == 2) {
                            $this->Report_Footer->CCSEventResult = CCGetEvent($this->Report_Footer->CCSEvents, "BeforeShow", $this->Report_Footer);
                            if ($this->Report_Footer->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Report_Footer";
                                $this->NoRecords->Show();
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Report_Footer", true, "Section Detail");
                            }
                        }
                        break;
                    case "Page":
                        if ($items[$i]->Mode == 1) {
                            $this->Page_Header->CCSEventResult = CCGetEvent($this->Page_Header->CCSEvents, "BeforeShow", $this->Page_Header);
                            if ($this->Page_Header->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Page_Header";
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Page_Header", true, "Section Detail");
                            }
                        }
                        if ($items[$i]->Mode == 2 && !$this->UseClientPaging || $items[$i]->Mode == 1 && $this->UseClientPaging) {
                            $this->Page_Footer->CCSEventResult = CCGetEvent($this->Page_Footer->CCSEvents, "BeforeShow", $this->Page_Footer);
                            if ($this->Page_Footer->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Page_Footer";
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Page_Footer", true, "Section Detail");
                            }
                        }
                        break;
                    case "Sex":
                        if ($items[$i]->Mode == 1) {
                            $this->GroupSex2->SetValue($items[$i]->GroupSex2);
                            $this->GroupSex2->Attributes->RestoreFromArray($items[$i]->_GroupSex2Attributes);
                            $this->CountGroupSex->SetValue($items[$i]->CountGroupSex);
                            $this->CountGroupSex->Attributes->RestoreFromArray($items[$i]->_CountGroupSexAttributes);
                            $this->Sex_Header->CCSEventResult = CCGetEvent($this->Sex_Header->CCSEvents, "BeforeShow", $this->Sex_Header);
                            if ($this->Sex_Header->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Sex_Header";
                                $this->Attributes->Show();
                                $this->GroupSex2->Show();
                                $this->CountGroupSex->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Sex_Header", true, "Section Detail");
                            }
                        }
                        if ($items[$i]->Mode == 2) {
                            $this->Sex_Footer->CCSEventResult = CCGetEvent($this->Sex_Footer->CCSEvents, "BeforeShow", $this->Sex_Footer);
                            if ($this->Sex_Footer->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Sex_Footer";
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Sex_Footer", true, "Section Detail");
                            }
                        }
                        break;
                }
                $i++;
            } while ($i < count($items) && ($this->ViewMode == "Print" ||  !($i > 1 && $items[$i]->GroupType == 'Page' && $items[$i]->Mode == 1)));
            $Tpl->block_path = $ParentPath;
            $Tpl->parse($ReportBlock);
            $this->DataSource->close();
        }

    }
//End Show Method

} //End NewBorn31 Class @255-FCB6E20C

class clsNewBorn31DataSource extends clsDBregistry_db {  //NewBorn31DataSource Class @255-1F469C6D

//DataSource Variables @255-F5055419
    public $Parent = "";
    public $CCSEvents = "";
    public $CCSEventResult;
    public $ErrorBlock;
    public $CmdExecution;

    public $wp;


    // Datasource fields
    public $GroupSex2;
    public $CountGroupSex;
//End DataSource Variables

//DataSourceClass_Initialize Event @255-932C4791
    function clsNewBorn31DataSource(& $Parent)
    {
        $this->Parent = & $Parent;
        $this->ErrorBlock = "Report NewBorn31";
        $this->Initialize();
        $this->GroupSex2 = new clsField("GroupSex2", ccsInteger, "");
        
        $this->CountGroupSex = new clsField("CountGroupSex", ccsText, "");
        

    }
//End DataSourceClass_Initialize Event

//SetOrder Method @255-9E1383D1
    function SetOrder($SorterName, $SorterDirection)
    {
        $this->Order = "";
        $this->Order = CCGetOrder($this->Order, $SorterName, $SorterDirection, 
            "");
    }
//End SetOrder Method

//Prepare Method @255-DBD3F827
    function Prepare()
    {
        global $CCSLocales;
        global $DefaultDateFormat;
        $this->wp = new clsSQLParameters($this->ErrorBlock);
        $this->wp->AddParameter("3", "urls_BirthDate", ccsDate, array("ShortDate"), array("yyyy", "-", "mm", "-", "dd", " ", "HH", ":", "nn", ":", "ss"), $this->Parameters["urls_BirthDate"], "", false);
        $this->wp->AddParameter("4", "urls_BirthDate1", ccsDate, array("ShortDate"), array("yyyy", "-", "mm", "-", "dd", " ", "HH", ":", "nn", ":", "ss"), $this->Parameters["urls_BirthDate1"], "", false);
        $this->wp->AddParameter("5", "sess_Facilities", ccsInteger, "", "", $this->Parameters["sess_Facilities"], 0, false);
        $this->wp->Criterion[1] = "( newborn.Weight>=1500 )";
        $this->wp->Criterion[2] = "( newborn.Weight<=1999 )";
        $this->wp->Criterion[3] = $this->wp->Operation(opGreaterThanOrEqual, "newborn.BirthDate", $this->wp->GetDBValue("3"), $this->ToSQL($this->wp->GetDBValue("3"), ccsDate),false);
        $this->wp->Criterion[4] = $this->wp->Operation(opLessThanOrEqual, "newborn.BirthDate", $this->wp->GetDBValue("4"), $this->ToSQL($this->wp->GetDBValue("4"), ccsDate),false);
        $this->wp->Criterion[5] = $this->wp->Operation(opIn, "facilities.FacilityID", $this->wp->GetDBValue("5"), $this->ToSQL($this->wp->GetDBValue("5"), ccsInteger, true),false);
        $this->wp->Criterion[6] = "( newborn.Died=1 )";
        $this->wp->Criterion[7] = "( newborn.DiedID=1 )";
        $this->Where = $this->wp->opAND(
             false, $this->wp->opAND(
             false, $this->wp->opAND(
             false, $this->wp->opAND(
             false, $this->wp->opAND(
             false, $this->wp->opAND(
             false, 
             $this->wp->Criterion[1], 
             $this->wp->Criterion[2]), 
             $this->wp->Criterion[3]), 
             $this->wp->Criterion[4]), 
             $this->wp->Criterion[5]), 
             $this->wp->Criterion[6]), 
             $this->wp->Criterion[7]);
    }
//End Prepare Method

//Open Method @255-CA3C9D7B
    function Open()
    {
        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeBuildSelect", $this->Parent);
        $this->SQL = "SELECT delivery.DeliveryID AS delivery_DeliveryID, FacilityName, Sex, NewBornID, BirthDate, Weight \n\n" .
        "FROM (delivery INNER JOIN facilities ON\n\n" .
        "delivery.FacilityID = facilities.FacilityID) INNER JOIN newborn ON\n\n" .
        "newborn.DeliveryID = delivery.DeliveryID {SQL_Where} {SQL_OrderBy}";
        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeExecuteSelect", $this->Parent);
        $this->query(CCBuildSQL($this->SQL, $this->Where, "newborn.Sex asc" .  ($this->Order ? ", " . $this->Order: "")));
        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "AfterExecuteSelect", $this->Parent);
    }
//End Open Method

//SetValues Method @255-F73A025D
    function SetValues()
    {
        $this->GroupSex2->SetDBValue(trim($this->f("Sex")));
        $this->CountGroupSex->SetDBValue($this->f("Sex"));
    }
//End SetValues Method

} //End NewBorn31DataSource Class @255-FCB6E20C

//NewBorn32 ReportGroup class @319-AD2CFC1E
class clsReportGroupNewBorn32 {
    public $GroupType;
    public $mode; //1 - open, 2 - close
    public $Report_TotalRecords, $_Report_TotalRecordsAttributes;
    public $GroupSex2, $_GroupSex2Attributes;
    public $CountGroupSex, $_CountGroupSexAttributes;
    public $Attributes;
    public $ReportTotalIndex = 0;
    public $PageTotalIndex;
    public $PageNumber;
    public $RowNumber;
    public $Parent;
    public $SexTotalIndex;

    function clsReportGroupNewBorn32(& $parent) {
        $this->Parent = & $parent;
        $this->Attributes = $this->Parent->Attributes->GetAsArray();
    }
    function SetControls($PrevGroup = "") {
        $this->GroupSex2 = $this->Parent->GroupSex2->Value;
    }

    function SetTotalControls($mode = "", $PrevGroup = "") {
        $this->Report_TotalRecords = $this->Parent->Report_TotalRecords->GetTotalValue($mode);
        $this->CountGroupSex = $this->Parent->CountGroupSex->GetTotalValue($mode);
        $this->_Report_TotalRecordsAttributes = $this->Parent->Report_TotalRecords->Attributes->GetAsArray();
        $this->_GroupSex2Attributes = $this->Parent->GroupSex2->Attributes->GetAsArray();
        $this->_CountGroupSexAttributes = $this->Parent->CountGroupSex->Attributes->GetAsArray();
    }
    function SyncWithHeader(& $Header) {
        $Header->Report_TotalRecords = $this->Report_TotalRecords;
        $Header->_Report_TotalRecordsAttributes = $this->_Report_TotalRecordsAttributes;
        $Header->CountGroupSex = $this->CountGroupSex;
        $Header->_CountGroupSexAttributes = $this->_CountGroupSexAttributes;
        $this->GroupSex2 = $Header->GroupSex2;
        $Header->_GroupSex2Attributes = $this->_GroupSex2Attributes;
        $this->Parent->GroupSex2->Value = $Header->GroupSex2;
        $this->Parent->GroupSex2->Attributes->RestoreFromArray($Header->_GroupSex2Attributes);
    }
    function ChangeTotalControls() {
        $this->Report_TotalRecords = $this->Parent->Report_TotalRecords->GetValue();
        $this->CountGroupSex = $this->Parent->CountGroupSex->GetValue();
    }
}
//End NewBorn32 ReportGroup class

//NewBorn32 GroupsCollection class @319-B5696647
class clsGroupsCollectionNewBorn32 {
    public $Groups;
    public $mPageCurrentHeaderIndex;
    public $mSexCurrentHeaderIndex;
    public $PageSize;
    public $TotalPages = 0;
    public $TotalRows = 0;
    public $CurrentPageSize = 0;
    public $Pages;
    public $Parent;
    public $LastDetailIndex;

    function clsGroupsCollectionNewBorn32(& $parent) {
        $this->Parent = & $parent;
        $this->Groups = array();
        $this->Pages  = array();
        $this->mSexCurrentHeaderIndex = 1;
        $this->mReportTotalIndex = 0;
        $this->mPageTotalIndex = 1;
    }

    function & InitGroup() {
        $group = new clsReportGroupNewBorn32($this->Parent);
        $group->RowNumber = $this->TotalRows + 1;
        $group->PageNumber = $this->TotalPages;
        $group->PageTotalIndex = $this->mPageCurrentHeaderIndex;
        $group->SexTotalIndex = $this->mSexCurrentHeaderIndex;
        return $group;
    }

    function RestoreValues() {
        $this->Parent->Report_TotalRecords->Value = $this->Parent->Report_TotalRecords->initialValue;
        $this->Parent->GroupSex2->Value = $this->Parent->GroupSex2->initialValue;
        $this->Parent->CountGroupSex->Value = $this->Parent->CountGroupSex->initialValue;
    }

    function OpenPage() {
        $this->TotalPages++;
        $Group = & $this->InitGroup();
        $this->Parent->Page_Header->CCSEventResult = CCGetEvent($this->Parent->Page_Header->CCSEvents, "OnInitialize", $this->Parent->Page_Header);
        if ($this->Parent->Page_Header->Visible)
            $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Page_Header->Height;
        $Group->SetTotalControls("GetNextValue");
        $this->Parent->Page_Header->CCSEventResult = CCGetEvent($this->Parent->Page_Header->CCSEvents, "OnCalculate", $this->Parent->Page_Header);
        $Group->SetControls();
        $Group->Mode = 1;
        $Group->GroupType = "Page";
        $Group->PageTotalIndex = count($this->Groups);
        $this->mPageCurrentHeaderIndex = count($this->Groups);
        $this->Groups[] =  & $Group;
        $this->Pages[] =  count($this->Groups) == 2 ? 0 : count($this->Groups) - 1;
    }

    function OpenGroup($groupName) {
        $Group = "";
        $OpenFlag = false;
        if ($groupName == "Report") {
            $Group = & $this->InitGroup(true);
            $this->Parent->Report_Header->CCSEventResult = CCGetEvent($this->Parent->Report_Header->CCSEvents, "OnInitialize", $this->Parent->Report_Header);
            if ($this->Parent->Report_Header->Visible) 
                $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Report_Header->Height;
                $Group->SetTotalControls("GetNextValue");
            $this->Parent->Report_Header->CCSEventResult = CCGetEvent($this->Parent->Report_Header->CCSEvents, "OnCalculate", $this->Parent->Report_Header);
            $Group->SetControls();
            $Group->Mode = 1;
            $Group->GroupType = "Report";
            $this->Groups[] = & $Group;
            $this->OpenPage();
        }
        if ($groupName == "Sex") {
            $GroupSex = & $this->InitGroup(true);
            $this->Parent->Sex_Header->CCSEventResult = CCGetEvent($this->Parent->Sex_Header->CCSEvents, "OnInitialize", $this->Parent->Sex_Header);
            if ($this->Parent->Page_Footer->Visible) 
                $OverSize = $this->Parent->Sex_Header->Height + $this->Parent->Page_Footer->Height;
            else
                $OverSize = $this->Parent->Sex_Header->Height;
            if (($this->PageSize > 0) and $this->Parent->Sex_Header->Visible and ($this->CurrentPageSize + $OverSize > $this->PageSize)) {
                $this->ClosePage();
                $this->OpenPage();
            }
            if ($this->Parent->Sex_Header->Visible)
                $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Sex_Header->Height;
                $GroupSex->SetTotalControls("GetNextValue");
            $this->Parent->Sex_Header->CCSEventResult = CCGetEvent($this->Parent->Sex_Header->CCSEvents, "OnCalculate", $this->Parent->Sex_Header);
            $GroupSex->SetControls();
            $GroupSex->Mode = 1;
            $GroupSex->GroupType = "Sex";
            $this->mSexCurrentHeaderIndex = count($this->Groups);
            $this->Groups[] = & $GroupSex;
            $this->Parent->CountGroupSex->Reset();
        }
    }

    function ClosePage() {
        $Group = & $this->InitGroup();
        $this->Parent->Page_Footer->CCSEventResult = CCGetEvent($this->Parent->Page_Footer->CCSEvents, "OnInitialize", $this->Parent->Page_Footer);
        $Group->SetTotalControls("GetPrevValue");
        $Group->SyncWithHeader($this->Groups[$this->mPageCurrentHeaderIndex]);
        $this->Parent->Page_Footer->CCSEventResult = CCGetEvent($this->Parent->Page_Footer->CCSEvents, "OnCalculate", $this->Parent->Page_Footer);
        $Group->SetControls();
        $this->RestoreValues();
        $this->CurrentPageSize = 0;
        $Group->Mode = 2;
        $Group->GroupType = "Page";
        $this->Groups[] = & $Group;
    }

    function CloseGroup($groupName)
    {
        $Group = "";
        if ($groupName == "Report") {
            $Group = & $this->InitGroup(true);
            $this->Parent->Report_Footer->CCSEventResult = CCGetEvent($this->Parent->Report_Footer->CCSEvents, "OnInitialize", $this->Parent->Report_Footer);
            if ($this->Parent->Page_Footer->Visible) 
                $OverSize = $this->Parent->Report_Footer->Height + $this->Parent->Page_Footer->Height;
            else
                $OverSize = $this->Parent->Report_Footer->Height;
            if (($this->PageSize > 0) and $this->Parent->Report_Footer->Visible and ($this->CurrentPageSize + $OverSize > $this->PageSize)) {
                $this->ClosePage();
                $this->OpenPage();
            }
            $Group->SetTotalControls("GetPrevValue");
            $Group->SyncWithHeader($this->Groups[0]);
            if ($this->Parent->Report_Footer->Visible)
                $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Report_Footer->Height;
            $this->Parent->Report_Footer->CCSEventResult = CCGetEvent($this->Parent->Report_Footer->CCSEvents, "OnCalculate", $this->Parent->Report_Footer);
            $Group->SetControls();
            $this->RestoreValues();
            $Group->Mode = 2;
            $Group->GroupType = "Report";
            $this->Groups[] = & $Group;
            $this->ClosePage();
            return;
        }
        $GroupSex = & $this->InitGroup(true);
        $this->Parent->Sex_Footer->CCSEventResult = CCGetEvent($this->Parent->Sex_Footer->CCSEvents, "OnInitialize", $this->Parent->Sex_Footer);
        if ($this->Parent->Page_Footer->Visible) 
            $OverSize = $this->Parent->Sex_Footer->Height + $this->Parent->Page_Footer->Height;
        else
            $OverSize = $this->Parent->Sex_Footer->Height;
        if (($this->PageSize > 0) and $this->Parent->Sex_Footer->Visible and ($this->CurrentPageSize + $OverSize > $this->PageSize)) {
            $this->ClosePage();
            $this->OpenPage();
        }
        $GroupSex->SetTotalControls("GetPrevValue");
        $GroupSex->SyncWithHeader($this->Groups[$this->mSexCurrentHeaderIndex]);
        if ($this->Parent->Sex_Footer->Visible)
            $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Sex_Footer->Height;
        $this->Parent->Sex_Footer->CCSEventResult = CCGetEvent($this->Parent->Sex_Footer->CCSEvents, "OnCalculate", $this->Parent->Sex_Footer);
        $GroupSex->SetControls();
        $this->Parent->CountGroupSex->Reset();
        $this->RestoreValues();
        $GroupSex->Mode = 2;
        $GroupSex->GroupType ="Sex";
        $this->Groups[] = & $GroupSex;
    }

    function AddItem()
    {
        $Group = & $this->InitGroup(true);
        $this->Parent->Detail->CCSEventResult = CCGetEvent($this->Parent->Detail->CCSEvents, "OnInitialize", $this->Parent->Detail);
        if ($this->Parent->Page_Footer->Visible) 
            $OverSize = $this->Parent->Detail->Height + $this->Parent->Page_Footer->Height;
        else
            $OverSize = $this->Parent->Detail->Height;
        if (($this->PageSize > 0) and $this->Parent->Detail->Visible and ($this->CurrentPageSize + $OverSize > $this->PageSize)) {
            $this->ClosePage();
            $this->OpenPage();
        }
        $this->TotalRows++;
        if ($this->LastDetailIndex)
            $PrevGroup = & $this->Groups[$this->LastDetailIndex];
        else
            $PrevGroup = "";
        $Group->SetTotalControls("", $PrevGroup);
        if ($this->Parent->Detail->Visible)
            $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Detail->Height;
        $this->Parent->Detail->CCSEventResult = CCGetEvent($this->Parent->Detail->CCSEvents, "OnCalculate", $this->Parent->Detail);
        $Group->SetControls($PrevGroup);
        $this->LastDetailIndex = count($this->Groups);
        $this->Groups[] = & $Group;
    }
}
//End NewBorn32 GroupsCollection class

class clsReportNewBorn32 { //NewBorn32 Class @319-73FB2194

//NewBorn32 Variables @319-80D63D80

    public $ComponentType = "Report";
    public $PageSize;
    public $ComponentName;
    public $Visible;
    public $Errors;
    public $CCSEvents = array();
    public $CCSEventResult;
    public $RelativePath = "";
    public $ViewMode = "Web";
    public $TemplateBlock;
    public $PageNumber;
    public $RowNumber;
    public $TotalRows;
    public $TotalPages;
    public $ControlsVisible = array();
    public $IsEmpty;
    public $Attributes;
    public $DetailBlock, $Detail;
    public $Report_FooterBlock, $Report_Footer;
    public $Report_HeaderBlock, $Report_Header;
    public $Page_FooterBlock, $Page_Footer;
    public $Page_HeaderBlock, $Page_Header;
    public $Sex_HeaderBlock, $Sex_Header;
    public $Sex_FooterBlock, $Sex_Footer;
    public $SorterName, $SorterDirection;

    public $ds;
    public $DataSource;
    public $UseClientPaging = false;

    //Report Controls
    public $StaticControls, $RowControls, $Report_FooterControls, $Report_HeaderControls;
    public $Page_FooterControls, $Page_HeaderControls;
    public $Sex_HeaderControls, $Sex_FooterControls;
//End NewBorn32 Variables

//Class_Initialize Event @319-88F1C7D0
    function clsReportNewBorn32($RelativePath = "", & $Parent)
    {
        global $FileName;
        global $CCSLocales;
        global $DefaultDateFormat;
        $this->ComponentName = "NewBorn32";
        $this->Visible = True;
        $this->Parent = & $Parent;
        $this->RelativePath = $RelativePath;
        $this->Attributes = new clsAttributes($this->ComponentName . ":");
        $this->Detail = new clsSection($this);
        $MinPageSize = 0;
        $MaxSectionSize = 0;
        $this->Detail->Height = 1;
        $MaxSectionSize = max($MaxSectionSize, $this->Detail->Height);
        $this->Report_Footer = new clsSection($this);
        $this->Report_Header = new clsSection($this);
        $this->Page_Footer = new clsSection($this);
        $this->Page_Footer->Height = 1;
        $MinPageSize += $this->Page_Footer->Height;
        $this->Page_Header = new clsSection($this);
        $this->Page_Header->Height = 1;
        $MinPageSize += $this->Page_Header->Height;
        $this->Sex_Footer = new clsSection($this);
        $this->Sex_Footer->Height = 1;
        $MaxSectionSize = max($MaxSectionSize, $this->Sex_Footer->Height);
        $this->Sex_Header = new clsSection($this);
        $this->Sex_Header->Height = 1;
        $MaxSectionSize = max($MaxSectionSize, $this->Sex_Header->Height);
        $this->Errors = new clsErrors();
        $this->DataSource = new clsNewBorn32DataSource($this);
        $this->ds = & $this->DataSource;
        $PageSize = CCGetParam($this->ComponentName . "PageSize", "");
        if(is_numeric($PageSize) && $PageSize > 0) {
            $this->PageSize = $PageSize;
        } else {
            if (!is_numeric($PageSize) || $PageSize < 0)
                $this->PageSize = 0;
             else if ($PageSize == "0")
                $this->PageSize = 0;
             else 
                $this->PageSize = $PageSize;
        }
        $MinPageSize += $MaxSectionSize;
        if ($this->PageSize && $MinPageSize && $this->PageSize < $MinPageSize)
            $this->PageSize = $MinPageSize;
        $this->PageNumber = $this->ViewMode == "Print" ? 1 : intval(CCGetParam($this->ComponentName . "Page", 1));
        if ($this->PageNumber <= 0 ) {
            $this->PageNumber = 1;
        }
        $this->Visible = (CCSecurityAccessCheck("3") == "success");

        $this->Report_TotalRecords = new clsControl(ccsReportLabel, "Report_TotalRecords", "Report_TotalRecords", ccsText, "", 0, $this);
        $this->Report_TotalRecords->TotalFunction = "Count";
        $this->Report_TotalRecords->IsEmptySource = true;
        $this->NoRecords = new clsPanel("NoRecords", $this);
        $this->GroupSex2 = new clsControl(ccsReportLabel, "GroupSex2", "GroupSex2", ccsInteger, "", "", $this);
        $this->CountGroupSex = new clsControl(ccsReportLabel, "CountGroupSex", "CountGroupSex", ccsText, "", 0, $this);
        $this->CountGroupSex->TotalFunction = "Count";
    }
//End Class_Initialize Event

//Initialize Method @319-6C59EE65
    function Initialize()
    {
        if(!$this->Visible) return;

        $this->DataSource->PageSize = $this->PageSize;
        $this->DataSource->AbsolutePage = $this->PageNumber;
        $this->DataSource->SetOrder($this->SorterName, $this->SorterDirection);
    }
//End Initialize Method

//CheckErrors Method @319-CD002B70
    function CheckErrors()
    {
        $errors = false;
        $errors = ($errors || $this->Report_TotalRecords->Errors->Count());
        $errors = ($errors || $this->GroupSex2->Errors->Count());
        $errors = ($errors || $this->CountGroupSex->Errors->Count());
        $errors = ($errors || $this->Errors->Count());
        $errors = ($errors || $this->DataSource->Errors->Count());
        return $errors;
    }
//End CheckErrors Method

//GetErrors Method @319-B2E862A1
    function GetErrors()
    {
        $errors = "";
        $errors = ComposeStrings($errors, $this->Report_TotalRecords->Errors->ToString());
        $errors = ComposeStrings($errors, $this->GroupSex2->Errors->ToString());
        $errors = ComposeStrings($errors, $this->CountGroupSex->Errors->ToString());
        $errors = ComposeStrings($errors, $this->Errors->ToString());
        $errors = ComposeStrings($errors, $this->DataSource->Errors->ToString());
        return $errors;
    }
//End GetErrors Method

//Show Method @319-72AA0FAE
    function Show()
    {
        global $Tpl;
        global $CCSLocales;
        if(!$this->Visible) return;

        $ShownRecords = 0;

        $this->DataSource->Parameters["urls_BirthDate"] = CCGetFromGet("s_BirthDate", NULL);
        $this->DataSource->Parameters["urls_BirthDate1"] = CCGetFromGet("s_BirthDate1", NULL);
        $this->DataSource->Parameters["sess_Facilities"] = CCGetSession("s_Facilities", NULL);

        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeSelect", $this);


        $this->DataSource->Prepare();
        $this->DataSource->Open();

        $SexKey = "";
        $Groups = new clsGroupsCollectionNewBorn32($this);
        $Groups->PageSize = $this->PageSize > 0 ? $this->PageSize : 0;

        $is_next_record = $this->DataSource->next_record();
        $this->IsEmpty = ! $is_next_record;
        while($is_next_record) {
            $this->DataSource->SetValues();
            $this->GroupSex2->SetValue($this->DataSource->GroupSex2->GetValue());
            $this->CountGroupSex->SetValue($this->DataSource->CountGroupSex->GetValue());
            $this->Report_TotalRecords->SetValue(1);
            if (count($Groups->Groups) == 0) $Groups->OpenGroup("Report");
            if (count($Groups->Groups) == 2 or $SexKey != $this->DataSource->f("Sex")) {
                $Groups->OpenGroup("Sex");
            }
            $Groups->AddItem();
            $SexKey = $this->DataSource->f("Sex");
            $is_next_record = $this->DataSource->next_record();
            if (!$is_next_record || $SexKey != $this->DataSource->f("Sex")) {
                $Groups->CloseGroup("Sex");
            }
        }
        if (!count($Groups->Groups)) 
            $Groups->OpenGroup("Report");
        else
            $this->NoRecords->Visible = false;
        $Groups->CloseGroup("Report");
        $this->TotalPages = $Groups->TotalPages;
        $this->TotalRows = $Groups->TotalRows;

        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeShow", $this);
        if(!$this->Visible) return;

        $this->Attributes->Show();
        $ReportBlock = "Report " . $this->ComponentName;
        $ParentPath = $Tpl->block_path;
        $Tpl->block_path = $ParentPath . "/" . $ReportBlock;

        if($this->CheckErrors()) {
            $Tpl->replaceblock("", $this->GetErrors());
            $Tpl->block_path = $ParentPath;
            return;
        } else {
            $items = & $Groups->Groups;
            $i = $Groups->Pages[min($this->PageNumber, $Groups->TotalPages) - 1];
            $this->ControlsVisible["GroupSex2"] = $this->GroupSex2->Visible;
            $this->ControlsVisible["CountGroupSex"] = $this->CountGroupSex->Visible;
            do {
                $this->Attributes->RestoreFromArray($items[$i]->Attributes);
                $this->RowNumber = $items[$i]->RowNumber;
                switch ($items[$i]->GroupType) {
                    Case "":
                        $this->Detail->CCSEventResult = CCGetEvent($this->Detail->CCSEvents, "BeforeShow", $this->Detail);
                        if ($this->Detail->Visible) {
                            $this->Attributes->Show();
                            $Tpl->parseto("Section Detail", true, "Section Detail");
                        }
                        break;
                    case "Report":
                        if ($items[$i]->Mode == 1) {
                            $this->Report_TotalRecords->SetValue($items[$i]->Report_TotalRecords);
                            $this->Report_TotalRecords->Attributes->RestoreFromArray($items[$i]->_Report_TotalRecordsAttributes);
                            $this->Report_Header->CCSEventResult = CCGetEvent($this->Report_Header->CCSEvents, "BeforeShow", $this->Report_Header);
                            if ($this->Report_Header->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Report_Header";
                                $this->Attributes->Show();
                                $this->Report_TotalRecords->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Report_Header", true, "Section Detail");
                            }
                        }
                        if ($items[$i]->Mode == 2) {
                            $this->Report_Footer->CCSEventResult = CCGetEvent($this->Report_Footer->CCSEvents, "BeforeShow", $this->Report_Footer);
                            if ($this->Report_Footer->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Report_Footer";
                                $this->NoRecords->Show();
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Report_Footer", true, "Section Detail");
                            }
                        }
                        break;
                    case "Page":
                        if ($items[$i]->Mode == 1) {
                            $this->Page_Header->CCSEventResult = CCGetEvent($this->Page_Header->CCSEvents, "BeforeShow", $this->Page_Header);
                            if ($this->Page_Header->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Page_Header";
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Page_Header", true, "Section Detail");
                            }
                        }
                        if ($items[$i]->Mode == 2 && !$this->UseClientPaging || $items[$i]->Mode == 1 && $this->UseClientPaging) {
                            $this->Page_Footer->CCSEventResult = CCGetEvent($this->Page_Footer->CCSEvents, "BeforeShow", $this->Page_Footer);
                            if ($this->Page_Footer->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Page_Footer";
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Page_Footer", true, "Section Detail");
                            }
                        }
                        break;
                    case "Sex":
                        if ($items[$i]->Mode == 1) {
                            $this->GroupSex2->SetValue($items[$i]->GroupSex2);
                            $this->GroupSex2->Attributes->RestoreFromArray($items[$i]->_GroupSex2Attributes);
                            $this->CountGroupSex->SetValue($items[$i]->CountGroupSex);
                            $this->CountGroupSex->Attributes->RestoreFromArray($items[$i]->_CountGroupSexAttributes);
                            $this->Sex_Header->CCSEventResult = CCGetEvent($this->Sex_Header->CCSEvents, "BeforeShow", $this->Sex_Header);
                            if ($this->Sex_Header->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Sex_Header";
                                $this->Attributes->Show();
                                $this->GroupSex2->Show();
                                $this->CountGroupSex->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Sex_Header", true, "Section Detail");
                            }
                        }
                        if ($items[$i]->Mode == 2) {
                            $this->Sex_Footer->CCSEventResult = CCGetEvent($this->Sex_Footer->CCSEvents, "BeforeShow", $this->Sex_Footer);
                            if ($this->Sex_Footer->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Sex_Footer";
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Sex_Footer", true, "Section Detail");
                            }
                        }
                        break;
                }
                $i++;
            } while ($i < count($items) && ($this->ViewMode == "Print" ||  !($i > 1 && $items[$i]->GroupType == 'Page' && $items[$i]->Mode == 1)));
            $Tpl->block_path = $ParentPath;
            $Tpl->parse($ReportBlock);
            $this->DataSource->close();
        }

    }
//End Show Method

} //End NewBorn32 Class @319-FCB6E20C

class clsNewBorn32DataSource extends clsDBregistry_db {  //NewBorn32DataSource Class @319-9495A274

//DataSource Variables @319-F5055419
    public $Parent = "";
    public $CCSEvents = "";
    public $CCSEventResult;
    public $ErrorBlock;
    public $CmdExecution;

    public $wp;


    // Datasource fields
    public $GroupSex2;
    public $CountGroupSex;
//End DataSource Variables

//DataSourceClass_Initialize Event @319-A79442ED
    function clsNewBorn32DataSource(& $Parent)
    {
        $this->Parent = & $Parent;
        $this->ErrorBlock = "Report NewBorn32";
        $this->Initialize();
        $this->GroupSex2 = new clsField("GroupSex2", ccsInteger, "");
        
        $this->CountGroupSex = new clsField("CountGroupSex", ccsText, "");
        

    }
//End DataSourceClass_Initialize Event

//SetOrder Method @319-9E1383D1
    function SetOrder($SorterName, $SorterDirection)
    {
        $this->Order = "";
        $this->Order = CCGetOrder($this->Order, $SorterName, $SorterDirection, 
            "");
    }
//End SetOrder Method

//Prepare Method @319-B984FCE4
    function Prepare()
    {
        global $CCSLocales;
        global $DefaultDateFormat;
        $this->wp = new clsSQLParameters($this->ErrorBlock);
        $this->wp->AddParameter("3", "urls_BirthDate", ccsDate, array("ShortDate"), array("yyyy", "-", "mm", "-", "dd", " ", "HH", ":", "nn", ":", "ss"), $this->Parameters["urls_BirthDate"], "", false);
        $this->wp->AddParameter("4", "urls_BirthDate1", ccsDate, array("ShortDate"), array("yyyy", "-", "mm", "-", "dd", " ", "HH", ":", "nn", ":", "ss"), $this->Parameters["urls_BirthDate1"], "", false);
        $this->wp->AddParameter("5", "sess_Facilities", ccsInteger, "", "", $this->Parameters["sess_Facilities"], 0, false);
        $this->wp->Criterion[1] = "( newborn.Weight>=2000 )";
        $this->wp->Criterion[2] = "( newborn.Weight<=2499 )";
        $this->wp->Criterion[3] = $this->wp->Operation(opGreaterThanOrEqual, "newborn.BirthDate", $this->wp->GetDBValue("3"), $this->ToSQL($this->wp->GetDBValue("3"), ccsDate),false);
        $this->wp->Criterion[4] = $this->wp->Operation(opLessThanOrEqual, "newborn.BirthDate", $this->wp->GetDBValue("4"), $this->ToSQL($this->wp->GetDBValue("4"), ccsDate),false);
        $this->wp->Criterion[5] = $this->wp->Operation(opIn, "facilities.FacilityID", $this->wp->GetDBValue("5"), $this->ToSQL($this->wp->GetDBValue("5"), ccsInteger, true),false);
        $this->wp->Criterion[6] = "( newborn.Died=1 )";
        $this->wp->Criterion[7] = "( newborn.DiedID=1 )";
        $this->Where = $this->wp->opAND(
             false, $this->wp->opAND(
             false, $this->wp->opAND(
             false, $this->wp->opAND(
             false, $this->wp->opAND(
             false, $this->wp->opAND(
             false, 
             $this->wp->Criterion[1], 
             $this->wp->Criterion[2]), 
             $this->wp->Criterion[3]), 
             $this->wp->Criterion[4]), 
             $this->wp->Criterion[5]), 
             $this->wp->Criterion[6]), 
             $this->wp->Criterion[7]);
    }
//End Prepare Method

//Open Method @319-CA3C9D7B
    function Open()
    {
        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeBuildSelect", $this->Parent);
        $this->SQL = "SELECT delivery.DeliveryID AS delivery_DeliveryID, FacilityName, Sex, NewBornID, BirthDate, Weight \n\n" .
        "FROM (delivery INNER JOIN facilities ON\n\n" .
        "delivery.FacilityID = facilities.FacilityID) INNER JOIN newborn ON\n\n" .
        "newborn.DeliveryID = delivery.DeliveryID {SQL_Where} {SQL_OrderBy}";
        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeExecuteSelect", $this->Parent);
        $this->query(CCBuildSQL($this->SQL, $this->Where, "newborn.Sex asc" .  ($this->Order ? ", " . $this->Order: "")));
        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "AfterExecuteSelect", $this->Parent);
    }
//End Open Method

//SetValues Method @319-F73A025D
    function SetValues()
    {
        $this->GroupSex2->SetDBValue(trim($this->f("Sex")));
        $this->CountGroupSex->SetDBValue($this->f("Sex"));
    }
//End SetValues Method

} //End NewBorn32DataSource Class @319-FCB6E20C

//NewBorn33 ReportGroup class @383-B45B8127
class clsReportGroupNewBorn33 {
    public $GroupType;
    public $mode; //1 - open, 2 - close
    public $Report_TotalRecords, $_Report_TotalRecordsAttributes;
    public $GroupSex2, $_GroupSex2Attributes;
    public $CountGroupSex, $_CountGroupSexAttributes;
    public $Attributes;
    public $ReportTotalIndex = 0;
    public $PageTotalIndex;
    public $PageNumber;
    public $RowNumber;
    public $Parent;
    public $SexTotalIndex;

    function clsReportGroupNewBorn33(& $parent) {
        $this->Parent = & $parent;
        $this->Attributes = $this->Parent->Attributes->GetAsArray();
    }
    function SetControls($PrevGroup = "") {
        $this->GroupSex2 = $this->Parent->GroupSex2->Value;
    }

    function SetTotalControls($mode = "", $PrevGroup = "") {
        $this->Report_TotalRecords = $this->Parent->Report_TotalRecords->GetTotalValue($mode);
        $this->CountGroupSex = $this->Parent->CountGroupSex->GetTotalValue($mode);
        $this->_Report_TotalRecordsAttributes = $this->Parent->Report_TotalRecords->Attributes->GetAsArray();
        $this->_GroupSex2Attributes = $this->Parent->GroupSex2->Attributes->GetAsArray();
        $this->_CountGroupSexAttributes = $this->Parent->CountGroupSex->Attributes->GetAsArray();
    }
    function SyncWithHeader(& $Header) {
        $Header->Report_TotalRecords = $this->Report_TotalRecords;
        $Header->_Report_TotalRecordsAttributes = $this->_Report_TotalRecordsAttributes;
        $Header->CountGroupSex = $this->CountGroupSex;
        $Header->_CountGroupSexAttributes = $this->_CountGroupSexAttributes;
        $this->GroupSex2 = $Header->GroupSex2;
        $Header->_GroupSex2Attributes = $this->_GroupSex2Attributes;
        $this->Parent->GroupSex2->Value = $Header->GroupSex2;
        $this->Parent->GroupSex2->Attributes->RestoreFromArray($Header->_GroupSex2Attributes);
    }
    function ChangeTotalControls() {
        $this->Report_TotalRecords = $this->Parent->Report_TotalRecords->GetValue();
        $this->CountGroupSex = $this->Parent->CountGroupSex->GetValue();
    }
}
//End NewBorn33 ReportGroup class

//NewBorn33 GroupsCollection class @383-127AEBB5
class clsGroupsCollectionNewBorn33 {
    public $Groups;
    public $mPageCurrentHeaderIndex;
    public $mSexCurrentHeaderIndex;
    public $PageSize;
    public $TotalPages = 0;
    public $TotalRows = 0;
    public $CurrentPageSize = 0;
    public $Pages;
    public $Parent;
    public $LastDetailIndex;

    function clsGroupsCollectionNewBorn33(& $parent) {
        $this->Parent = & $parent;
        $this->Groups = array();
        $this->Pages  = array();
        $this->mSexCurrentHeaderIndex = 1;
        $this->mReportTotalIndex = 0;
        $this->mPageTotalIndex = 1;
    }

    function & InitGroup() {
        $group = new clsReportGroupNewBorn33($this->Parent);
        $group->RowNumber = $this->TotalRows + 1;
        $group->PageNumber = $this->TotalPages;
        $group->PageTotalIndex = $this->mPageCurrentHeaderIndex;
        $group->SexTotalIndex = $this->mSexCurrentHeaderIndex;
        return $group;
    }

    function RestoreValues() {
        $this->Parent->Report_TotalRecords->Value = $this->Parent->Report_TotalRecords->initialValue;
        $this->Parent->GroupSex2->Value = $this->Parent->GroupSex2->initialValue;
        $this->Parent->CountGroupSex->Value = $this->Parent->CountGroupSex->initialValue;
    }

    function OpenPage() {
        $this->TotalPages++;
        $Group = & $this->InitGroup();
        $this->Parent->Page_Header->CCSEventResult = CCGetEvent($this->Parent->Page_Header->CCSEvents, "OnInitialize", $this->Parent->Page_Header);
        if ($this->Parent->Page_Header->Visible)
            $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Page_Header->Height;
        $Group->SetTotalControls("GetNextValue");
        $this->Parent->Page_Header->CCSEventResult = CCGetEvent($this->Parent->Page_Header->CCSEvents, "OnCalculate", $this->Parent->Page_Header);
        $Group->SetControls();
        $Group->Mode = 1;
        $Group->GroupType = "Page";
        $Group->PageTotalIndex = count($this->Groups);
        $this->mPageCurrentHeaderIndex = count($this->Groups);
        $this->Groups[] =  & $Group;
        $this->Pages[] =  count($this->Groups) == 2 ? 0 : count($this->Groups) - 1;
    }

    function OpenGroup($groupName) {
        $Group = "";
        $OpenFlag = false;
        if ($groupName == "Report") {
            $Group = & $this->InitGroup(true);
            $this->Parent->Report_Header->CCSEventResult = CCGetEvent($this->Parent->Report_Header->CCSEvents, "OnInitialize", $this->Parent->Report_Header);
            if ($this->Parent->Report_Header->Visible) 
                $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Report_Header->Height;
                $Group->SetTotalControls("GetNextValue");
            $this->Parent->Report_Header->CCSEventResult = CCGetEvent($this->Parent->Report_Header->CCSEvents, "OnCalculate", $this->Parent->Report_Header);
            $Group->SetControls();
            $Group->Mode = 1;
            $Group->GroupType = "Report";
            $this->Groups[] = & $Group;
            $this->OpenPage();
        }
        if ($groupName == "Sex") {
            $GroupSex = & $this->InitGroup(true);
            $this->Parent->Sex_Header->CCSEventResult = CCGetEvent($this->Parent->Sex_Header->CCSEvents, "OnInitialize", $this->Parent->Sex_Header);
            if ($this->Parent->Page_Footer->Visible) 
                $OverSize = $this->Parent->Sex_Header->Height + $this->Parent->Page_Footer->Height;
            else
                $OverSize = $this->Parent->Sex_Header->Height;
            if (($this->PageSize > 0) and $this->Parent->Sex_Header->Visible and ($this->CurrentPageSize + $OverSize > $this->PageSize)) {
                $this->ClosePage();
                $this->OpenPage();
            }
            if ($this->Parent->Sex_Header->Visible)
                $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Sex_Header->Height;
                $GroupSex->SetTotalControls("GetNextValue");
            $this->Parent->Sex_Header->CCSEventResult = CCGetEvent($this->Parent->Sex_Header->CCSEvents, "OnCalculate", $this->Parent->Sex_Header);
            $GroupSex->SetControls();
            $GroupSex->Mode = 1;
            $GroupSex->GroupType = "Sex";
            $this->mSexCurrentHeaderIndex = count($this->Groups);
            $this->Groups[] = & $GroupSex;
            $this->Parent->CountGroupSex->Reset();
        }
    }

    function ClosePage() {
        $Group = & $this->InitGroup();
        $this->Parent->Page_Footer->CCSEventResult = CCGetEvent($this->Parent->Page_Footer->CCSEvents, "OnInitialize", $this->Parent->Page_Footer);
        $Group->SetTotalControls("GetPrevValue");
        $Group->SyncWithHeader($this->Groups[$this->mPageCurrentHeaderIndex]);
        $this->Parent->Page_Footer->CCSEventResult = CCGetEvent($this->Parent->Page_Footer->CCSEvents, "OnCalculate", $this->Parent->Page_Footer);
        $Group->SetControls();
        $this->RestoreValues();
        $this->CurrentPageSize = 0;
        $Group->Mode = 2;
        $Group->GroupType = "Page";
        $this->Groups[] = & $Group;
    }

    function CloseGroup($groupName)
    {
        $Group = "";
        if ($groupName == "Report") {
            $Group = & $this->InitGroup(true);
            $this->Parent->Report_Footer->CCSEventResult = CCGetEvent($this->Parent->Report_Footer->CCSEvents, "OnInitialize", $this->Parent->Report_Footer);
            if ($this->Parent->Page_Footer->Visible) 
                $OverSize = $this->Parent->Report_Footer->Height + $this->Parent->Page_Footer->Height;
            else
                $OverSize = $this->Parent->Report_Footer->Height;
            if (($this->PageSize > 0) and $this->Parent->Report_Footer->Visible and ($this->CurrentPageSize + $OverSize > $this->PageSize)) {
                $this->ClosePage();
                $this->OpenPage();
            }
            $Group->SetTotalControls("GetPrevValue");
            $Group->SyncWithHeader($this->Groups[0]);
            if ($this->Parent->Report_Footer->Visible)
                $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Report_Footer->Height;
            $this->Parent->Report_Footer->CCSEventResult = CCGetEvent($this->Parent->Report_Footer->CCSEvents, "OnCalculate", $this->Parent->Report_Footer);
            $Group->SetControls();
            $this->RestoreValues();
            $Group->Mode = 2;
            $Group->GroupType = "Report";
            $this->Groups[] = & $Group;
            $this->ClosePage();
            return;
        }
        $GroupSex = & $this->InitGroup(true);
        $this->Parent->Sex_Footer->CCSEventResult = CCGetEvent($this->Parent->Sex_Footer->CCSEvents, "OnInitialize", $this->Parent->Sex_Footer);
        if ($this->Parent->Page_Footer->Visible) 
            $OverSize = $this->Parent->Sex_Footer->Height + $this->Parent->Page_Footer->Height;
        else
            $OverSize = $this->Parent->Sex_Footer->Height;
        if (($this->PageSize > 0) and $this->Parent->Sex_Footer->Visible and ($this->CurrentPageSize + $OverSize > $this->PageSize)) {
            $this->ClosePage();
            $this->OpenPage();
        }
        $GroupSex->SetTotalControls("GetPrevValue");
        $GroupSex->SyncWithHeader($this->Groups[$this->mSexCurrentHeaderIndex]);
        if ($this->Parent->Sex_Footer->Visible)
            $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Sex_Footer->Height;
        $this->Parent->Sex_Footer->CCSEventResult = CCGetEvent($this->Parent->Sex_Footer->CCSEvents, "OnCalculate", $this->Parent->Sex_Footer);
        $GroupSex->SetControls();
        $this->Parent->CountGroupSex->Reset();
        $this->RestoreValues();
        $GroupSex->Mode = 2;
        $GroupSex->GroupType ="Sex";
        $this->Groups[] = & $GroupSex;
    }

    function AddItem()
    {
        $Group = & $this->InitGroup(true);
        $this->Parent->Detail->CCSEventResult = CCGetEvent($this->Parent->Detail->CCSEvents, "OnInitialize", $this->Parent->Detail);
        if ($this->Parent->Page_Footer->Visible) 
            $OverSize = $this->Parent->Detail->Height + $this->Parent->Page_Footer->Height;
        else
            $OverSize = $this->Parent->Detail->Height;
        if (($this->PageSize > 0) and $this->Parent->Detail->Visible and ($this->CurrentPageSize + $OverSize > $this->PageSize)) {
            $this->ClosePage();
            $this->OpenPage();
        }
        $this->TotalRows++;
        if ($this->LastDetailIndex)
            $PrevGroup = & $this->Groups[$this->LastDetailIndex];
        else
            $PrevGroup = "";
        $Group->SetTotalControls("", $PrevGroup);
        if ($this->Parent->Detail->Visible)
            $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Detail->Height;
        $this->Parent->Detail->CCSEventResult = CCGetEvent($this->Parent->Detail->CCSEvents, "OnCalculate", $this->Parent->Detail);
        $Group->SetControls($PrevGroup);
        $this->LastDetailIndex = count($this->Groups);
        $this->Groups[] = & $Group;
    }
}
//End NewBorn33 GroupsCollection class

class clsReportNewBorn33 { //NewBorn33 Class @383-6AE010D5

//NewBorn33 Variables @383-80D63D80

    public $ComponentType = "Report";
    public $PageSize;
    public $ComponentName;
    public $Visible;
    public $Errors;
    public $CCSEvents = array();
    public $CCSEventResult;
    public $RelativePath = "";
    public $ViewMode = "Web";
    public $TemplateBlock;
    public $PageNumber;
    public $RowNumber;
    public $TotalRows;
    public $TotalPages;
    public $ControlsVisible = array();
    public $IsEmpty;
    public $Attributes;
    public $DetailBlock, $Detail;
    public $Report_FooterBlock, $Report_Footer;
    public $Report_HeaderBlock, $Report_Header;
    public $Page_FooterBlock, $Page_Footer;
    public $Page_HeaderBlock, $Page_Header;
    public $Sex_HeaderBlock, $Sex_Header;
    public $Sex_FooterBlock, $Sex_Footer;
    public $SorterName, $SorterDirection;

    public $ds;
    public $DataSource;
    public $UseClientPaging = false;

    //Report Controls
    public $StaticControls, $RowControls, $Report_FooterControls, $Report_HeaderControls;
    public $Page_FooterControls, $Page_HeaderControls;
    public $Sex_HeaderControls, $Sex_FooterControls;
//End NewBorn33 Variables

//Class_Initialize Event @383-A87C645E
    function clsReportNewBorn33($RelativePath = "", & $Parent)
    {
        global $FileName;
        global $CCSLocales;
        global $DefaultDateFormat;
        $this->ComponentName = "NewBorn33";
        $this->Visible = True;
        $this->Parent = & $Parent;
        $this->RelativePath = $RelativePath;
        $this->Attributes = new clsAttributes($this->ComponentName . ":");
        $this->Detail = new clsSection($this);
        $MinPageSize = 0;
        $MaxSectionSize = 0;
        $this->Detail->Height = 1;
        $MaxSectionSize = max($MaxSectionSize, $this->Detail->Height);
        $this->Report_Footer = new clsSection($this);
        $this->Report_Header = new clsSection($this);
        $this->Page_Footer = new clsSection($this);
        $this->Page_Footer->Height = 1;
        $MinPageSize += $this->Page_Footer->Height;
        $this->Page_Header = new clsSection($this);
        $this->Page_Header->Height = 1;
        $MinPageSize += $this->Page_Header->Height;
        $this->Sex_Footer = new clsSection($this);
        $this->Sex_Footer->Height = 1;
        $MaxSectionSize = max($MaxSectionSize, $this->Sex_Footer->Height);
        $this->Sex_Header = new clsSection($this);
        $this->Sex_Header->Height = 1;
        $MaxSectionSize = max($MaxSectionSize, $this->Sex_Header->Height);
        $this->Errors = new clsErrors();
        $this->DataSource = new clsNewBorn33DataSource($this);
        $this->ds = & $this->DataSource;
        $PageSize = CCGetParam($this->ComponentName . "PageSize", "");
        if(is_numeric($PageSize) && $PageSize > 0) {
            $this->PageSize = $PageSize;
        } else {
            if (!is_numeric($PageSize) || $PageSize < 0)
                $this->PageSize = 0;
             else if ($PageSize == "0")
                $this->PageSize = 0;
             else 
                $this->PageSize = $PageSize;
        }
        $MinPageSize += $MaxSectionSize;
        if ($this->PageSize && $MinPageSize && $this->PageSize < $MinPageSize)
            $this->PageSize = $MinPageSize;
        $this->PageNumber = $this->ViewMode == "Print" ? 1 : intval(CCGetParam($this->ComponentName . "Page", 1));
        if ($this->PageNumber <= 0 ) {
            $this->PageNumber = 1;
        }
        $this->Visible = (CCSecurityAccessCheck("3") == "success");

        $this->Report_TotalRecords = new clsControl(ccsReportLabel, "Report_TotalRecords", "Report_TotalRecords", ccsText, "", 0, $this);
        $this->Report_TotalRecords->TotalFunction = "Count";
        $this->Report_TotalRecords->IsEmptySource = true;
        $this->NoRecords = new clsPanel("NoRecords", $this);
        $this->GroupSex2 = new clsControl(ccsReportLabel, "GroupSex2", "GroupSex2", ccsInteger, "", "", $this);
        $this->CountGroupSex = new clsControl(ccsReportLabel, "CountGroupSex", "CountGroupSex", ccsText, "", 0, $this);
        $this->CountGroupSex->TotalFunction = "Count";
    }
//End Class_Initialize Event

//Initialize Method @383-6C59EE65
    function Initialize()
    {
        if(!$this->Visible) return;

        $this->DataSource->PageSize = $this->PageSize;
        $this->DataSource->AbsolutePage = $this->PageNumber;
        $this->DataSource->SetOrder($this->SorterName, $this->SorterDirection);
    }
//End Initialize Method

//CheckErrors Method @383-CD002B70
    function CheckErrors()
    {
        $errors = false;
        $errors = ($errors || $this->Report_TotalRecords->Errors->Count());
        $errors = ($errors || $this->GroupSex2->Errors->Count());
        $errors = ($errors || $this->CountGroupSex->Errors->Count());
        $errors = ($errors || $this->Errors->Count());
        $errors = ($errors || $this->DataSource->Errors->Count());
        return $errors;
    }
//End CheckErrors Method

//GetErrors Method @383-B2E862A1
    function GetErrors()
    {
        $errors = "";
        $errors = ComposeStrings($errors, $this->Report_TotalRecords->Errors->ToString());
        $errors = ComposeStrings($errors, $this->GroupSex2->Errors->ToString());
        $errors = ComposeStrings($errors, $this->CountGroupSex->Errors->ToString());
        $errors = ComposeStrings($errors, $this->Errors->ToString());
        $errors = ComposeStrings($errors, $this->DataSource->Errors->ToString());
        return $errors;
    }
//End GetErrors Method

//Show Method @383-11013D7D
    function Show()
    {
        global $Tpl;
        global $CCSLocales;
        if(!$this->Visible) return;

        $ShownRecords = 0;

        $this->DataSource->Parameters["urls_BirthDate"] = CCGetFromGet("s_BirthDate", NULL);
        $this->DataSource->Parameters["urls_BirthDate1"] = CCGetFromGet("s_BirthDate1", NULL);
        $this->DataSource->Parameters["sess_Facilities"] = CCGetSession("s_Facilities", NULL);

        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeSelect", $this);


        $this->DataSource->Prepare();
        $this->DataSource->Open();

        $SexKey = "";
        $Groups = new clsGroupsCollectionNewBorn33($this);
        $Groups->PageSize = $this->PageSize > 0 ? $this->PageSize : 0;

        $is_next_record = $this->DataSource->next_record();
        $this->IsEmpty = ! $is_next_record;
        while($is_next_record) {
            $this->DataSource->SetValues();
            $this->GroupSex2->SetValue($this->DataSource->GroupSex2->GetValue());
            $this->CountGroupSex->SetValue($this->DataSource->CountGroupSex->GetValue());
            $this->Report_TotalRecords->SetValue(1);
            if (count($Groups->Groups) == 0) $Groups->OpenGroup("Report");
            if (count($Groups->Groups) == 2 or $SexKey != $this->DataSource->f("Sex")) {
                $Groups->OpenGroup("Sex");
            }
            $Groups->AddItem();
            $SexKey = $this->DataSource->f("Sex");
            $is_next_record = $this->DataSource->next_record();
            if (!$is_next_record || $SexKey != $this->DataSource->f("Sex")) {
                $Groups->CloseGroup("Sex");
            }
        }
        if (!count($Groups->Groups)) 
            $Groups->OpenGroup("Report");
        else
            $this->NoRecords->Visible = false;
        $Groups->CloseGroup("Report");
        $this->TotalPages = $Groups->TotalPages;
        $this->TotalRows = $Groups->TotalRows;

        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeShow", $this);
        if(!$this->Visible) return;

        $this->Attributes->Show();
        $ReportBlock = "Report " . $this->ComponentName;
        $ParentPath = $Tpl->block_path;
        $Tpl->block_path = $ParentPath . "/" . $ReportBlock;

        if($this->CheckErrors()) {
            $Tpl->replaceblock("", $this->GetErrors());
            $Tpl->block_path = $ParentPath;
            return;
        } else {
            $items = & $Groups->Groups;
            $i = $Groups->Pages[min($this->PageNumber, $Groups->TotalPages) - 1];
            $this->ControlsVisible["GroupSex2"] = $this->GroupSex2->Visible;
            $this->ControlsVisible["CountGroupSex"] = $this->CountGroupSex->Visible;
            do {
                $this->Attributes->RestoreFromArray($items[$i]->Attributes);
                $this->RowNumber = $items[$i]->RowNumber;
                switch ($items[$i]->GroupType) {
                    Case "":
                        $this->Detail->CCSEventResult = CCGetEvent($this->Detail->CCSEvents, "BeforeShow", $this->Detail);
                        if ($this->Detail->Visible) {
                            $this->Attributes->Show();
                            $Tpl->parseto("Section Detail", true, "Section Detail");
                        }
                        break;
                    case "Report":
                        if ($items[$i]->Mode == 1) {
                            $this->Report_TotalRecords->SetValue($items[$i]->Report_TotalRecords);
                            $this->Report_TotalRecords->Attributes->RestoreFromArray($items[$i]->_Report_TotalRecordsAttributes);
                            $this->Report_Header->CCSEventResult = CCGetEvent($this->Report_Header->CCSEvents, "BeforeShow", $this->Report_Header);
                            if ($this->Report_Header->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Report_Header";
                                $this->Attributes->Show();
                                $this->Report_TotalRecords->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Report_Header", true, "Section Detail");
                            }
                        }
                        if ($items[$i]->Mode == 2) {
                            $this->Report_Footer->CCSEventResult = CCGetEvent($this->Report_Footer->CCSEvents, "BeforeShow", $this->Report_Footer);
                            if ($this->Report_Footer->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Report_Footer";
                                $this->NoRecords->Show();
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Report_Footer", true, "Section Detail");
                            }
                        }
                        break;
                    case "Page":
                        if ($items[$i]->Mode == 1) {
                            $this->Page_Header->CCSEventResult = CCGetEvent($this->Page_Header->CCSEvents, "BeforeShow", $this->Page_Header);
                            if ($this->Page_Header->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Page_Header";
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Page_Header", true, "Section Detail");
                            }
                        }
                        if ($items[$i]->Mode == 2 && !$this->UseClientPaging || $items[$i]->Mode == 1 && $this->UseClientPaging) {
                            $this->Page_Footer->CCSEventResult = CCGetEvent($this->Page_Footer->CCSEvents, "BeforeShow", $this->Page_Footer);
                            if ($this->Page_Footer->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Page_Footer";
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Page_Footer", true, "Section Detail");
                            }
                        }
                        break;
                    case "Sex":
                        if ($items[$i]->Mode == 1) {
                            $this->GroupSex2->SetValue($items[$i]->GroupSex2);
                            $this->GroupSex2->Attributes->RestoreFromArray($items[$i]->_GroupSex2Attributes);
                            $this->CountGroupSex->SetValue($items[$i]->CountGroupSex);
                            $this->CountGroupSex->Attributes->RestoreFromArray($items[$i]->_CountGroupSexAttributes);
                            $this->Sex_Header->CCSEventResult = CCGetEvent($this->Sex_Header->CCSEvents, "BeforeShow", $this->Sex_Header);
                            if ($this->Sex_Header->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Sex_Header";
                                $this->Attributes->Show();
                                $this->GroupSex2->Show();
                                $this->CountGroupSex->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Sex_Header", true, "Section Detail");
                            }
                        }
                        if ($items[$i]->Mode == 2) {
                            $this->Sex_Footer->CCSEventResult = CCGetEvent($this->Sex_Footer->CCSEvents, "BeforeShow", $this->Sex_Footer);
                            if ($this->Sex_Footer->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Sex_Footer";
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Sex_Footer", true, "Section Detail");
                            }
                        }
                        break;
                }
                $i++;
            } while ($i < count($items) && ($this->ViewMode == "Print" ||  !($i > 1 && $items[$i]->GroupType == 'Page' && $items[$i]->Mode == 1)));
            $Tpl->block_path = $ParentPath;
            $Tpl->parse($ReportBlock);
            $this->DataSource->close();
        }

    }
//End Show Method

} //End NewBorn33 Class @383-FCB6E20C

class clsNewBorn33DataSource extends clsDBregistry_db {  //NewBorn33DataSource Class @383-5B0BB5BC

//DataSource Variables @383-F5055419
    public $Parent = "";
    public $CCSEvents = "";
    public $CCSEventResult;
    public $ErrorBlock;
    public $CmdExecution;

    public $wp;


    // Datasource fields
    public $GroupSex2;
    public $CountGroupSex;
//End DataSource Variables

//DataSourceClass_Initialize Event @383-B403BE39
    function clsNewBorn33DataSource(& $Parent)
    {
        $this->Parent = & $Parent;
        $this->ErrorBlock = "Report NewBorn33";
        $this->Initialize();
        $this->GroupSex2 = new clsField("GroupSex2", ccsInteger, "");
        
        $this->CountGroupSex = new clsField("CountGroupSex", ccsText, "");
        

    }
//End DataSourceClass_Initialize Event

//SetOrder Method @383-9E1383D1
    function SetOrder($SorterName, $SorterDirection)
    {
        $this->Order = "";
        $this->Order = CCGetOrder($this->Order, $SorterName, $SorterDirection, 
            "");
    }
//End SetOrder Method

//Prepare Method @383-6405692F
    function Prepare()
    {
        global $CCSLocales;
        global $DefaultDateFormat;
        $this->wp = new clsSQLParameters($this->ErrorBlock);
        $this->wp->AddParameter("3", "urls_BirthDate", ccsDate, array("ShortDate"), array("yyyy", "-", "mm", "-", "dd", " ", "HH", ":", "nn", ":", "ss"), $this->Parameters["urls_BirthDate"], "", false);
        $this->wp->AddParameter("4", "urls_BirthDate1", ccsDate, array("ShortDate"), array("yyyy", "-", "mm", "-", "dd", " ", "HH", ":", "nn", ":", "ss"), $this->Parameters["urls_BirthDate1"], "", false);
        $this->wp->AddParameter("5", "sess_Facilities", ccsInteger, "", "", $this->Parameters["sess_Facilities"], 0, false);
        $this->wp->Criterion[1] = "( newborn.Weight>=2500 )";
        $this->wp->Criterion[2] = "( newborn.Weight<=2999 )";
        $this->wp->Criterion[3] = $this->wp->Operation(opGreaterThanOrEqual, "newborn.BirthDate", $this->wp->GetDBValue("3"), $this->ToSQL($this->wp->GetDBValue("3"), ccsDate),false);
        $this->wp->Criterion[4] = $this->wp->Operation(opLessThanOrEqual, "newborn.BirthDate", $this->wp->GetDBValue("4"), $this->ToSQL($this->wp->GetDBValue("4"), ccsDate),false);
        $this->wp->Criterion[5] = $this->wp->Operation(opIn, "facilities.FacilityID", $this->wp->GetDBValue("5"), $this->ToSQL($this->wp->GetDBValue("5"), ccsInteger, true),false);
        $this->wp->Criterion[6] = "( newborn.Died=1 )";
        $this->wp->Criterion[7] = "( newborn.DiedID=1 )";
        $this->Where = $this->wp->opAND(
             false, $this->wp->opAND(
             false, $this->wp->opAND(
             false, $this->wp->opAND(
             false, $this->wp->opAND(
             false, $this->wp->opAND(
             false, 
             $this->wp->Criterion[1], 
             $this->wp->Criterion[2]), 
             $this->wp->Criterion[3]), 
             $this->wp->Criterion[4]), 
             $this->wp->Criterion[5]), 
             $this->wp->Criterion[6]), 
             $this->wp->Criterion[7]);
    }
//End Prepare Method

//Open Method @383-CA3C9D7B
    function Open()
    {
        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeBuildSelect", $this->Parent);
        $this->SQL = "SELECT delivery.DeliveryID AS delivery_DeliveryID, FacilityName, Sex, NewBornID, BirthDate, Weight \n\n" .
        "FROM (delivery INNER JOIN facilities ON\n\n" .
        "delivery.FacilityID = facilities.FacilityID) INNER JOIN newborn ON\n\n" .
        "newborn.DeliveryID = delivery.DeliveryID {SQL_Where} {SQL_OrderBy}";
        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeExecuteSelect", $this->Parent);
        $this->query(CCBuildSQL($this->SQL, $this->Where, "newborn.Sex asc" .  ($this->Order ? ", " . $this->Order: "")));
        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "AfterExecuteSelect", $this->Parent);
    }
//End Open Method

//SetValues Method @383-F73A025D
    function SetValues()
    {
        $this->GroupSex2->SetDBValue(trim($this->f("Sex")));
        $this->CountGroupSex->SetDBValue($this->f("Sex"));
    }
//End SetValues Method

} //End NewBorn33DataSource Class @383-FCB6E20C

//NewBorn34 ReportGroup class @447-FA1FF288
class clsReportGroupNewBorn34 {
    public $GroupType;
    public $mode; //1 - open, 2 - close
    public $Report_TotalRecords, $_Report_TotalRecordsAttributes;
    public $GroupSex2, $_GroupSex2Attributes;
    public $CountGroupSex, $_CountGroupSexAttributes;
    public $Attributes;
    public $ReportTotalIndex = 0;
    public $PageTotalIndex;
    public $PageNumber;
    public $RowNumber;
    public $Parent;
    public $SexTotalIndex;

    function clsReportGroupNewBorn34(& $parent) {
        $this->Parent = & $parent;
        $this->Attributes = $this->Parent->Attributes->GetAsArray();
    }
    function SetControls($PrevGroup = "") {
        $this->GroupSex2 = $this->Parent->GroupSex2->Value;
    }

    function SetTotalControls($mode = "", $PrevGroup = "") {
        $this->Report_TotalRecords = $this->Parent->Report_TotalRecords->GetTotalValue($mode);
        $this->CountGroupSex = $this->Parent->CountGroupSex->GetTotalValue($mode);
        $this->_Report_TotalRecordsAttributes = $this->Parent->Report_TotalRecords->Attributes->GetAsArray();
        $this->_GroupSex2Attributes = $this->Parent->GroupSex2->Attributes->GetAsArray();
        $this->_CountGroupSexAttributes = $this->Parent->CountGroupSex->Attributes->GetAsArray();
    }
    function SyncWithHeader(& $Header) {
        $Header->Report_TotalRecords = $this->Report_TotalRecords;
        $Header->_Report_TotalRecordsAttributes = $this->_Report_TotalRecordsAttributes;
        $Header->CountGroupSex = $this->CountGroupSex;
        $Header->_CountGroupSexAttributes = $this->_CountGroupSexAttributes;
        $this->GroupSex2 = $Header->GroupSex2;
        $Header->_GroupSex2Attributes = $this->_GroupSex2Attributes;
        $this->Parent->GroupSex2->Value = $Header->GroupSex2;
        $this->Parent->GroupSex2->Attributes->RestoreFromArray($Header->_GroupSex2Attributes);
    }
    function ChangeTotalControls() {
        $this->Report_TotalRecords = $this->Parent->Report_TotalRecords->GetValue();
        $this->CountGroupSex = $this->Parent->CountGroupSex->GetValue();
    }
}
//End NewBorn34 ReportGroup class

//NewBorn34 GroupsCollection class @447-D1E246E9
class clsGroupsCollectionNewBorn34 {
    public $Groups;
    public $mPageCurrentHeaderIndex;
    public $mSexCurrentHeaderIndex;
    public $PageSize;
    public $TotalPages = 0;
    public $TotalRows = 0;
    public $CurrentPageSize = 0;
    public $Pages;
    public $Parent;
    public $LastDetailIndex;

    function clsGroupsCollectionNewBorn34(& $parent) {
        $this->Parent = & $parent;
        $this->Groups = array();
        $this->Pages  = array();
        $this->mSexCurrentHeaderIndex = 1;
        $this->mReportTotalIndex = 0;
        $this->mPageTotalIndex = 1;
    }

    function & InitGroup() {
        $group = new clsReportGroupNewBorn34($this->Parent);
        $group->RowNumber = $this->TotalRows + 1;
        $group->PageNumber = $this->TotalPages;
        $group->PageTotalIndex = $this->mPageCurrentHeaderIndex;
        $group->SexTotalIndex = $this->mSexCurrentHeaderIndex;
        return $group;
    }

    function RestoreValues() {
        $this->Parent->Report_TotalRecords->Value = $this->Parent->Report_TotalRecords->initialValue;
        $this->Parent->GroupSex2->Value = $this->Parent->GroupSex2->initialValue;
        $this->Parent->CountGroupSex->Value = $this->Parent->CountGroupSex->initialValue;
    }

    function OpenPage() {
        $this->TotalPages++;
        $Group = & $this->InitGroup();
        $this->Parent->Page_Header->CCSEventResult = CCGetEvent($this->Parent->Page_Header->CCSEvents, "OnInitialize", $this->Parent->Page_Header);
        if ($this->Parent->Page_Header->Visible)
            $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Page_Header->Height;
        $Group->SetTotalControls("GetNextValue");
        $this->Parent->Page_Header->CCSEventResult = CCGetEvent($this->Parent->Page_Header->CCSEvents, "OnCalculate", $this->Parent->Page_Header);
        $Group->SetControls();
        $Group->Mode = 1;
        $Group->GroupType = "Page";
        $Group->PageTotalIndex = count($this->Groups);
        $this->mPageCurrentHeaderIndex = count($this->Groups);
        $this->Groups[] =  & $Group;
        $this->Pages[] =  count($this->Groups) == 2 ? 0 : count($this->Groups) - 1;
    }

    function OpenGroup($groupName) {
        $Group = "";
        $OpenFlag = false;
        if ($groupName == "Report") {
            $Group = & $this->InitGroup(true);
            $this->Parent->Report_Header->CCSEventResult = CCGetEvent($this->Parent->Report_Header->CCSEvents, "OnInitialize", $this->Parent->Report_Header);
            if ($this->Parent->Report_Header->Visible) 
                $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Report_Header->Height;
                $Group->SetTotalControls("GetNextValue");
            $this->Parent->Report_Header->CCSEventResult = CCGetEvent($this->Parent->Report_Header->CCSEvents, "OnCalculate", $this->Parent->Report_Header);
            $Group->SetControls();
            $Group->Mode = 1;
            $Group->GroupType = "Report";
            $this->Groups[] = & $Group;
            $this->OpenPage();
        }
        if ($groupName == "Sex") {
            $GroupSex = & $this->InitGroup(true);
            $this->Parent->Sex_Header->CCSEventResult = CCGetEvent($this->Parent->Sex_Header->CCSEvents, "OnInitialize", $this->Parent->Sex_Header);
            if ($this->Parent->Page_Footer->Visible) 
                $OverSize = $this->Parent->Sex_Header->Height + $this->Parent->Page_Footer->Height;
            else
                $OverSize = $this->Parent->Sex_Header->Height;
            if (($this->PageSize > 0) and $this->Parent->Sex_Header->Visible and ($this->CurrentPageSize + $OverSize > $this->PageSize)) {
                $this->ClosePage();
                $this->OpenPage();
            }
            if ($this->Parent->Sex_Header->Visible)
                $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Sex_Header->Height;
                $GroupSex->SetTotalControls("GetNextValue");
            $this->Parent->Sex_Header->CCSEventResult = CCGetEvent($this->Parent->Sex_Header->CCSEvents, "OnCalculate", $this->Parent->Sex_Header);
            $GroupSex->SetControls();
            $GroupSex->Mode = 1;
            $GroupSex->GroupType = "Sex";
            $this->mSexCurrentHeaderIndex = count($this->Groups);
            $this->Groups[] = & $GroupSex;
            $this->Parent->CountGroupSex->Reset();
        }
    }

    function ClosePage() {
        $Group = & $this->InitGroup();
        $this->Parent->Page_Footer->CCSEventResult = CCGetEvent($this->Parent->Page_Footer->CCSEvents, "OnInitialize", $this->Parent->Page_Footer);
        $Group->SetTotalControls("GetPrevValue");
        $Group->SyncWithHeader($this->Groups[$this->mPageCurrentHeaderIndex]);
        $this->Parent->Page_Footer->CCSEventResult = CCGetEvent($this->Parent->Page_Footer->CCSEvents, "OnCalculate", $this->Parent->Page_Footer);
        $Group->SetControls();
        $this->RestoreValues();
        $this->CurrentPageSize = 0;
        $Group->Mode = 2;
        $Group->GroupType = "Page";
        $this->Groups[] = & $Group;
    }

    function CloseGroup($groupName)
    {
        $Group = "";
        if ($groupName == "Report") {
            $Group = & $this->InitGroup(true);
            $this->Parent->Report_Footer->CCSEventResult = CCGetEvent($this->Parent->Report_Footer->CCSEvents, "OnInitialize", $this->Parent->Report_Footer);
            if ($this->Parent->Page_Footer->Visible) 
                $OverSize = $this->Parent->Report_Footer->Height + $this->Parent->Page_Footer->Height;
            else
                $OverSize = $this->Parent->Report_Footer->Height;
            if (($this->PageSize > 0) and $this->Parent->Report_Footer->Visible and ($this->CurrentPageSize + $OverSize > $this->PageSize)) {
                $this->ClosePage();
                $this->OpenPage();
            }
            $Group->SetTotalControls("GetPrevValue");
            $Group->SyncWithHeader($this->Groups[0]);
            if ($this->Parent->Report_Footer->Visible)
                $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Report_Footer->Height;
            $this->Parent->Report_Footer->CCSEventResult = CCGetEvent($this->Parent->Report_Footer->CCSEvents, "OnCalculate", $this->Parent->Report_Footer);
            $Group->SetControls();
            $this->RestoreValues();
            $Group->Mode = 2;
            $Group->GroupType = "Report";
            $this->Groups[] = & $Group;
            $this->ClosePage();
            return;
        }
        $GroupSex = & $this->InitGroup(true);
        $this->Parent->Sex_Footer->CCSEventResult = CCGetEvent($this->Parent->Sex_Footer->CCSEvents, "OnInitialize", $this->Parent->Sex_Footer);
        if ($this->Parent->Page_Footer->Visible) 
            $OverSize = $this->Parent->Sex_Footer->Height + $this->Parent->Page_Footer->Height;
        else
            $OverSize = $this->Parent->Sex_Footer->Height;
        if (($this->PageSize > 0) and $this->Parent->Sex_Footer->Visible and ($this->CurrentPageSize + $OverSize > $this->PageSize)) {
            $this->ClosePage();
            $this->OpenPage();
        }
        $GroupSex->SetTotalControls("GetPrevValue");
        $GroupSex->SyncWithHeader($this->Groups[$this->mSexCurrentHeaderIndex]);
        if ($this->Parent->Sex_Footer->Visible)
            $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Sex_Footer->Height;
        $this->Parent->Sex_Footer->CCSEventResult = CCGetEvent($this->Parent->Sex_Footer->CCSEvents, "OnCalculate", $this->Parent->Sex_Footer);
        $GroupSex->SetControls();
        $this->Parent->CountGroupSex->Reset();
        $this->RestoreValues();
        $GroupSex->Mode = 2;
        $GroupSex->GroupType ="Sex";
        $this->Groups[] = & $GroupSex;
    }

    function AddItem()
    {
        $Group = & $this->InitGroup(true);
        $this->Parent->Detail->CCSEventResult = CCGetEvent($this->Parent->Detail->CCSEvents, "OnInitialize", $this->Parent->Detail);
        if ($this->Parent->Page_Footer->Visible) 
            $OverSize = $this->Parent->Detail->Height + $this->Parent->Page_Footer->Height;
        else
            $OverSize = $this->Parent->Detail->Height;
        if (($this->PageSize > 0) and $this->Parent->Detail->Visible and ($this->CurrentPageSize + $OverSize > $this->PageSize)) {
            $this->ClosePage();
            $this->OpenPage();
        }
        $this->TotalRows++;
        if ($this->LastDetailIndex)
            $PrevGroup = & $this->Groups[$this->LastDetailIndex];
        else
            $PrevGroup = "";
        $Group->SetTotalControls("", $PrevGroup);
        if ($this->Parent->Detail->Visible)
            $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Detail->Height;
        $this->Parent->Detail->CCSEventResult = CCGetEvent($this->Parent->Detail->CCSEvents, "OnCalculate", $this->Parent->Detail);
        $Group->SetControls($PrevGroup);
        $this->LastDetailIndex = count($this->Groups);
        $this->Groups[] = & $Group;
    }
}
//End NewBorn34 GroupsCollection class

class clsReportNewBorn34 { //NewBorn34 Class @447-25A18612

//NewBorn34 Variables @447-80D63D80

    public $ComponentType = "Report";
    public $PageSize;
    public $ComponentName;
    public $Visible;
    public $Errors;
    public $CCSEvents = array();
    public $CCSEventResult;
    public $RelativePath = "";
    public $ViewMode = "Web";
    public $TemplateBlock;
    public $PageNumber;
    public $RowNumber;
    public $TotalRows;
    public $TotalPages;
    public $ControlsVisible = array();
    public $IsEmpty;
    public $Attributes;
    public $DetailBlock, $Detail;
    public $Report_FooterBlock, $Report_Footer;
    public $Report_HeaderBlock, $Report_Header;
    public $Page_FooterBlock, $Page_Footer;
    public $Page_HeaderBlock, $Page_Header;
    public $Sex_HeaderBlock, $Sex_Header;
    public $Sex_FooterBlock, $Sex_Footer;
    public $SorterName, $SorterDirection;

    public $ds;
    public $DataSource;
    public $UseClientPaging = false;

    //Report Controls
    public $StaticControls, $RowControls, $Report_FooterControls, $Report_HeaderControls;
    public $Page_FooterControls, $Page_HeaderControls;
    public $Sex_HeaderControls, $Sex_FooterControls;
//End NewBorn34 Variables

//Class_Initialize Event @447-4BDC0EF4
    function clsReportNewBorn34($RelativePath = "", & $Parent)
    {
        global $FileName;
        global $CCSLocales;
        global $DefaultDateFormat;
        $this->ComponentName = "NewBorn34";
        $this->Visible = True;
        $this->Parent = & $Parent;
        $this->RelativePath = $RelativePath;
        $this->Attributes = new clsAttributes($this->ComponentName . ":");
        $this->Detail = new clsSection($this);
        $MinPageSize = 0;
        $MaxSectionSize = 0;
        $this->Detail->Height = 1;
        $MaxSectionSize = max($MaxSectionSize, $this->Detail->Height);
        $this->Report_Footer = new clsSection($this);
        $this->Report_Header = new clsSection($this);
        $this->Page_Footer = new clsSection($this);
        $this->Page_Footer->Height = 1;
        $MinPageSize += $this->Page_Footer->Height;
        $this->Page_Header = new clsSection($this);
        $this->Page_Header->Height = 1;
        $MinPageSize += $this->Page_Header->Height;
        $this->Sex_Footer = new clsSection($this);
        $this->Sex_Footer->Height = 1;
        $MaxSectionSize = max($MaxSectionSize, $this->Sex_Footer->Height);
        $this->Sex_Header = new clsSection($this);
        $this->Sex_Header->Height = 1;
        $MaxSectionSize = max($MaxSectionSize, $this->Sex_Header->Height);
        $this->Errors = new clsErrors();
        $this->DataSource = new clsNewBorn34DataSource($this);
        $this->ds = & $this->DataSource;
        $PageSize = CCGetParam($this->ComponentName . "PageSize", "");
        if(is_numeric($PageSize) && $PageSize > 0) {
            $this->PageSize = $PageSize;
        } else {
            if (!is_numeric($PageSize) || $PageSize < 0)
                $this->PageSize = 0;
             else if ($PageSize == "0")
                $this->PageSize = 0;
             else 
                $this->PageSize = $PageSize;
        }
        $MinPageSize += $MaxSectionSize;
        if ($this->PageSize && $MinPageSize && $this->PageSize < $MinPageSize)
            $this->PageSize = $MinPageSize;
        $this->PageNumber = $this->ViewMode == "Print" ? 1 : intval(CCGetParam($this->ComponentName . "Page", 1));
        if ($this->PageNumber <= 0 ) {
            $this->PageNumber = 1;
        }
        $this->Visible = (CCSecurityAccessCheck("3") == "success");

        $this->Report_TotalRecords = new clsControl(ccsReportLabel, "Report_TotalRecords", "Report_TotalRecords", ccsText, "", 0, $this);
        $this->Report_TotalRecords->TotalFunction = "Count";
        $this->Report_TotalRecords->IsEmptySource = true;
        $this->NoRecords = new clsPanel("NoRecords", $this);
        $this->GroupSex2 = new clsControl(ccsReportLabel, "GroupSex2", "GroupSex2", ccsInteger, "", "", $this);
        $this->CountGroupSex = new clsControl(ccsReportLabel, "CountGroupSex", "CountGroupSex", ccsText, "", 0, $this);
        $this->CountGroupSex->TotalFunction = "Count";
    }
//End Class_Initialize Event

//Initialize Method @447-6C59EE65
    function Initialize()
    {
        if(!$this->Visible) return;

        $this->DataSource->PageSize = $this->PageSize;
        $this->DataSource->AbsolutePage = $this->PageNumber;
        $this->DataSource->SetOrder($this->SorterName, $this->SorterDirection);
    }
//End Initialize Method

//CheckErrors Method @447-CD002B70
    function CheckErrors()
    {
        $errors = false;
        $errors = ($errors || $this->Report_TotalRecords->Errors->Count());
        $errors = ($errors || $this->GroupSex2->Errors->Count());
        $errors = ($errors || $this->CountGroupSex->Errors->Count());
        $errors = ($errors || $this->Errors->Count());
        $errors = ($errors || $this->DataSource->Errors->Count());
        return $errors;
    }
//End CheckErrors Method

//GetErrors Method @447-B2E862A1
    function GetErrors()
    {
        $errors = "";
        $errors = ComposeStrings($errors, $this->Report_TotalRecords->Errors->ToString());
        $errors = ComposeStrings($errors, $this->GroupSex2->Errors->ToString());
        $errors = ComposeStrings($errors, $this->CountGroupSex->Errors->ToString());
        $errors = ComposeStrings($errors, $this->Errors->ToString());
        $errors = ComposeStrings($errors, $this->DataSource->Errors->ToString());
        return $errors;
    }
//End GetErrors Method

//Show Method @447-E021A705
    function Show()
    {
        global $Tpl;
        global $CCSLocales;
        if(!$this->Visible) return;

        $ShownRecords = 0;

        $this->DataSource->Parameters["urls_BirthDate"] = CCGetFromGet("s_BirthDate", NULL);
        $this->DataSource->Parameters["urls_BirthDate1"] = CCGetFromGet("s_BirthDate1", NULL);
        $this->DataSource->Parameters["sess_Facilities"] = CCGetSession("s_Facilities", NULL);

        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeSelect", $this);


        $this->DataSource->Prepare();
        $this->DataSource->Open();

        $SexKey = "";
        $Groups = new clsGroupsCollectionNewBorn34($this);
        $Groups->PageSize = $this->PageSize > 0 ? $this->PageSize : 0;

        $is_next_record = $this->DataSource->next_record();
        $this->IsEmpty = ! $is_next_record;
        while($is_next_record) {
            $this->DataSource->SetValues();
            $this->GroupSex2->SetValue($this->DataSource->GroupSex2->GetValue());
            $this->CountGroupSex->SetValue($this->DataSource->CountGroupSex->GetValue());
            $this->Report_TotalRecords->SetValue(1);
            if (count($Groups->Groups) == 0) $Groups->OpenGroup("Report");
            if (count($Groups->Groups) == 2 or $SexKey != $this->DataSource->f("Sex")) {
                $Groups->OpenGroup("Sex");
            }
            $Groups->AddItem();
            $SexKey = $this->DataSource->f("Sex");
            $is_next_record = $this->DataSource->next_record();
            if (!$is_next_record || $SexKey != $this->DataSource->f("Sex")) {
                $Groups->CloseGroup("Sex");
            }
        }
        if (!count($Groups->Groups)) 
            $Groups->OpenGroup("Report");
        else
            $this->NoRecords->Visible = false;
        $Groups->CloseGroup("Report");
        $this->TotalPages = $Groups->TotalPages;
        $this->TotalRows = $Groups->TotalRows;

        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeShow", $this);
        if(!$this->Visible) return;

        $this->Attributes->Show();
        $ReportBlock = "Report " . $this->ComponentName;
        $ParentPath = $Tpl->block_path;
        $Tpl->block_path = $ParentPath . "/" . $ReportBlock;

        if($this->CheckErrors()) {
            $Tpl->replaceblock("", $this->GetErrors());
            $Tpl->block_path = $ParentPath;
            return;
        } else {
            $items = & $Groups->Groups;
            $i = $Groups->Pages[min($this->PageNumber, $Groups->TotalPages) - 1];
            $this->ControlsVisible["GroupSex2"] = $this->GroupSex2->Visible;
            $this->ControlsVisible["CountGroupSex"] = $this->CountGroupSex->Visible;
            do {
                $this->Attributes->RestoreFromArray($items[$i]->Attributes);
                $this->RowNumber = $items[$i]->RowNumber;
                switch ($items[$i]->GroupType) {
                    Case "":
                        $this->Detail->CCSEventResult = CCGetEvent($this->Detail->CCSEvents, "BeforeShow", $this->Detail);
                        if ($this->Detail->Visible) {
                            $this->Attributes->Show();
                            $Tpl->parseto("Section Detail", true, "Section Detail");
                        }
                        break;
                    case "Report":
                        if ($items[$i]->Mode == 1) {
                            $this->Report_TotalRecords->SetValue($items[$i]->Report_TotalRecords);
                            $this->Report_TotalRecords->Attributes->RestoreFromArray($items[$i]->_Report_TotalRecordsAttributes);
                            $this->Report_Header->CCSEventResult = CCGetEvent($this->Report_Header->CCSEvents, "BeforeShow", $this->Report_Header);
                            if ($this->Report_Header->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Report_Header";
                                $this->Attributes->Show();
                                $this->Report_TotalRecords->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Report_Header", true, "Section Detail");
                            }
                        }
                        if ($items[$i]->Mode == 2) {
                            $this->Report_Footer->CCSEventResult = CCGetEvent($this->Report_Footer->CCSEvents, "BeforeShow", $this->Report_Footer);
                            if ($this->Report_Footer->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Report_Footer";
                                $this->NoRecords->Show();
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Report_Footer", true, "Section Detail");
                            }
                        }
                        break;
                    case "Page":
                        if ($items[$i]->Mode == 1) {
                            $this->Page_Header->CCSEventResult = CCGetEvent($this->Page_Header->CCSEvents, "BeforeShow", $this->Page_Header);
                            if ($this->Page_Header->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Page_Header";
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Page_Header", true, "Section Detail");
                            }
                        }
                        if ($items[$i]->Mode == 2 && !$this->UseClientPaging || $items[$i]->Mode == 1 && $this->UseClientPaging) {
                            $this->Page_Footer->CCSEventResult = CCGetEvent($this->Page_Footer->CCSEvents, "BeforeShow", $this->Page_Footer);
                            if ($this->Page_Footer->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Page_Footer";
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Page_Footer", true, "Section Detail");
                            }
                        }
                        break;
                    case "Sex":
                        if ($items[$i]->Mode == 1) {
                            $this->GroupSex2->SetValue($items[$i]->GroupSex2);
                            $this->GroupSex2->Attributes->RestoreFromArray($items[$i]->_GroupSex2Attributes);
                            $this->CountGroupSex->SetValue($items[$i]->CountGroupSex);
                            $this->CountGroupSex->Attributes->RestoreFromArray($items[$i]->_CountGroupSexAttributes);
                            $this->Sex_Header->CCSEventResult = CCGetEvent($this->Sex_Header->CCSEvents, "BeforeShow", $this->Sex_Header);
                            if ($this->Sex_Header->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Sex_Header";
                                $this->Attributes->Show();
                                $this->GroupSex2->Show();
                                $this->CountGroupSex->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Sex_Header", true, "Section Detail");
                            }
                        }
                        if ($items[$i]->Mode == 2) {
                            $this->Sex_Footer->CCSEventResult = CCGetEvent($this->Sex_Footer->CCSEvents, "BeforeShow", $this->Sex_Footer);
                            if ($this->Sex_Footer->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Sex_Footer";
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Sex_Footer", true, "Section Detail");
                            }
                        }
                        break;
                }
                $i++;
            } while ($i < count($items) && ($this->ViewMode == "Print" ||  !($i > 1 && $items[$i]->GroupType == 'Page' && $items[$i]->Mode == 1)));
            $Tpl->block_path = $ParentPath;
            $Tpl->parse($ReportBlock);
            $this->DataSource->close();
        }

    }
//End Show Method

} //End NewBorn34 Class @447-FCB6E20C

class clsNewBorn34DataSource extends clsDBregistry_db {  //NewBorn34DataSource Class @447-5842D807

//DataSource Variables @447-F5055419
    public $Parent = "";
    public $CCSEvents = "";
    public $CCSEventResult;
    public $ErrorBlock;
    public $CmdExecution;

    public $wp;


    // Datasource fields
    public $GroupSex2;
    public $CountGroupSex;
//End DataSource Variables

//DataSourceClass_Initialize Event @447-CEE44815
    function clsNewBorn34DataSource(& $Parent)
    {
        $this->Parent = & $Parent;
        $this->ErrorBlock = "Report NewBorn34";
        $this->Initialize();
        $this->GroupSex2 = new clsField("GroupSex2", ccsInteger, "");
        
        $this->CountGroupSex = new clsField("CountGroupSex", ccsText, "");
        

    }
//End DataSourceClass_Initialize Event

//SetOrder Method @447-9E1383D1
    function SetOrder($SorterName, $SorterDirection)
    {
        $this->Order = "";
        $this->Order = CCGetOrder($this->Order, $SorterName, $SorterDirection, 
            "");
    }
//End SetOrder Method

//Prepare Method @447-D3368C1C
    function Prepare()
    {
        global $CCSLocales;
        global $DefaultDateFormat;
        $this->wp = new clsSQLParameters($this->ErrorBlock);
        $this->wp->AddParameter("3", "urls_BirthDate", ccsDate, array("ShortDate"), array("yyyy", "-", "mm", "-", "dd", " ", "HH", ":", "nn", ":", "ss"), $this->Parameters["urls_BirthDate"], "", false);
        $this->wp->AddParameter("4", "urls_BirthDate1", ccsDate, array("ShortDate"), array("yyyy", "-", "mm", "-", "dd", " ", "HH", ":", "nn", ":", "ss"), $this->Parameters["urls_BirthDate1"], "", false);
        $this->wp->AddParameter("5", "sess_Facilities", ccsInteger, "", "", $this->Parameters["sess_Facilities"], 0, false);
        $this->wp->Criterion[1] = "( newborn.Weight>=3000 )";
        $this->wp->Criterion[2] = "( newborn.Weight<=3499 )";
        $this->wp->Criterion[3] = $this->wp->Operation(opGreaterThanOrEqual, "newborn.BirthDate", $this->wp->GetDBValue("3"), $this->ToSQL($this->wp->GetDBValue("3"), ccsDate),false);
        $this->wp->Criterion[4] = $this->wp->Operation(opLessThanOrEqual, "newborn.BirthDate", $this->wp->GetDBValue("4"), $this->ToSQL($this->wp->GetDBValue("4"), ccsDate),false);
        $this->wp->Criterion[5] = $this->wp->Operation(opIn, "facilities.FacilityID", $this->wp->GetDBValue("5"), $this->ToSQL($this->wp->GetDBValue("5"), ccsInteger, true),false);
        $this->wp->Criterion[6] = "( newborn.Died=1 )";
        $this->wp->Criterion[7] = "( newborn.DiedID=1 )";
        $this->Where = $this->wp->opAND(
             false, $this->wp->opAND(
             false, $this->wp->opAND(
             false, $this->wp->opAND(
             false, $this->wp->opAND(
             false, $this->wp->opAND(
             false, 
             $this->wp->Criterion[1], 
             $this->wp->Criterion[2]), 
             $this->wp->Criterion[3]), 
             $this->wp->Criterion[4]), 
             $this->wp->Criterion[5]), 
             $this->wp->Criterion[6]), 
             $this->wp->Criterion[7]);
    }
//End Prepare Method

//Open Method @447-CA3C9D7B
    function Open()
    {
        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeBuildSelect", $this->Parent);
        $this->SQL = "SELECT delivery.DeliveryID AS delivery_DeliveryID, FacilityName, Sex, NewBornID, BirthDate, Weight \n\n" .
        "FROM (delivery INNER JOIN facilities ON\n\n" .
        "delivery.FacilityID = facilities.FacilityID) INNER JOIN newborn ON\n\n" .
        "newborn.DeliveryID = delivery.DeliveryID {SQL_Where} {SQL_OrderBy}";
        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeExecuteSelect", $this->Parent);
        $this->query(CCBuildSQL($this->SQL, $this->Where, "newborn.Sex asc" .  ($this->Order ? ", " . $this->Order: "")));
        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "AfterExecuteSelect", $this->Parent);
    }
//End Open Method

//SetValues Method @447-F73A025D
    function SetValues()
    {
        $this->GroupSex2->SetDBValue(trim($this->f("Sex")));
        $this->CountGroupSex->SetDBValue($this->f("Sex"));
    }
//End SetValues Method

} //End NewBorn34DataSource Class @447-FCB6E20C

//NewBorn35 ReportGroup class @511-E3688FB1
class clsReportGroupNewBorn35 {
    public $GroupType;
    public $mode; //1 - open, 2 - close
    public $Report_TotalRecords, $_Report_TotalRecordsAttributes;
    public $GroupSex2, $_GroupSex2Attributes;
    public $CountGroupSex, $_CountGroupSexAttributes;
    public $Attributes;
    public $ReportTotalIndex = 0;
    public $PageTotalIndex;
    public $PageNumber;
    public $RowNumber;
    public $Parent;
    public $SexTotalIndex;

    function clsReportGroupNewBorn35(& $parent) {
        $this->Parent = & $parent;
        $this->Attributes = $this->Parent->Attributes->GetAsArray();
    }
    function SetControls($PrevGroup = "") {
        $this->GroupSex2 = $this->Parent->GroupSex2->Value;
    }

    function SetTotalControls($mode = "", $PrevGroup = "") {
        $this->Report_TotalRecords = $this->Parent->Report_TotalRecords->GetTotalValue($mode);
        $this->CountGroupSex = $this->Parent->CountGroupSex->GetTotalValue($mode);
        $this->_Report_TotalRecordsAttributes = $this->Parent->Report_TotalRecords->Attributes->GetAsArray();
        $this->_GroupSex2Attributes = $this->Parent->GroupSex2->Attributes->GetAsArray();
        $this->_CountGroupSexAttributes = $this->Parent->CountGroupSex->Attributes->GetAsArray();
    }
    function SyncWithHeader(& $Header) {
        $Header->Report_TotalRecords = $this->Report_TotalRecords;
        $Header->_Report_TotalRecordsAttributes = $this->_Report_TotalRecordsAttributes;
        $Header->CountGroupSex = $this->CountGroupSex;
        $Header->_CountGroupSexAttributes = $this->_CountGroupSexAttributes;
        $this->GroupSex2 = $Header->GroupSex2;
        $Header->_GroupSex2Attributes = $this->_GroupSex2Attributes;
        $this->Parent->GroupSex2->Value = $Header->GroupSex2;
        $this->Parent->GroupSex2->Attributes->RestoreFromArray($Header->_GroupSex2Attributes);
    }
    function ChangeTotalControls() {
        $this->Report_TotalRecords = $this->Parent->Report_TotalRecords->GetValue();
        $this->CountGroupSex = $this->Parent->CountGroupSex->GetValue();
    }
}
//End NewBorn35 ReportGroup class

//NewBorn35 GroupsCollection class @511-76F1CB1B
class clsGroupsCollectionNewBorn35 {
    public $Groups;
    public $mPageCurrentHeaderIndex;
    public $mSexCurrentHeaderIndex;
    public $PageSize;
    public $TotalPages = 0;
    public $TotalRows = 0;
    public $CurrentPageSize = 0;
    public $Pages;
    public $Parent;
    public $LastDetailIndex;

    function clsGroupsCollectionNewBorn35(& $parent) {
        $this->Parent = & $parent;
        $this->Groups = array();
        $this->Pages  = array();
        $this->mSexCurrentHeaderIndex = 1;
        $this->mReportTotalIndex = 0;
        $this->mPageTotalIndex = 1;
    }

    function & InitGroup() {
        $group = new clsReportGroupNewBorn35($this->Parent);
        $group->RowNumber = $this->TotalRows + 1;
        $group->PageNumber = $this->TotalPages;
        $group->PageTotalIndex = $this->mPageCurrentHeaderIndex;
        $group->SexTotalIndex = $this->mSexCurrentHeaderIndex;
        return $group;
    }

    function RestoreValues() {
        $this->Parent->Report_TotalRecords->Value = $this->Parent->Report_TotalRecords->initialValue;
        $this->Parent->GroupSex2->Value = $this->Parent->GroupSex2->initialValue;
        $this->Parent->CountGroupSex->Value = $this->Parent->CountGroupSex->initialValue;
    }

    function OpenPage() {
        $this->TotalPages++;
        $Group = & $this->InitGroup();
        $this->Parent->Page_Header->CCSEventResult = CCGetEvent($this->Parent->Page_Header->CCSEvents, "OnInitialize", $this->Parent->Page_Header);
        if ($this->Parent->Page_Header->Visible)
            $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Page_Header->Height;
        $Group->SetTotalControls("GetNextValue");
        $this->Parent->Page_Header->CCSEventResult = CCGetEvent($this->Parent->Page_Header->CCSEvents, "OnCalculate", $this->Parent->Page_Header);
        $Group->SetControls();
        $Group->Mode = 1;
        $Group->GroupType = "Page";
        $Group->PageTotalIndex = count($this->Groups);
        $this->mPageCurrentHeaderIndex = count($this->Groups);
        $this->Groups[] =  & $Group;
        $this->Pages[] =  count($this->Groups) == 2 ? 0 : count($this->Groups) - 1;
    }

    function OpenGroup($groupName) {
        $Group = "";
        $OpenFlag = false;
        if ($groupName == "Report") {
            $Group = & $this->InitGroup(true);
            $this->Parent->Report_Header->CCSEventResult = CCGetEvent($this->Parent->Report_Header->CCSEvents, "OnInitialize", $this->Parent->Report_Header);
            if ($this->Parent->Report_Header->Visible) 
                $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Report_Header->Height;
                $Group->SetTotalControls("GetNextValue");
            $this->Parent->Report_Header->CCSEventResult = CCGetEvent($this->Parent->Report_Header->CCSEvents, "OnCalculate", $this->Parent->Report_Header);
            $Group->SetControls();
            $Group->Mode = 1;
            $Group->GroupType = "Report";
            $this->Groups[] = & $Group;
            $this->OpenPage();
        }
        if ($groupName == "Sex") {
            $GroupSex = & $this->InitGroup(true);
            $this->Parent->Sex_Header->CCSEventResult = CCGetEvent($this->Parent->Sex_Header->CCSEvents, "OnInitialize", $this->Parent->Sex_Header);
            if ($this->Parent->Page_Footer->Visible) 
                $OverSize = $this->Parent->Sex_Header->Height + $this->Parent->Page_Footer->Height;
            else
                $OverSize = $this->Parent->Sex_Header->Height;
            if (($this->PageSize > 0) and $this->Parent->Sex_Header->Visible and ($this->CurrentPageSize + $OverSize > $this->PageSize)) {
                $this->ClosePage();
                $this->OpenPage();
            }
            if ($this->Parent->Sex_Header->Visible)
                $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Sex_Header->Height;
                $GroupSex->SetTotalControls("GetNextValue");
            $this->Parent->Sex_Header->CCSEventResult = CCGetEvent($this->Parent->Sex_Header->CCSEvents, "OnCalculate", $this->Parent->Sex_Header);
            $GroupSex->SetControls();
            $GroupSex->Mode = 1;
            $GroupSex->GroupType = "Sex";
            $this->mSexCurrentHeaderIndex = count($this->Groups);
            $this->Groups[] = & $GroupSex;
            $this->Parent->CountGroupSex->Reset();
        }
    }

    function ClosePage() {
        $Group = & $this->InitGroup();
        $this->Parent->Page_Footer->CCSEventResult = CCGetEvent($this->Parent->Page_Footer->CCSEvents, "OnInitialize", $this->Parent->Page_Footer);
        $Group->SetTotalControls("GetPrevValue");
        $Group->SyncWithHeader($this->Groups[$this->mPageCurrentHeaderIndex]);
        $this->Parent->Page_Footer->CCSEventResult = CCGetEvent($this->Parent->Page_Footer->CCSEvents, "OnCalculate", $this->Parent->Page_Footer);
        $Group->SetControls();
        $this->RestoreValues();
        $this->CurrentPageSize = 0;
        $Group->Mode = 2;
        $Group->GroupType = "Page";
        $this->Groups[] = & $Group;
    }

    function CloseGroup($groupName)
    {
        $Group = "";
        if ($groupName == "Report") {
            $Group = & $this->InitGroup(true);
            $this->Parent->Report_Footer->CCSEventResult = CCGetEvent($this->Parent->Report_Footer->CCSEvents, "OnInitialize", $this->Parent->Report_Footer);
            if ($this->Parent->Page_Footer->Visible) 
                $OverSize = $this->Parent->Report_Footer->Height + $this->Parent->Page_Footer->Height;
            else
                $OverSize = $this->Parent->Report_Footer->Height;
            if (($this->PageSize > 0) and $this->Parent->Report_Footer->Visible and ($this->CurrentPageSize + $OverSize > $this->PageSize)) {
                $this->ClosePage();
                $this->OpenPage();
            }
            $Group->SetTotalControls("GetPrevValue");
            $Group->SyncWithHeader($this->Groups[0]);
            if ($this->Parent->Report_Footer->Visible)
                $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Report_Footer->Height;
            $this->Parent->Report_Footer->CCSEventResult = CCGetEvent($this->Parent->Report_Footer->CCSEvents, "OnCalculate", $this->Parent->Report_Footer);
            $Group->SetControls();
            $this->RestoreValues();
            $Group->Mode = 2;
            $Group->GroupType = "Report";
            $this->Groups[] = & $Group;
            $this->ClosePage();
            return;
        }
        $GroupSex = & $this->InitGroup(true);
        $this->Parent->Sex_Footer->CCSEventResult = CCGetEvent($this->Parent->Sex_Footer->CCSEvents, "OnInitialize", $this->Parent->Sex_Footer);
        if ($this->Parent->Page_Footer->Visible) 
            $OverSize = $this->Parent->Sex_Footer->Height + $this->Parent->Page_Footer->Height;
        else
            $OverSize = $this->Parent->Sex_Footer->Height;
        if (($this->PageSize > 0) and $this->Parent->Sex_Footer->Visible and ($this->CurrentPageSize + $OverSize > $this->PageSize)) {
            $this->ClosePage();
            $this->OpenPage();
        }
        $GroupSex->SetTotalControls("GetPrevValue");
        $GroupSex->SyncWithHeader($this->Groups[$this->mSexCurrentHeaderIndex]);
        if ($this->Parent->Sex_Footer->Visible)
            $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Sex_Footer->Height;
        $this->Parent->Sex_Footer->CCSEventResult = CCGetEvent($this->Parent->Sex_Footer->CCSEvents, "OnCalculate", $this->Parent->Sex_Footer);
        $GroupSex->SetControls();
        $this->Parent->CountGroupSex->Reset();
        $this->RestoreValues();
        $GroupSex->Mode = 2;
        $GroupSex->GroupType ="Sex";
        $this->Groups[] = & $GroupSex;
    }

    function AddItem()
    {
        $Group = & $this->InitGroup(true);
        $this->Parent->Detail->CCSEventResult = CCGetEvent($this->Parent->Detail->CCSEvents, "OnInitialize", $this->Parent->Detail);
        if ($this->Parent->Page_Footer->Visible) 
            $OverSize = $this->Parent->Detail->Height + $this->Parent->Page_Footer->Height;
        else
            $OverSize = $this->Parent->Detail->Height;
        if (($this->PageSize > 0) and $this->Parent->Detail->Visible and ($this->CurrentPageSize + $OverSize > $this->PageSize)) {
            $this->ClosePage();
            $this->OpenPage();
        }
        $this->TotalRows++;
        if ($this->LastDetailIndex)
            $PrevGroup = & $this->Groups[$this->LastDetailIndex];
        else
            $PrevGroup = "";
        $Group->SetTotalControls("", $PrevGroup);
        if ($this->Parent->Detail->Visible)
            $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Detail->Height;
        $this->Parent->Detail->CCSEventResult = CCGetEvent($this->Parent->Detail->CCSEvents, "OnCalculate", $this->Parent->Detail);
        $Group->SetControls($PrevGroup);
        $this->LastDetailIndex = count($this->Groups);
        $this->Groups[] = & $Group;
    }
}
//End NewBorn35 GroupsCollection class

class clsReportNewBorn35 { //NewBorn35 Class @511-3CBAB753

//NewBorn35 Variables @511-80D63D80

    public $ComponentType = "Report";
    public $PageSize;
    public $ComponentName;
    public $Visible;
    public $Errors;
    public $CCSEvents = array();
    public $CCSEventResult;
    public $RelativePath = "";
    public $ViewMode = "Web";
    public $TemplateBlock;
    public $PageNumber;
    public $RowNumber;
    public $TotalRows;
    public $TotalPages;
    public $ControlsVisible = array();
    public $IsEmpty;
    public $Attributes;
    public $DetailBlock, $Detail;
    public $Report_FooterBlock, $Report_Footer;
    public $Report_HeaderBlock, $Report_Header;
    public $Page_FooterBlock, $Page_Footer;
    public $Page_HeaderBlock, $Page_Header;
    public $Sex_HeaderBlock, $Sex_Header;
    public $Sex_FooterBlock, $Sex_Footer;
    public $SorterName, $SorterDirection;

    public $ds;
    public $DataSource;
    public $UseClientPaging = false;

    //Report Controls
    public $StaticControls, $RowControls, $Report_FooterControls, $Report_HeaderControls;
    public $Page_FooterControls, $Page_HeaderControls;
    public $Sex_HeaderControls, $Sex_FooterControls;
//End NewBorn35 Variables

//Class_Initialize Event @511-6B51AD7A
    function clsReportNewBorn35($RelativePath = "", & $Parent)
    {
        global $FileName;
        global $CCSLocales;
        global $DefaultDateFormat;
        $this->ComponentName = "NewBorn35";
        $this->Visible = True;
        $this->Parent = & $Parent;
        $this->RelativePath = $RelativePath;
        $this->Attributes = new clsAttributes($this->ComponentName . ":");
        $this->Detail = new clsSection($this);
        $MinPageSize = 0;
        $MaxSectionSize = 0;
        $this->Detail->Height = 1;
        $MaxSectionSize = max($MaxSectionSize, $this->Detail->Height);
        $this->Report_Footer = new clsSection($this);
        $this->Report_Header = new clsSection($this);
        $this->Page_Footer = new clsSection($this);
        $this->Page_Footer->Height = 1;
        $MinPageSize += $this->Page_Footer->Height;
        $this->Page_Header = new clsSection($this);
        $this->Page_Header->Height = 1;
        $MinPageSize += $this->Page_Header->Height;
        $this->Sex_Footer = new clsSection($this);
        $this->Sex_Footer->Height = 1;
        $MaxSectionSize = max($MaxSectionSize, $this->Sex_Footer->Height);
        $this->Sex_Header = new clsSection($this);
        $this->Sex_Header->Height = 1;
        $MaxSectionSize = max($MaxSectionSize, $this->Sex_Header->Height);
        $this->Errors = new clsErrors();
        $this->DataSource = new clsNewBorn35DataSource($this);
        $this->ds = & $this->DataSource;
        $PageSize = CCGetParam($this->ComponentName . "PageSize", "");
        if(is_numeric($PageSize) && $PageSize > 0) {
            $this->PageSize = $PageSize;
        } else {
            if (!is_numeric($PageSize) || $PageSize < 0)
                $this->PageSize = 0;
             else if ($PageSize == "0")
                $this->PageSize = 0;
             else 
                $this->PageSize = $PageSize;
        }
        $MinPageSize += $MaxSectionSize;
        if ($this->PageSize && $MinPageSize && $this->PageSize < $MinPageSize)
            $this->PageSize = $MinPageSize;
        $this->PageNumber = $this->ViewMode == "Print" ? 1 : intval(CCGetParam($this->ComponentName . "Page", 1));
        if ($this->PageNumber <= 0 ) {
            $this->PageNumber = 1;
        }
        $this->Visible = (CCSecurityAccessCheck("3") == "success");

        $this->Report_TotalRecords = new clsControl(ccsReportLabel, "Report_TotalRecords", "Report_TotalRecords", ccsText, "", 0, $this);
        $this->Report_TotalRecords->TotalFunction = "Count";
        $this->Report_TotalRecords->IsEmptySource = true;
        $this->NoRecords = new clsPanel("NoRecords", $this);
        $this->GroupSex2 = new clsControl(ccsReportLabel, "GroupSex2", "GroupSex2", ccsInteger, "", "", $this);
        $this->CountGroupSex = new clsControl(ccsReportLabel, "CountGroupSex", "CountGroupSex", ccsText, "", 0, $this);
        $this->CountGroupSex->TotalFunction = "Count";
    }
//End Class_Initialize Event

//Initialize Method @511-6C59EE65
    function Initialize()
    {
        if(!$this->Visible) return;

        $this->DataSource->PageSize = $this->PageSize;
        $this->DataSource->AbsolutePage = $this->PageNumber;
        $this->DataSource->SetOrder($this->SorterName, $this->SorterDirection);
    }
//End Initialize Method

//CheckErrors Method @511-CD002B70
    function CheckErrors()
    {
        $errors = false;
        $errors = ($errors || $this->Report_TotalRecords->Errors->Count());
        $errors = ($errors || $this->GroupSex2->Errors->Count());
        $errors = ($errors || $this->CountGroupSex->Errors->Count());
        $errors = ($errors || $this->Errors->Count());
        $errors = ($errors || $this->DataSource->Errors->Count());
        return $errors;
    }
//End CheckErrors Method

//GetErrors Method @511-B2E862A1
    function GetErrors()
    {
        $errors = "";
        $errors = ComposeStrings($errors, $this->Report_TotalRecords->Errors->ToString());
        $errors = ComposeStrings($errors, $this->GroupSex2->Errors->ToString());
        $errors = ComposeStrings($errors, $this->CountGroupSex->Errors->ToString());
        $errors = ComposeStrings($errors, $this->Errors->ToString());
        $errors = ComposeStrings($errors, $this->DataSource->Errors->ToString());
        return $errors;
    }
//End GetErrors Method

//Show Method @511-838A95D6
    function Show()
    {
        global $Tpl;
        global $CCSLocales;
        if(!$this->Visible) return;

        $ShownRecords = 0;

        $this->DataSource->Parameters["urls_BirthDate"] = CCGetFromGet("s_BirthDate", NULL);
        $this->DataSource->Parameters["urls_BirthDate1"] = CCGetFromGet("s_BirthDate1", NULL);
        $this->DataSource->Parameters["sess_Facilities"] = CCGetSession("s_Facilities", NULL);

        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeSelect", $this);


        $this->DataSource->Prepare();
        $this->DataSource->Open();

        $SexKey = "";
        $Groups = new clsGroupsCollectionNewBorn35($this);
        $Groups->PageSize = $this->PageSize > 0 ? $this->PageSize : 0;

        $is_next_record = $this->DataSource->next_record();
        $this->IsEmpty = ! $is_next_record;
        while($is_next_record) {
            $this->DataSource->SetValues();
            $this->GroupSex2->SetValue($this->DataSource->GroupSex2->GetValue());
            $this->CountGroupSex->SetValue($this->DataSource->CountGroupSex->GetValue());
            $this->Report_TotalRecords->SetValue(1);
            if (count($Groups->Groups) == 0) $Groups->OpenGroup("Report");
            if (count($Groups->Groups) == 2 or $SexKey != $this->DataSource->f("Sex")) {
                $Groups->OpenGroup("Sex");
            }
            $Groups->AddItem();
            $SexKey = $this->DataSource->f("Sex");
            $is_next_record = $this->DataSource->next_record();
            if (!$is_next_record || $SexKey != $this->DataSource->f("Sex")) {
                $Groups->CloseGroup("Sex");
            }
        }
        if (!count($Groups->Groups)) 
            $Groups->OpenGroup("Report");
        else
            $this->NoRecords->Visible = false;
        $Groups->CloseGroup("Report");
        $this->TotalPages = $Groups->TotalPages;
        $this->TotalRows = $Groups->TotalRows;

        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeShow", $this);
        if(!$this->Visible) return;

        $this->Attributes->Show();
        $ReportBlock = "Report " . $this->ComponentName;
        $ParentPath = $Tpl->block_path;
        $Tpl->block_path = $ParentPath . "/" . $ReportBlock;

        if($this->CheckErrors()) {
            $Tpl->replaceblock("", $this->GetErrors());
            $Tpl->block_path = $ParentPath;
            return;
        } else {
            $items = & $Groups->Groups;
            $i = $Groups->Pages[min($this->PageNumber, $Groups->TotalPages) - 1];
            $this->ControlsVisible["GroupSex2"] = $this->GroupSex2->Visible;
            $this->ControlsVisible["CountGroupSex"] = $this->CountGroupSex->Visible;
            do {
                $this->Attributes->RestoreFromArray($items[$i]->Attributes);
                $this->RowNumber = $items[$i]->RowNumber;
                switch ($items[$i]->GroupType) {
                    Case "":
                        $this->Detail->CCSEventResult = CCGetEvent($this->Detail->CCSEvents, "BeforeShow", $this->Detail);
                        if ($this->Detail->Visible) {
                            $this->Attributes->Show();
                            $Tpl->parseto("Section Detail", true, "Section Detail");
                        }
                        break;
                    case "Report":
                        if ($items[$i]->Mode == 1) {
                            $this->Report_TotalRecords->SetValue($items[$i]->Report_TotalRecords);
                            $this->Report_TotalRecords->Attributes->RestoreFromArray($items[$i]->_Report_TotalRecordsAttributes);
                            $this->Report_Header->CCSEventResult = CCGetEvent($this->Report_Header->CCSEvents, "BeforeShow", $this->Report_Header);
                            if ($this->Report_Header->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Report_Header";
                                $this->Attributes->Show();
                                $this->Report_TotalRecords->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Report_Header", true, "Section Detail");
                            }
                        }
                        if ($items[$i]->Mode == 2) {
                            $this->Report_Footer->CCSEventResult = CCGetEvent($this->Report_Footer->CCSEvents, "BeforeShow", $this->Report_Footer);
                            if ($this->Report_Footer->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Report_Footer";
                                $this->NoRecords->Show();
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Report_Footer", true, "Section Detail");
                            }
                        }
                        break;
                    case "Page":
                        if ($items[$i]->Mode == 1) {
                            $this->Page_Header->CCSEventResult = CCGetEvent($this->Page_Header->CCSEvents, "BeforeShow", $this->Page_Header);
                            if ($this->Page_Header->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Page_Header";
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Page_Header", true, "Section Detail");
                            }
                        }
                        if ($items[$i]->Mode == 2 && !$this->UseClientPaging || $items[$i]->Mode == 1 && $this->UseClientPaging) {
                            $this->Page_Footer->CCSEventResult = CCGetEvent($this->Page_Footer->CCSEvents, "BeforeShow", $this->Page_Footer);
                            if ($this->Page_Footer->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Page_Footer";
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Page_Footer", true, "Section Detail");
                            }
                        }
                        break;
                    case "Sex":
                        if ($items[$i]->Mode == 1) {
                            $this->GroupSex2->SetValue($items[$i]->GroupSex2);
                            $this->GroupSex2->Attributes->RestoreFromArray($items[$i]->_GroupSex2Attributes);
                            $this->CountGroupSex->SetValue($items[$i]->CountGroupSex);
                            $this->CountGroupSex->Attributes->RestoreFromArray($items[$i]->_CountGroupSexAttributes);
                            $this->Sex_Header->CCSEventResult = CCGetEvent($this->Sex_Header->CCSEvents, "BeforeShow", $this->Sex_Header);
                            if ($this->Sex_Header->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Sex_Header";
                                $this->Attributes->Show();
                                $this->GroupSex2->Show();
                                $this->CountGroupSex->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Sex_Header", true, "Section Detail");
                            }
                        }
                        if ($items[$i]->Mode == 2) {
                            $this->Sex_Footer->CCSEventResult = CCGetEvent($this->Sex_Footer->CCSEvents, "BeforeShow", $this->Sex_Footer);
                            if ($this->Sex_Footer->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Sex_Footer";
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Sex_Footer", true, "Section Detail");
                            }
                        }
                        break;
                }
                $i++;
            } while ($i < count($items) && ($this->ViewMode == "Print" ||  !($i > 1 && $items[$i]->GroupType == 'Page' && $items[$i]->Mode == 1)));
            $Tpl->block_path = $ParentPath;
            $Tpl->parse($ReportBlock);
            $this->DataSource->close();
        }

    }
//End Show Method

} //End NewBorn35 Class @511-FCB6E20C

class clsNewBorn35DataSource extends clsDBregistry_db {  //NewBorn35DataSource Class @511-97DCCFCF

//DataSource Variables @511-F5055419
    public $Parent = "";
    public $CCSEvents = "";
    public $CCSEventResult;
    public $ErrorBlock;
    public $CmdExecution;

    public $wp;


    // Datasource fields
    public $GroupSex2;
    public $CountGroupSex;
//End DataSource Variables

//DataSourceClass_Initialize Event @511-DD73B4C1
    function clsNewBorn35DataSource(& $Parent)
    {
        $this->Parent = & $Parent;
        $this->ErrorBlock = "Report NewBorn35";
        $this->Initialize();
        $this->GroupSex2 = new clsField("GroupSex2", ccsInteger, "");
        
        $this->CountGroupSex = new clsField("CountGroupSex", ccsText, "");
        

    }
//End DataSourceClass_Initialize Event

//SetOrder Method @511-9E1383D1
    function SetOrder($SorterName, $SorterDirection)
    {
        $this->Order = "";
        $this->Order = CCGetOrder($this->Order, $SorterName, $SorterDirection, 
            "");
    }
//End SetOrder Method

//Prepare Method @511-8B9167FA
    function Prepare()
    {
        global $CCSLocales;
        global $DefaultDateFormat;
        $this->wp = new clsSQLParameters($this->ErrorBlock);
        $this->wp->AddParameter("2", "urls_BirthDate", ccsDate, array("ShortDate"), array("yyyy", "-", "mm", "-", "dd", " ", "HH", ":", "nn", ":", "ss"), $this->Parameters["urls_BirthDate"], "", false);
        $this->wp->AddParameter("3", "urls_BirthDate1", ccsDate, array("ShortDate"), array("yyyy", "-", "mm", "-", "dd", " ", "HH", ":", "nn", ":", "ss"), $this->Parameters["urls_BirthDate1"], "", false);
        $this->wp->AddParameter("4", "sess_Facilities", ccsInteger, "", "", $this->Parameters["sess_Facilities"], 0, false);
        $this->wp->Criterion[1] = "( newborn.Weight>=3500 )";
        $this->wp->Criterion[2] = $this->wp->Operation(opGreaterThanOrEqual, "newborn.BirthDate", $this->wp->GetDBValue("2"), $this->ToSQL($this->wp->GetDBValue("2"), ccsDate),false);
        $this->wp->Criterion[3] = $this->wp->Operation(opLessThanOrEqual, "newborn.BirthDate", $this->wp->GetDBValue("3"), $this->ToSQL($this->wp->GetDBValue("3"), ccsDate),false);
        $this->wp->Criterion[4] = $this->wp->Operation(opIn, "facilities.FacilityID", $this->wp->GetDBValue("4"), $this->ToSQL($this->wp->GetDBValue("4"), ccsInteger, true),false);
        $this->wp->Criterion[5] = "( newborn.Died=1 )";
        $this->wp->Criterion[6] = "( newborn.DiedID=1 )";
        $this->Where = $this->wp->opAND(
             false, $this->wp->opAND(
             false, $this->wp->opAND(
             false, $this->wp->opAND(
             false, $this->wp->opAND(
             false, 
             $this->wp->Criterion[1], 
             $this->wp->Criterion[2]), 
             $this->wp->Criterion[3]), 
             $this->wp->Criterion[4]), 
             $this->wp->Criterion[5]), 
             $this->wp->Criterion[6]);
    }
//End Prepare Method

//Open Method @511-CA3C9D7B
    function Open()
    {
        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeBuildSelect", $this->Parent);
        $this->SQL = "SELECT delivery.DeliveryID AS delivery_DeliveryID, FacilityName, Sex, NewBornID, BirthDate, Weight \n\n" .
        "FROM (delivery INNER JOIN facilities ON\n\n" .
        "delivery.FacilityID = facilities.FacilityID) INNER JOIN newborn ON\n\n" .
        "newborn.DeliveryID = delivery.DeliveryID {SQL_Where} {SQL_OrderBy}";
        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeExecuteSelect", $this->Parent);
        $this->query(CCBuildSQL($this->SQL, $this->Where, "newborn.Sex asc" .  ($this->Order ? ", " . $this->Order: "")));
        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "AfterExecuteSelect", $this->Parent);
    }
//End Open Method

//SetValues Method @511-F73A025D
    function SetValues()
    {
        $this->GroupSex2->SetDBValue(trim($this->f("Sex")));
        $this->CountGroupSex->SetDBValue($this->f("Sex"));
    }
//End SetValues Method

} //End NewBorn35DataSource Class @511-FCB6E20C

//NewBorn36 ReportGroup class @542-209B0195
class clsReportGroupNewBorn36 {
    public $GroupType;
    public $mode; //1 - open, 2 - close
    public $Report_TotalRecords, $_Report_TotalRecordsAttributes;
    public $GroupSex, $_GroupSexAttributes;
    public $CountGroupSex, $_CountGroupSexAttributes;
    public $Attributes;
    public $ReportTotalIndex = 0;
    public $PageTotalIndex;
    public $PageNumber;
    public $RowNumber;
    public $Parent;
    public $SexTotalIndex;

    function clsReportGroupNewBorn36(& $parent) {
        $this->Parent = & $parent;
        $this->Attributes = $this->Parent->Attributes->GetAsArray();
    }
    function SetControls($PrevGroup = "") {
        $this->GroupSex = $this->Parent->GroupSex->Value;
    }

    function SetTotalControls($mode = "", $PrevGroup = "") {
        $this->Report_TotalRecords = $this->Parent->Report_TotalRecords->GetTotalValue($mode);
        $this->CountGroupSex = $this->Parent->CountGroupSex->GetTotalValue($mode);
        $this->_Report_TotalRecordsAttributes = $this->Parent->Report_TotalRecords->Attributes->GetAsArray();
        $this->_GroupSexAttributes = $this->Parent->GroupSex->Attributes->GetAsArray();
        $this->_CountGroupSexAttributes = $this->Parent->CountGroupSex->Attributes->GetAsArray();
    }
    function SyncWithHeader(& $Header) {
        $Header->Report_TotalRecords = $this->Report_TotalRecords;
        $Header->_Report_TotalRecordsAttributes = $this->_Report_TotalRecordsAttributes;
        $Header->CountGroupSex = $this->CountGroupSex;
        $Header->_CountGroupSexAttributes = $this->_CountGroupSexAttributes;
        $this->GroupSex = $Header->GroupSex;
        $Header->_GroupSexAttributes = $this->_GroupSexAttributes;
        $this->Parent->GroupSex->Value = $Header->GroupSex;
        $this->Parent->GroupSex->Attributes->RestoreFromArray($Header->_GroupSexAttributes);
    }
    function ChangeTotalControls() {
        $this->Report_TotalRecords = $this->Parent->Report_TotalRecords->GetValue();
        $this->CountGroupSex = $this->Parent->CountGroupSex->GetValue();
    }
}
//End NewBorn36 ReportGroup class

//NewBorn36 GroupsCollection class @542-B29CB96F
class clsGroupsCollectionNewBorn36 {
    public $Groups;
    public $mPageCurrentHeaderIndex;
    public $mSexCurrentHeaderIndex;
    public $PageSize;
    public $TotalPages = 0;
    public $TotalRows = 0;
    public $CurrentPageSize = 0;
    public $Pages;
    public $Parent;
    public $LastDetailIndex;

    function clsGroupsCollectionNewBorn36(& $parent) {
        $this->Parent = & $parent;
        $this->Groups = array();
        $this->Pages  = array();
        $this->mSexCurrentHeaderIndex = 1;
        $this->mReportTotalIndex = 0;
        $this->mPageTotalIndex = 1;
    }

    function & InitGroup() {
        $group = new clsReportGroupNewBorn36($this->Parent);
        $group->RowNumber = $this->TotalRows + 1;
        $group->PageNumber = $this->TotalPages;
        $group->PageTotalIndex = $this->mPageCurrentHeaderIndex;
        $group->SexTotalIndex = $this->mSexCurrentHeaderIndex;
        return $group;
    }

    function RestoreValues() {
        $this->Parent->Report_TotalRecords->Value = $this->Parent->Report_TotalRecords->initialValue;
        $this->Parent->GroupSex->Value = $this->Parent->GroupSex->initialValue;
        $this->Parent->CountGroupSex->Value = $this->Parent->CountGroupSex->initialValue;
    }

    function OpenPage() {
        $this->TotalPages++;
        $Group = & $this->InitGroup();
        $this->Parent->Page_Header->CCSEventResult = CCGetEvent($this->Parent->Page_Header->CCSEvents, "OnInitialize", $this->Parent->Page_Header);
        if ($this->Parent->Page_Header->Visible)
            $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Page_Header->Height;
        $Group->SetTotalControls("GetNextValue");
        $this->Parent->Page_Header->CCSEventResult = CCGetEvent($this->Parent->Page_Header->CCSEvents, "OnCalculate", $this->Parent->Page_Header);
        $Group->SetControls();
        $Group->Mode = 1;
        $Group->GroupType = "Page";
        $Group->PageTotalIndex = count($this->Groups);
        $this->mPageCurrentHeaderIndex = count($this->Groups);
        $this->Groups[] =  & $Group;
        $this->Pages[] =  count($this->Groups) == 2 ? 0 : count($this->Groups) - 1;
    }

    function OpenGroup($groupName) {
        $Group = "";
        $OpenFlag = false;
        if ($groupName == "Report") {
            $Group = & $this->InitGroup(true);
            $this->Parent->Report_Header->CCSEventResult = CCGetEvent($this->Parent->Report_Header->CCSEvents, "OnInitialize", $this->Parent->Report_Header);
            if ($this->Parent->Report_Header->Visible) 
                $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Report_Header->Height;
                $Group->SetTotalControls("GetNextValue");
            $this->Parent->Report_Header->CCSEventResult = CCGetEvent($this->Parent->Report_Header->CCSEvents, "OnCalculate", $this->Parent->Report_Header);
            $Group->SetControls();
            $Group->Mode = 1;
            $Group->GroupType = "Report";
            $this->Groups[] = & $Group;
            $this->OpenPage();
        }
        if ($groupName == "Sex") {
            $GroupSex = & $this->InitGroup(true);
            $this->Parent->Sex_Header->CCSEventResult = CCGetEvent($this->Parent->Sex_Header->CCSEvents, "OnInitialize", $this->Parent->Sex_Header);
            if ($this->Parent->Page_Footer->Visible) 
                $OverSize = $this->Parent->Sex_Header->Height + $this->Parent->Page_Footer->Height;
            else
                $OverSize = $this->Parent->Sex_Header->Height;
            if (($this->PageSize > 0) and $this->Parent->Sex_Header->Visible and ($this->CurrentPageSize + $OverSize > $this->PageSize)) {
                $this->ClosePage();
                $this->OpenPage();
            }
            if ($this->Parent->Sex_Header->Visible)
                $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Sex_Header->Height;
                $GroupSex->SetTotalControls("GetNextValue");
            $this->Parent->Sex_Header->CCSEventResult = CCGetEvent($this->Parent->Sex_Header->CCSEvents, "OnCalculate", $this->Parent->Sex_Header);
            $GroupSex->SetControls();
            $GroupSex->Mode = 1;
            $GroupSex->GroupType = "Sex";
            $this->mSexCurrentHeaderIndex = count($this->Groups);
            $this->Groups[] = & $GroupSex;
            $this->Parent->CountGroupSex->Reset();
        }
    }

    function ClosePage() {
        $Group = & $this->InitGroup();
        $this->Parent->Page_Footer->CCSEventResult = CCGetEvent($this->Parent->Page_Footer->CCSEvents, "OnInitialize", $this->Parent->Page_Footer);
        $Group->SetTotalControls("GetPrevValue");
        $Group->SyncWithHeader($this->Groups[$this->mPageCurrentHeaderIndex]);
        $this->Parent->Page_Footer->CCSEventResult = CCGetEvent($this->Parent->Page_Footer->CCSEvents, "OnCalculate", $this->Parent->Page_Footer);
        $Group->SetControls();
        $this->RestoreValues();
        $this->CurrentPageSize = 0;
        $Group->Mode = 2;
        $Group->GroupType = "Page";
        $this->Groups[] = & $Group;
    }

    function CloseGroup($groupName)
    {
        $Group = "";
        if ($groupName == "Report") {
            $Group = & $this->InitGroup(true);
            $this->Parent->Report_Footer->CCSEventResult = CCGetEvent($this->Parent->Report_Footer->CCSEvents, "OnInitialize", $this->Parent->Report_Footer);
            if ($this->Parent->Page_Footer->Visible) 
                $OverSize = $this->Parent->Report_Footer->Height + $this->Parent->Page_Footer->Height;
            else
                $OverSize = $this->Parent->Report_Footer->Height;
            if (($this->PageSize > 0) and $this->Parent->Report_Footer->Visible and ($this->CurrentPageSize + $OverSize > $this->PageSize)) {
                $this->ClosePage();
                $this->OpenPage();
            }
            $Group->SetTotalControls("GetPrevValue");
            $Group->SyncWithHeader($this->Groups[0]);
            if ($this->Parent->Report_Footer->Visible)
                $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Report_Footer->Height;
            $this->Parent->Report_Footer->CCSEventResult = CCGetEvent($this->Parent->Report_Footer->CCSEvents, "OnCalculate", $this->Parent->Report_Footer);
            $Group->SetControls();
            $this->RestoreValues();
            $Group->Mode = 2;
            $Group->GroupType = "Report";
            $this->Groups[] = & $Group;
            $this->ClosePage();
            return;
        }
        $GroupSex = & $this->InitGroup(true);
        $this->Parent->Sex_Footer->CCSEventResult = CCGetEvent($this->Parent->Sex_Footer->CCSEvents, "OnInitialize", $this->Parent->Sex_Footer);
        if ($this->Parent->Page_Footer->Visible) 
            $OverSize = $this->Parent->Sex_Footer->Height + $this->Parent->Page_Footer->Height;
        else
            $OverSize = $this->Parent->Sex_Footer->Height;
        if (($this->PageSize > 0) and $this->Parent->Sex_Footer->Visible and ($this->CurrentPageSize + $OverSize > $this->PageSize)) {
            $this->ClosePage();
            $this->OpenPage();
        }
        $GroupSex->SetTotalControls("GetPrevValue");
        $GroupSex->SyncWithHeader($this->Groups[$this->mSexCurrentHeaderIndex]);
        if ($this->Parent->Sex_Footer->Visible)
            $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Sex_Footer->Height;
        $this->Parent->Sex_Footer->CCSEventResult = CCGetEvent($this->Parent->Sex_Footer->CCSEvents, "OnCalculate", $this->Parent->Sex_Footer);
        $GroupSex->SetControls();
        $this->Parent->CountGroupSex->Reset();
        $this->RestoreValues();
        $GroupSex->Mode = 2;
        $GroupSex->GroupType ="Sex";
        $this->Groups[] = & $GroupSex;
    }

    function AddItem()
    {
        $Group = & $this->InitGroup(true);
        $this->Parent->Detail->CCSEventResult = CCGetEvent($this->Parent->Detail->CCSEvents, "OnInitialize", $this->Parent->Detail);
        if ($this->Parent->Page_Footer->Visible) 
            $OverSize = $this->Parent->Detail->Height + $this->Parent->Page_Footer->Height;
        else
            $OverSize = $this->Parent->Detail->Height;
        if (($this->PageSize > 0) and $this->Parent->Detail->Visible and ($this->CurrentPageSize + $OverSize > $this->PageSize)) {
            $this->ClosePage();
            $this->OpenPage();
        }
        $this->TotalRows++;
        if ($this->LastDetailIndex)
            $PrevGroup = & $this->Groups[$this->LastDetailIndex];
        else
            $PrevGroup = "";
        $Group->SetTotalControls("", $PrevGroup);
        if ($this->Parent->Detail->Visible)
            $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Detail->Height;
        $this->Parent->Detail->CCSEventResult = CCGetEvent($this->Parent->Detail->CCSEvents, "OnCalculate", $this->Parent->Detail);
        $Group->SetControls($PrevGroup);
        $this->LastDetailIndex = count($this->Groups);
        $this->Groups[] = & $Group;
    }
}
//End NewBorn36 GroupsCollection class

class clsReportNewBorn36 { //NewBorn36 Class @542-1797E490

//NewBorn36 Variables @542-80D63D80

    public $ComponentType = "Report";
    public $PageSize;
    public $ComponentName;
    public $Visible;
    public $Errors;
    public $CCSEvents = array();
    public $CCSEventResult;
    public $RelativePath = "";
    public $ViewMode = "Web";
    public $TemplateBlock;
    public $PageNumber;
    public $RowNumber;
    public $TotalRows;
    public $TotalPages;
    public $ControlsVisible = array();
    public $IsEmpty;
    public $Attributes;
    public $DetailBlock, $Detail;
    public $Report_FooterBlock, $Report_Footer;
    public $Report_HeaderBlock, $Report_Header;
    public $Page_FooterBlock, $Page_Footer;
    public $Page_HeaderBlock, $Page_Header;
    public $Sex_HeaderBlock, $Sex_Header;
    public $Sex_FooterBlock, $Sex_Footer;
    public $SorterName, $SorterDirection;

    public $ds;
    public $DataSource;
    public $UseClientPaging = false;

    //Report Controls
    public $StaticControls, $RowControls, $Report_FooterControls, $Report_HeaderControls;
    public $Page_FooterControls, $Page_HeaderControls;
    public $Sex_HeaderControls, $Sex_FooterControls;
//End NewBorn36 Variables

//Class_Initialize Event @542-E6E325A1
    function clsReportNewBorn36($RelativePath = "", & $Parent)
    {
        global $FileName;
        global $CCSLocales;
        global $DefaultDateFormat;
        $this->ComponentName = "NewBorn36";
        $this->Visible = True;
        $this->Parent = & $Parent;
        $this->RelativePath = $RelativePath;
        $this->Attributes = new clsAttributes($this->ComponentName . ":");
        $this->Detail = new clsSection($this);
        $MinPageSize = 0;
        $MaxSectionSize = 0;
        $this->Detail->Height = 1;
        $MaxSectionSize = max($MaxSectionSize, $this->Detail->Height);
        $this->Report_Footer = new clsSection($this);
        $this->Report_Header = new clsSection($this);
        $this->Page_Footer = new clsSection($this);
        $this->Page_Footer->Height = 1;
        $MinPageSize += $this->Page_Footer->Height;
        $this->Page_Header = new clsSection($this);
        $this->Page_Header->Height = 1;
        $MinPageSize += $this->Page_Header->Height;
        $this->Sex_Footer = new clsSection($this);
        $this->Sex_Footer->Height = 1;
        $MaxSectionSize = max($MaxSectionSize, $this->Sex_Footer->Height);
        $this->Sex_Header = new clsSection($this);
        $this->Sex_Header->Height = 1;
        $MaxSectionSize = max($MaxSectionSize, $this->Sex_Header->Height);
        $this->Errors = new clsErrors();
        $this->DataSource = new clsNewBorn36DataSource($this);
        $this->ds = & $this->DataSource;
        $PageSize = CCGetParam($this->ComponentName . "PageSize", "");
        if(is_numeric($PageSize) && $PageSize > 0) {
            $this->PageSize = $PageSize;
        } else {
            if (!is_numeric($PageSize) || $PageSize < 0)
                $this->PageSize = 0;
             else if ($PageSize == "0")
                $this->PageSize = 0;
             else 
                $this->PageSize = $PageSize;
        }
        $MinPageSize += $MaxSectionSize;
        if ($this->PageSize && $MinPageSize && $this->PageSize < $MinPageSize)
            $this->PageSize = $MinPageSize;
        $this->PageNumber = $this->ViewMode == "Print" ? 1 : intval(CCGetParam($this->ComponentName . "Page", 1));
        if ($this->PageNumber <= 0 ) {
            $this->PageNumber = 1;
        }
        $this->Visible = (CCSecurityAccessCheck("1;2") == "success");

        $this->Report_TotalRecords = new clsControl(ccsReportLabel, "Report_TotalRecords", "Report_TotalRecords", ccsText, "", 0, $this);
        $this->Report_TotalRecords->TotalFunction = "Count";
        $this->Report_TotalRecords->IsEmptySource = true;
        $this->NoRecords = new clsPanel("NoRecords", $this);
        $this->GroupSex = new clsControl(ccsReportLabel, "GroupSex", "GroupSex", ccsInteger, "", "", $this);
        $this->CountGroupSex = new clsControl(ccsReportLabel, "CountGroupSex", "CountGroupSex", ccsText, "", 0, $this);
        $this->CountGroupSex->TotalFunction = "Count";
    }
//End Class_Initialize Event

//Initialize Method @542-6C59EE65
    function Initialize()
    {
        if(!$this->Visible) return;

        $this->DataSource->PageSize = $this->PageSize;
        $this->DataSource->AbsolutePage = $this->PageNumber;
        $this->DataSource->SetOrder($this->SorterName, $this->SorterDirection);
    }
//End Initialize Method

//CheckErrors Method @542-9B8077A3
    function CheckErrors()
    {
        $errors = false;
        $errors = ($errors || $this->Report_TotalRecords->Errors->Count());
        $errors = ($errors || $this->GroupSex->Errors->Count());
        $errors = ($errors || $this->CountGroupSex->Errors->Count());
        $errors = ($errors || $this->Errors->Count());
        $errors = ($errors || $this->DataSource->Errors->Count());
        return $errors;
    }
//End CheckErrors Method

//GetErrors Method @542-4C3BD975
    function GetErrors()
    {
        $errors = "";
        $errors = ComposeStrings($errors, $this->Report_TotalRecords->Errors->ToString());
        $errors = ComposeStrings($errors, $this->GroupSex->Errors->ToString());
        $errors = ComposeStrings($errors, $this->CountGroupSex->Errors->ToString());
        $errors = ComposeStrings($errors, $this->Errors->ToString());
        $errors = ComposeStrings($errors, $this->DataSource->Errors->ToString());
        return $errors;
    }
//End GetErrors Method

//Show Method @542-261A8B35
    function Show()
    {
        global $Tpl;
        global $CCSLocales;
        if(!$this->Visible) return;

        $ShownRecords = 0;

        $this->DataSource->Parameters["urls_BirthDate"] = CCGetFromGet("s_BirthDate", NULL);
        $this->DataSource->Parameters["urls_BirthDate1"] = CCGetFromGet("s_BirthDate1", NULL);
        $this->DataSource->Parameters["urls_FacilityName"] = CCGetFromGet("s_FacilityName", NULL);

        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeSelect", $this);


        $this->DataSource->Prepare();
        $this->DataSource->Open();

        $SexKey = "";
        $Groups = new clsGroupsCollectionNewBorn36($this);
        $Groups->PageSize = $this->PageSize > 0 ? $this->PageSize : 0;

        $is_next_record = $this->DataSource->next_record();
        $this->IsEmpty = ! $is_next_record;
        while($is_next_record) {
            $this->DataSource->SetValues();
            $this->GroupSex->SetValue($this->DataSource->GroupSex->GetValue());
            $this->CountGroupSex->SetValue($this->DataSource->CountGroupSex->GetValue());
            $this->Report_TotalRecords->SetValue(1);
            if (count($Groups->Groups) == 0) $Groups->OpenGroup("Report");
            if (count($Groups->Groups) == 2 or $SexKey != $this->DataSource->f("Sex")) {
                $Groups->OpenGroup("Sex");
            }
            $Groups->AddItem();
            $SexKey = $this->DataSource->f("Sex");
            $is_next_record = $this->DataSource->next_record();
            if (!$is_next_record || $SexKey != $this->DataSource->f("Sex")) {
                $Groups->CloseGroup("Sex");
            }
        }
        if (!count($Groups->Groups)) 
            $Groups->OpenGroup("Report");
        else
            $this->NoRecords->Visible = false;
        $Groups->CloseGroup("Report");
        $this->TotalPages = $Groups->TotalPages;
        $this->TotalRows = $Groups->TotalRows;

        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeShow", $this);
        if(!$this->Visible) return;

        $this->Attributes->Show();
        $ReportBlock = "Report " . $this->ComponentName;
        $ParentPath = $Tpl->block_path;
        $Tpl->block_path = $ParentPath . "/" . $ReportBlock;

        if($this->CheckErrors()) {
            $Tpl->replaceblock("", $this->GetErrors());
            $Tpl->block_path = $ParentPath;
            return;
        } else {
            $items = & $Groups->Groups;
            $i = $Groups->Pages[min($this->PageNumber, $Groups->TotalPages) - 1];
            $this->ControlsVisible["GroupSex"] = $this->GroupSex->Visible;
            $this->ControlsVisible["CountGroupSex"] = $this->CountGroupSex->Visible;
            do {
                $this->Attributes->RestoreFromArray($items[$i]->Attributes);
                $this->RowNumber = $items[$i]->RowNumber;
                switch ($items[$i]->GroupType) {
                    Case "":
                        $this->Detail->CCSEventResult = CCGetEvent($this->Detail->CCSEvents, "BeforeShow", $this->Detail);
                        if ($this->Detail->Visible) {
                            $this->Attributes->Show();
                            $Tpl->parseto("Section Detail", true, "Section Detail");
                        }
                        break;
                    case "Report":
                        if ($items[$i]->Mode == 1) {
                            $this->Report_TotalRecords->SetValue($items[$i]->Report_TotalRecords);
                            $this->Report_TotalRecords->Attributes->RestoreFromArray($items[$i]->_Report_TotalRecordsAttributes);
                            $this->Report_Header->CCSEventResult = CCGetEvent($this->Report_Header->CCSEvents, "BeforeShow", $this->Report_Header);
                            if ($this->Report_Header->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Report_Header";
                                $this->Attributes->Show();
                                $this->Report_TotalRecords->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Report_Header", true, "Section Detail");
                            }
                        }
                        if ($items[$i]->Mode == 2) {
                            $this->Report_Footer->CCSEventResult = CCGetEvent($this->Report_Footer->CCSEvents, "BeforeShow", $this->Report_Footer);
                            if ($this->Report_Footer->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Report_Footer";
                                $this->NoRecords->Show();
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Report_Footer", true, "Section Detail");
                            }
                        }
                        break;
                    case "Page":
                        if ($items[$i]->Mode == 1) {
                            $this->Page_Header->CCSEventResult = CCGetEvent($this->Page_Header->CCSEvents, "BeforeShow", $this->Page_Header);
                            if ($this->Page_Header->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Page_Header";
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Page_Header", true, "Section Detail");
                            }
                        }
                        if ($items[$i]->Mode == 2 && !$this->UseClientPaging || $items[$i]->Mode == 1 && $this->UseClientPaging) {
                            $this->Page_Footer->CCSEventResult = CCGetEvent($this->Page_Footer->CCSEvents, "BeforeShow", $this->Page_Footer);
                            if ($this->Page_Footer->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Page_Footer";
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Page_Footer", true, "Section Detail");
                            }
                        }
                        break;
                    case "Sex":
                        if ($items[$i]->Mode == 1) {
                            $this->GroupSex->SetValue($items[$i]->GroupSex);
                            $this->GroupSex->Attributes->RestoreFromArray($items[$i]->_GroupSexAttributes);
                            $this->CountGroupSex->SetValue($items[$i]->CountGroupSex);
                            $this->CountGroupSex->Attributes->RestoreFromArray($items[$i]->_CountGroupSexAttributes);
                            $this->Sex_Header->CCSEventResult = CCGetEvent($this->Sex_Header->CCSEvents, "BeforeShow", $this->Sex_Header);
                            if ($this->Sex_Header->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Sex_Header";
                                $this->Attributes->Show();
                                $this->GroupSex->Show();
                                $this->CountGroupSex->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Sex_Header", true, "Section Detail");
                            }
                        }
                        if ($items[$i]->Mode == 2) {
                            $this->Sex_Footer->CCSEventResult = CCGetEvent($this->Sex_Footer->CCSEvents, "BeforeShow", $this->Sex_Footer);
                            if ($this->Sex_Footer->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Sex_Footer";
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Sex_Footer", true, "Section Detail");
                            }
                        }
                        break;
                }
                $i++;
            } while ($i < count($items) && ($this->ViewMode == "Print" ||  !($i > 1 && $items[$i]->GroupType == 'Page' && $items[$i]->Mode == 1)));
            $Tpl->block_path = $ParentPath;
            $Tpl->parse($ReportBlock);
            $this->DataSource->close();
        }

    }
//End Show Method

} //End NewBorn36 Class @542-FCB6E20C

class clsNewBorn36DataSource extends clsDBregistry_db {  //NewBorn36DataSource Class @542-1C0FF1D6

//DataSource Variables @542-94ED7D63
    public $Parent = "";
    public $CCSEvents = "";
    public $CCSEventResult;
    public $ErrorBlock;
    public $CmdExecution;

    public $wp;


    // Datasource fields
    public $GroupSex;
    public $CountGroupSex;
//End DataSource Variables

//DataSourceClass_Initialize Event @542-D57E0DC4
    function clsNewBorn36DataSource(& $Parent)
    {
        $this->Parent = & $Parent;
        $this->ErrorBlock = "Report NewBorn36";
        $this->Initialize();
        $this->GroupSex = new clsField("GroupSex", ccsInteger, "");
        
        $this->CountGroupSex = new clsField("CountGroupSex", ccsText, "");
        

    }
//End DataSourceClass_Initialize Event

//SetOrder Method @542-9E1383D1
    function SetOrder($SorterName, $SorterDirection)
    {
        $this->Order = "";
        $this->Order = CCGetOrder($this->Order, $SorterName, $SorterDirection, 
            "");
    }
//End SetOrder Method

//Prepare Method @542-F34F4113
    function Prepare()
    {
        global $CCSLocales;
        global $DefaultDateFormat;
        $this->wp = new clsSQLParameters($this->ErrorBlock);
        $this->wp->AddParameter("1", "urls_BirthDate", ccsDate, array("ShortDate"), array("yyyy", "-", "mm", "-", "dd", " ", "HH", ":", "nn", ":", "ss"), $this->Parameters["urls_BirthDate"], "", false);
        $this->wp->AddParameter("2", "urls_BirthDate1", ccsDate, array("ShortDate"), array("yyyy", "-", "mm", "-", "dd", " ", "HH", ":", "nn", ":", "ss"), $this->Parameters["urls_BirthDate1"], "", false);
        $this->wp->AddParameter("5", "urls_FacilityName", ccsText, "", "", $this->Parameters["urls_FacilityName"], "", false);
        $this->wp->Criterion[1] = $this->wp->Operation(opGreaterThanOrEqual, "newborn.BirthDate", $this->wp->GetDBValue("1"), $this->ToSQL($this->wp->GetDBValue("1"), ccsDate),false);
        $this->wp->Criterion[2] = $this->wp->Operation(opLessThanOrEqual, "newborn.BirthDate", $this->wp->GetDBValue("2"), $this->ToSQL($this->wp->GetDBValue("2"), ccsDate),false);
        $this->wp->Criterion[3] = "( newborn.Died=1 )";
        $this->wp->Criterion[4] = "( newborn.DiedID=1 )";
        $this->wp->Criterion[5] = $this->wp->Operation(opEqual, "facilities.FacilityName", $this->wp->GetDBValue("5"), $this->ToSQL($this->wp->GetDBValue("5"), ccsText),false);
        $this->Where = $this->wp->opAND(
             false, $this->wp->opAND(
             false, $this->wp->opAND(
             false, $this->wp->opAND(
             false, 
             $this->wp->Criterion[1], 
             $this->wp->Criterion[2]), 
             $this->wp->Criterion[3]), 
             $this->wp->Criterion[4]), 
             $this->wp->Criterion[5]);
    }
//End Prepare Method

//Open Method @542-E3BDF83B
    function Open()
    {
        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeBuildSelect", $this->Parent);
        $this->SQL = "SELECT delivery.DeliveryID AS delivery_DeliveryID, FacilityName, Sex, NewBornID, BirthDate, Weight \n\n" .
        "FROM (delivery INNER JOIN newborn ON\n\n" .
        "newborn.DeliveryID = delivery.DeliveryID) INNER JOIN facilities ON\n\n" .
        "delivery.FacilityID = facilities.FacilityID {SQL_Where} {SQL_OrderBy}";
        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeExecuteSelect", $this->Parent);
        $this->query(CCBuildSQL($this->SQL, $this->Where, "newborn.Sex asc" .  ($this->Order ? ", " . $this->Order: "")));
        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "AfterExecuteSelect", $this->Parent);
    }
//End Open Method

//SetValues Method @542-5BFFA3DB
    function SetValues()
    {
        $this->GroupSex->SetDBValue(trim($this->f("Sex")));
        $this->CountGroupSex->SetDBValue($this->f("Sex"));
    }
//End SetValues Method

} //End NewBorn36DataSource Class @542-FCB6E20C

//NewBorn37 ReportGroup class @602-FA8DB05F
class clsReportGroupNewBorn37 {
    public $GroupType;
    public $mode; //1 - open, 2 - close
    public $Report_TotalRecords, $_Report_TotalRecordsAttributes;
    public $GroupSex1, $_GroupSex1Attributes;
    public $CountGroupSex, $_CountGroupSexAttributes;
    public $Attributes;
    public $ReportTotalIndex = 0;
    public $PageTotalIndex;
    public $PageNumber;
    public $RowNumber;
    public $Parent;
    public $SexTotalIndex;

    function clsReportGroupNewBorn37(& $parent) {
        $this->Parent = & $parent;
        $this->Attributes = $this->Parent->Attributes->GetAsArray();
    }
    function SetControls($PrevGroup = "") {
        $this->GroupSex1 = $this->Parent->GroupSex1->Value;
    }

    function SetTotalControls($mode = "", $PrevGroup = "") {
        $this->Report_TotalRecords = $this->Parent->Report_TotalRecords->GetTotalValue($mode);
        $this->CountGroupSex = $this->Parent->CountGroupSex->GetTotalValue($mode);
        $this->_Report_TotalRecordsAttributes = $this->Parent->Report_TotalRecords->Attributes->GetAsArray();
        $this->_GroupSex1Attributes = $this->Parent->GroupSex1->Attributes->GetAsArray();
        $this->_CountGroupSexAttributes = $this->Parent->CountGroupSex->Attributes->GetAsArray();
    }
    function SyncWithHeader(& $Header) {
        $Header->Report_TotalRecords = $this->Report_TotalRecords;
        $Header->_Report_TotalRecordsAttributes = $this->_Report_TotalRecordsAttributes;
        $Header->CountGroupSex = $this->CountGroupSex;
        $Header->_CountGroupSexAttributes = $this->_CountGroupSexAttributes;
        $this->GroupSex1 = $Header->GroupSex1;
        $Header->_GroupSex1Attributes = $this->_GroupSex1Attributes;
        $this->Parent->GroupSex1->Value = $Header->GroupSex1;
        $this->Parent->GroupSex1->Attributes->RestoreFromArray($Header->_GroupSex1Attributes);
    }
    function ChangeTotalControls() {
        $this->Report_TotalRecords = $this->Parent->Report_TotalRecords->GetValue();
        $this->CountGroupSex = $this->Parent->CountGroupSex->GetValue();
    }
}
//End NewBorn37 ReportGroup class

//NewBorn37 GroupsCollection class @602-0586C3B5
class clsGroupsCollectionNewBorn37 {
    public $Groups;
    public $mPageCurrentHeaderIndex;
    public $mSexCurrentHeaderIndex;
    public $PageSize;
    public $TotalPages = 0;
    public $TotalRows = 0;
    public $CurrentPageSize = 0;
    public $Pages;
    public $Parent;
    public $LastDetailIndex;

    function clsGroupsCollectionNewBorn37(& $parent) {
        $this->Parent = & $parent;
        $this->Groups = array();
        $this->Pages  = array();
        $this->mSexCurrentHeaderIndex = 1;
        $this->mReportTotalIndex = 0;
        $this->mPageTotalIndex = 1;
    }

    function & InitGroup() {
        $group = new clsReportGroupNewBorn37($this->Parent);
        $group->RowNumber = $this->TotalRows + 1;
        $group->PageNumber = $this->TotalPages;
        $group->PageTotalIndex = $this->mPageCurrentHeaderIndex;
        $group->SexTotalIndex = $this->mSexCurrentHeaderIndex;
        return $group;
    }

    function RestoreValues() {
        $this->Parent->Report_TotalRecords->Value = $this->Parent->Report_TotalRecords->initialValue;
        $this->Parent->GroupSex1->Value = $this->Parent->GroupSex1->initialValue;
        $this->Parent->CountGroupSex->Value = $this->Parent->CountGroupSex->initialValue;
    }

    function OpenPage() {
        $this->TotalPages++;
        $Group = & $this->InitGroup();
        $this->Parent->Page_Header->CCSEventResult = CCGetEvent($this->Parent->Page_Header->CCSEvents, "OnInitialize", $this->Parent->Page_Header);
        if ($this->Parent->Page_Header->Visible)
            $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Page_Header->Height;
        $Group->SetTotalControls("GetNextValue");
        $this->Parent->Page_Header->CCSEventResult = CCGetEvent($this->Parent->Page_Header->CCSEvents, "OnCalculate", $this->Parent->Page_Header);
        $Group->SetControls();
        $Group->Mode = 1;
        $Group->GroupType = "Page";
        $Group->PageTotalIndex = count($this->Groups);
        $this->mPageCurrentHeaderIndex = count($this->Groups);
        $this->Groups[] =  & $Group;
        $this->Pages[] =  count($this->Groups) == 2 ? 0 : count($this->Groups) - 1;
    }

    function OpenGroup($groupName) {
        $Group = "";
        $OpenFlag = false;
        if ($groupName == "Report") {
            $Group = & $this->InitGroup(true);
            $this->Parent->Report_Header->CCSEventResult = CCGetEvent($this->Parent->Report_Header->CCSEvents, "OnInitialize", $this->Parent->Report_Header);
            if ($this->Parent->Report_Header->Visible) 
                $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Report_Header->Height;
                $Group->SetTotalControls("GetNextValue");
            $this->Parent->Report_Header->CCSEventResult = CCGetEvent($this->Parent->Report_Header->CCSEvents, "OnCalculate", $this->Parent->Report_Header);
            $Group->SetControls();
            $Group->Mode = 1;
            $Group->GroupType = "Report";
            $this->Groups[] = & $Group;
            $this->OpenPage();
        }
        if ($groupName == "Sex") {
            $GroupSex = & $this->InitGroup(true);
            $this->Parent->Sex_Header->CCSEventResult = CCGetEvent($this->Parent->Sex_Header->CCSEvents, "OnInitialize", $this->Parent->Sex_Header);
            if ($this->Parent->Page_Footer->Visible) 
                $OverSize = $this->Parent->Sex_Header->Height + $this->Parent->Page_Footer->Height;
            else
                $OverSize = $this->Parent->Sex_Header->Height;
            if (($this->PageSize > 0) and $this->Parent->Sex_Header->Visible and ($this->CurrentPageSize + $OverSize > $this->PageSize)) {
                $this->ClosePage();
                $this->OpenPage();
            }
            if ($this->Parent->Sex_Header->Visible)
                $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Sex_Header->Height;
                $GroupSex->SetTotalControls("GetNextValue");
            $this->Parent->Sex_Header->CCSEventResult = CCGetEvent($this->Parent->Sex_Header->CCSEvents, "OnCalculate", $this->Parent->Sex_Header);
            $GroupSex->SetControls();
            $GroupSex->Mode = 1;
            $GroupSex->GroupType = "Sex";
            $this->mSexCurrentHeaderIndex = count($this->Groups);
            $this->Groups[] = & $GroupSex;
            $this->Parent->CountGroupSex->Reset();
        }
    }

    function ClosePage() {
        $Group = & $this->InitGroup();
        $this->Parent->Page_Footer->CCSEventResult = CCGetEvent($this->Parent->Page_Footer->CCSEvents, "OnInitialize", $this->Parent->Page_Footer);
        $Group->SetTotalControls("GetPrevValue");
        $Group->SyncWithHeader($this->Groups[$this->mPageCurrentHeaderIndex]);
        $this->Parent->Page_Footer->CCSEventResult = CCGetEvent($this->Parent->Page_Footer->CCSEvents, "OnCalculate", $this->Parent->Page_Footer);
        $Group->SetControls();
        $this->RestoreValues();
        $this->CurrentPageSize = 0;
        $Group->Mode = 2;
        $Group->GroupType = "Page";
        $this->Groups[] = & $Group;
    }

    function CloseGroup($groupName)
    {
        $Group = "";
        if ($groupName == "Report") {
            $Group = & $this->InitGroup(true);
            $this->Parent->Report_Footer->CCSEventResult = CCGetEvent($this->Parent->Report_Footer->CCSEvents, "OnInitialize", $this->Parent->Report_Footer);
            if ($this->Parent->Page_Footer->Visible) 
                $OverSize = $this->Parent->Report_Footer->Height + $this->Parent->Page_Footer->Height;
            else
                $OverSize = $this->Parent->Report_Footer->Height;
            if (($this->PageSize > 0) and $this->Parent->Report_Footer->Visible and ($this->CurrentPageSize + $OverSize > $this->PageSize)) {
                $this->ClosePage();
                $this->OpenPage();
            }
            $Group->SetTotalControls("GetPrevValue");
            $Group->SyncWithHeader($this->Groups[0]);
            if ($this->Parent->Report_Footer->Visible)
                $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Report_Footer->Height;
            $this->Parent->Report_Footer->CCSEventResult = CCGetEvent($this->Parent->Report_Footer->CCSEvents, "OnCalculate", $this->Parent->Report_Footer);
            $Group->SetControls();
            $this->RestoreValues();
            $Group->Mode = 2;
            $Group->GroupType = "Report";
            $this->Groups[] = & $Group;
            $this->ClosePage();
            return;
        }
        $GroupSex = & $this->InitGroup(true);
        $this->Parent->Sex_Footer->CCSEventResult = CCGetEvent($this->Parent->Sex_Footer->CCSEvents, "OnInitialize", $this->Parent->Sex_Footer);
        if ($this->Parent->Page_Footer->Visible) 
            $OverSize = $this->Parent->Sex_Footer->Height + $this->Parent->Page_Footer->Height;
        else
            $OverSize = $this->Parent->Sex_Footer->Height;
        if (($this->PageSize > 0) and $this->Parent->Sex_Footer->Visible and ($this->CurrentPageSize + $OverSize > $this->PageSize)) {
            $this->ClosePage();
            $this->OpenPage();
        }
        $GroupSex->SetTotalControls("GetPrevValue");
        $GroupSex->SyncWithHeader($this->Groups[$this->mSexCurrentHeaderIndex]);
        if ($this->Parent->Sex_Footer->Visible)
            $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Sex_Footer->Height;
        $this->Parent->Sex_Footer->CCSEventResult = CCGetEvent($this->Parent->Sex_Footer->CCSEvents, "OnCalculate", $this->Parent->Sex_Footer);
        $GroupSex->SetControls();
        $this->Parent->CountGroupSex->Reset();
        $this->RestoreValues();
        $GroupSex->Mode = 2;
        $GroupSex->GroupType ="Sex";
        $this->Groups[] = & $GroupSex;
    }

    function AddItem()
    {
        $Group = & $this->InitGroup(true);
        $this->Parent->Detail->CCSEventResult = CCGetEvent($this->Parent->Detail->CCSEvents, "OnInitialize", $this->Parent->Detail);
        if ($this->Parent->Page_Footer->Visible) 
            $OverSize = $this->Parent->Detail->Height + $this->Parent->Page_Footer->Height;
        else
            $OverSize = $this->Parent->Detail->Height;
        if (($this->PageSize > 0) and $this->Parent->Detail->Visible and ($this->CurrentPageSize + $OverSize > $this->PageSize)) {
            $this->ClosePage();
            $this->OpenPage();
        }
        $this->TotalRows++;
        if ($this->LastDetailIndex)
            $PrevGroup = & $this->Groups[$this->LastDetailIndex];
        else
            $PrevGroup = "";
        $Group->SetTotalControls("", $PrevGroup);
        if ($this->Parent->Detail->Visible)
            $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Detail->Height;
        $this->Parent->Detail->CCSEventResult = CCGetEvent($this->Parent->Detail->CCSEvents, "OnCalculate", $this->Parent->Detail);
        $Group->SetControls($PrevGroup);
        $this->LastDetailIndex = count($this->Groups);
        $this->Groups[] = & $Group;
    }
}
//End NewBorn37 GroupsCollection class

class clsReportNewBorn37 { //NewBorn37 Class @602-0E8CD5D1

//NewBorn37 Variables @602-80D63D80

    public $ComponentType = "Report";
    public $PageSize;
    public $ComponentName;
    public $Visible;
    public $Errors;
    public $CCSEvents = array();
    public $CCSEventResult;
    public $RelativePath = "";
    public $ViewMode = "Web";
    public $TemplateBlock;
    public $PageNumber;
    public $RowNumber;
    public $TotalRows;
    public $TotalPages;
    public $ControlsVisible = array();
    public $IsEmpty;
    public $Attributes;
    public $DetailBlock, $Detail;
    public $Report_FooterBlock, $Report_Footer;
    public $Report_HeaderBlock, $Report_Header;
    public $Page_FooterBlock, $Page_Footer;
    public $Page_HeaderBlock, $Page_Header;
    public $Sex_HeaderBlock, $Sex_Header;
    public $Sex_FooterBlock, $Sex_Footer;
    public $SorterName, $SorterDirection;

    public $ds;
    public $DataSource;
    public $UseClientPaging = false;

    //Report Controls
    public $StaticControls, $RowControls, $Report_FooterControls, $Report_HeaderControls;
    public $Page_FooterControls, $Page_HeaderControls;
    public $Sex_HeaderControls, $Sex_FooterControls;
//End NewBorn37 Variables

//Class_Initialize Event @602-65856810
    function clsReportNewBorn37($RelativePath = "", & $Parent)
    {
        global $FileName;
        global $CCSLocales;
        global $DefaultDateFormat;
        $this->ComponentName = "NewBorn37";
        $this->Visible = True;
        $this->Parent = & $Parent;
        $this->RelativePath = $RelativePath;
        $this->Attributes = new clsAttributes($this->ComponentName . ":");
        $this->Detail = new clsSection($this);
        $MinPageSize = 0;
        $MaxSectionSize = 0;
        $this->Detail->Height = 1;
        $MaxSectionSize = max($MaxSectionSize, $this->Detail->Height);
        $this->Report_Footer = new clsSection($this);
        $this->Report_Header = new clsSection($this);
        $this->Page_Footer = new clsSection($this);
        $this->Page_Footer->Height = 1;
        $MinPageSize += $this->Page_Footer->Height;
        $this->Page_Header = new clsSection($this);
        $this->Page_Header->Height = 1;
        $MinPageSize += $this->Page_Header->Height;
        $this->Sex_Footer = new clsSection($this);
        $this->Sex_Footer->Height = 1;
        $MaxSectionSize = max($MaxSectionSize, $this->Sex_Footer->Height);
        $this->Sex_Header = new clsSection($this);
        $this->Sex_Header->Height = 1;
        $MaxSectionSize = max($MaxSectionSize, $this->Sex_Header->Height);
        $this->Errors = new clsErrors();
        $this->DataSource = new clsNewBorn37DataSource($this);
        $this->ds = & $this->DataSource;
        $PageSize = CCGetParam($this->ComponentName . "PageSize", "");
        if(is_numeric($PageSize) && $PageSize > 0) {
            $this->PageSize = $PageSize;
        } else {
            if (!is_numeric($PageSize) || $PageSize < 0)
                $this->PageSize = 0;
             else if ($PageSize == "0")
                $this->PageSize = 0;
             else 
                $this->PageSize = $PageSize;
        }
        $MinPageSize += $MaxSectionSize;
        if ($this->PageSize && $MinPageSize && $this->PageSize < $MinPageSize)
            $this->PageSize = $MinPageSize;
        $this->PageNumber = $this->ViewMode == "Print" ? 1 : intval(CCGetParam($this->ComponentName . "Page", 1));
        if ($this->PageNumber <= 0 ) {
            $this->PageNumber = 1;
        }
        $this->Visible = (CCSecurityAccessCheck("1;2") == "success");

        $this->Report_TotalRecords = new clsControl(ccsReportLabel, "Report_TotalRecords", "Report_TotalRecords", ccsText, "", 0, $this);
        $this->Report_TotalRecords->TotalFunction = "Count";
        $this->Report_TotalRecords->IsEmptySource = true;
        $this->NoRecords = new clsPanel("NoRecords", $this);
        $this->GroupSex1 = new clsControl(ccsReportLabel, "GroupSex1", "GroupSex1", ccsInteger, "", "", $this);
        $this->CountGroupSex = new clsControl(ccsReportLabel, "CountGroupSex", "CountGroupSex", ccsText, "", 0, $this);
        $this->CountGroupSex->TotalFunction = "Count";
    }
//End Class_Initialize Event

//Initialize Method @602-6C59EE65
    function Initialize()
    {
        if(!$this->Visible) return;

        $this->DataSource->PageSize = $this->PageSize;
        $this->DataSource->AbsolutePage = $this->PageNumber;
        $this->DataSource->SetOrder($this->SorterName, $this->SorterDirection);
    }
//End Initialize Method

//CheckErrors Method @602-59C7908B
    function CheckErrors()
    {
        $errors = false;
        $errors = ($errors || $this->Report_TotalRecords->Errors->Count());
        $errors = ($errors || $this->GroupSex1->Errors->Count());
        $errors = ($errors || $this->CountGroupSex->Errors->Count());
        $errors = ($errors || $this->Errors->Count());
        $errors = ($errors || $this->DataSource->Errors->Count());
        return $errors;
    }
//End CheckErrors Method

//GetErrors Method @602-2AF875A1
    function GetErrors()
    {
        $errors = "";
        $errors = ComposeStrings($errors, $this->Report_TotalRecords->Errors->ToString());
        $errors = ComposeStrings($errors, $this->GroupSex1->Errors->ToString());
        $errors = ComposeStrings($errors, $this->CountGroupSex->Errors->ToString());
        $errors = ComposeStrings($errors, $this->Errors->ToString());
        $errors = ComposeStrings($errors, $this->DataSource->Errors->ToString());
        return $errors;
    }
//End GetErrors Method

//Show Method @602-6D57A385
    function Show()
    {
        global $Tpl;
        global $CCSLocales;
        if(!$this->Visible) return;

        $ShownRecords = 0;

        $this->DataSource->Parameters["urls_BirthDate"] = CCGetFromGet("s_BirthDate", NULL);
        $this->DataSource->Parameters["urls_BirthDate1"] = CCGetFromGet("s_BirthDate1", NULL);
        $this->DataSource->Parameters["urls_FacilityName"] = CCGetFromGet("s_FacilityName", NULL);

        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeSelect", $this);


        $this->DataSource->Prepare();
        $this->DataSource->Open();

        $SexKey = "";
        $Groups = new clsGroupsCollectionNewBorn37($this);
        $Groups->PageSize = $this->PageSize > 0 ? $this->PageSize : 0;

        $is_next_record = $this->DataSource->next_record();
        $this->IsEmpty = ! $is_next_record;
        while($is_next_record) {
            $this->DataSource->SetValues();
            $this->GroupSex1->SetValue($this->DataSource->GroupSex1->GetValue());
            $this->CountGroupSex->SetValue($this->DataSource->CountGroupSex->GetValue());
            $this->Report_TotalRecords->SetValue(1);
            if (count($Groups->Groups) == 0) $Groups->OpenGroup("Report");
            if (count($Groups->Groups) == 2 or $SexKey != $this->DataSource->f("Sex")) {
                $Groups->OpenGroup("Sex");
            }
            $Groups->AddItem();
            $SexKey = $this->DataSource->f("Sex");
            $is_next_record = $this->DataSource->next_record();
            if (!$is_next_record || $SexKey != $this->DataSource->f("Sex")) {
                $Groups->CloseGroup("Sex");
            }
        }
        if (!count($Groups->Groups)) 
            $Groups->OpenGroup("Report");
        else
            $this->NoRecords->Visible = false;
        $Groups->CloseGroup("Report");
        $this->TotalPages = $Groups->TotalPages;
        $this->TotalRows = $Groups->TotalRows;

        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeShow", $this);
        if(!$this->Visible) return;

        $this->Attributes->Show();
        $ReportBlock = "Report " . $this->ComponentName;
        $ParentPath = $Tpl->block_path;
        $Tpl->block_path = $ParentPath . "/" . $ReportBlock;

        if($this->CheckErrors()) {
            $Tpl->replaceblock("", $this->GetErrors());
            $Tpl->block_path = $ParentPath;
            return;
        } else {
            $items = & $Groups->Groups;
            $i = $Groups->Pages[min($this->PageNumber, $Groups->TotalPages) - 1];
            $this->ControlsVisible["GroupSex1"] = $this->GroupSex1->Visible;
            $this->ControlsVisible["CountGroupSex"] = $this->CountGroupSex->Visible;
            do {
                $this->Attributes->RestoreFromArray($items[$i]->Attributes);
                $this->RowNumber = $items[$i]->RowNumber;
                switch ($items[$i]->GroupType) {
                    Case "":
                        $this->Detail->CCSEventResult = CCGetEvent($this->Detail->CCSEvents, "BeforeShow", $this->Detail);
                        if ($this->Detail->Visible) {
                            $this->Attributes->Show();
                            $Tpl->parseto("Section Detail", true, "Section Detail");
                        }
                        break;
                    case "Report":
                        if ($items[$i]->Mode == 1) {
                            $this->Report_TotalRecords->SetValue($items[$i]->Report_TotalRecords);
                            $this->Report_TotalRecords->Attributes->RestoreFromArray($items[$i]->_Report_TotalRecordsAttributes);
                            $this->Report_Header->CCSEventResult = CCGetEvent($this->Report_Header->CCSEvents, "BeforeShow", $this->Report_Header);
                            if ($this->Report_Header->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Report_Header";
                                $this->Attributes->Show();
                                $this->Report_TotalRecords->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Report_Header", true, "Section Detail");
                            }
                        }
                        if ($items[$i]->Mode == 2) {
                            $this->Report_Footer->CCSEventResult = CCGetEvent($this->Report_Footer->CCSEvents, "BeforeShow", $this->Report_Footer);
                            if ($this->Report_Footer->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Report_Footer";
                                $this->NoRecords->Show();
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Report_Footer", true, "Section Detail");
                            }
                        }
                        break;
                    case "Page":
                        if ($items[$i]->Mode == 1) {
                            $this->Page_Header->CCSEventResult = CCGetEvent($this->Page_Header->CCSEvents, "BeforeShow", $this->Page_Header);
                            if ($this->Page_Header->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Page_Header";
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Page_Header", true, "Section Detail");
                            }
                        }
                        if ($items[$i]->Mode == 2 && !$this->UseClientPaging || $items[$i]->Mode == 1 && $this->UseClientPaging) {
                            $this->Page_Footer->CCSEventResult = CCGetEvent($this->Page_Footer->CCSEvents, "BeforeShow", $this->Page_Footer);
                            if ($this->Page_Footer->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Page_Footer";
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Page_Footer", true, "Section Detail");
                            }
                        }
                        break;
                    case "Sex":
                        if ($items[$i]->Mode == 1) {
                            $this->GroupSex1->SetValue($items[$i]->GroupSex1);
                            $this->GroupSex1->Attributes->RestoreFromArray($items[$i]->_GroupSex1Attributes);
                            $this->CountGroupSex->SetValue($items[$i]->CountGroupSex);
                            $this->CountGroupSex->Attributes->RestoreFromArray($items[$i]->_CountGroupSexAttributes);
                            $this->Sex_Header->CCSEventResult = CCGetEvent($this->Sex_Header->CCSEvents, "BeforeShow", $this->Sex_Header);
                            if ($this->Sex_Header->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Sex_Header";
                                $this->Attributes->Show();
                                $this->GroupSex1->Show();
                                $this->CountGroupSex->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Sex_Header", true, "Section Detail");
                            }
                        }
                        if ($items[$i]->Mode == 2) {
                            $this->Sex_Footer->CCSEventResult = CCGetEvent($this->Sex_Footer->CCSEvents, "BeforeShow", $this->Sex_Footer);
                            if ($this->Sex_Footer->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Sex_Footer";
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Sex_Footer", true, "Section Detail");
                            }
                        }
                        break;
                }
                $i++;
            } while ($i < count($items) && ($this->ViewMode == "Print" ||  !($i > 1 && $items[$i]->GroupType == 'Page' && $items[$i]->Mode == 1)));
            $Tpl->block_path = $ParentPath;
            $Tpl->parse($ReportBlock);
            $this->DataSource->close();
        }

    }
//End Show Method

} //End NewBorn37 Class @602-FCB6E20C

class clsNewBorn37DataSource extends clsDBregistry_db {  //NewBorn37DataSource Class @602-D391E61E

//DataSource Variables @602-83E06D24
    public $Parent = "";
    public $CCSEvents = "";
    public $CCSEventResult;
    public $ErrorBlock;
    public $CmdExecution;

    public $wp;


    // Datasource fields
    public $GroupSex1;
    public $CountGroupSex;
//End DataSource Variables

//DataSourceClass_Initialize Event @602-C7589B0B
    function clsNewBorn37DataSource(& $Parent)
    {
        $this->Parent = & $Parent;
        $this->ErrorBlock = "Report NewBorn37";
        $this->Initialize();
        $this->GroupSex1 = new clsField("GroupSex1", ccsInteger, "");
        
        $this->CountGroupSex = new clsField("CountGroupSex", ccsText, "");
        

    }
//End DataSourceClass_Initialize Event

//SetOrder Method @602-9E1383D1
    function SetOrder($SorterName, $SorterDirection)
    {
        $this->Order = "";
        $this->Order = CCGetOrder($this->Order, $SorterName, $SorterDirection, 
            "");
    }
//End SetOrder Method

//Prepare Method @602-0642F273
    function Prepare()
    {
        global $CCSLocales;
        global $DefaultDateFormat;
        $this->wp = new clsSQLParameters($this->ErrorBlock);
        $this->wp->AddParameter("2", "urls_BirthDate", ccsDate, array("ShortDate"), array("yyyy", "-", "mm", "-", "dd", " ", "HH", ":", "nn", ":", "ss"), $this->Parameters["urls_BirthDate"], "", false);
        $this->wp->AddParameter("3", "urls_BirthDate1", ccsDate, array("ShortDate"), array("yyyy", "-", "mm", "-", "dd", " ", "HH", ":", "nn", ":", "ss"), $this->Parameters["urls_BirthDate1"], "", false);
        $this->wp->AddParameter("6", "urls_FacilityName", ccsText, "", "", $this->Parameters["urls_FacilityName"], "", false);
        $this->wp->Criterion[1] = "( newborn.Weight<500 )";
        $this->wp->Criterion[2] = $this->wp->Operation(opGreaterThanOrEqual, "newborn.BirthDate", $this->wp->GetDBValue("2"), $this->ToSQL($this->wp->GetDBValue("2"), ccsDate),false);
        $this->wp->Criterion[3] = $this->wp->Operation(opLessThanOrEqual, "newborn.BirthDate", $this->wp->GetDBValue("3"), $this->ToSQL($this->wp->GetDBValue("3"), ccsDate),false);
        $this->wp->Criterion[4] = "( newborn.Died=1 )";
        $this->wp->Criterion[5] = "( newborn.DiedID=1 )";
        $this->wp->Criterion[6] = $this->wp->Operation(opEqual, "facilities.FacilityName", $this->wp->GetDBValue("6"), $this->ToSQL($this->wp->GetDBValue("6"), ccsText),false);
        $this->Where = $this->wp->opAND(
             false, $this->wp->opAND(
             false, $this->wp->opAND(
             false, $this->wp->opAND(
             false, $this->wp->opAND(
             false, 
             $this->wp->Criterion[1], 
             $this->wp->Criterion[2]), 
             $this->wp->Criterion[3]), 
             $this->wp->Criterion[4]), 
             $this->wp->Criterion[5]), 
             $this->wp->Criterion[6]);
    }
//End Prepare Method

//Open Method @602-191103F6
    function Open()
    {
        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeBuildSelect", $this->Parent);
        $this->SQL = "SELECT delivery.DeliveryID AS delivery_DeliveryID, FacilityName, Sex, NewBornID, BirthDate, Weight, facilities.FacilityID AS facilities_FacilityID \n\n" .
        "FROM (delivery INNER JOIN facilities ON\n\n" .
        "delivery.FacilityID = facilities.FacilityID) INNER JOIN newborn ON\n\n" .
        "newborn.DeliveryID = delivery.DeliveryID {SQL_Where} {SQL_OrderBy}";
        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeExecuteSelect", $this->Parent);
        $this->query(CCBuildSQL($this->SQL, $this->Where, "newborn.Sex asc" .  ($this->Order ? ", " . $this->Order: "")));
        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "AfterExecuteSelect", $this->Parent);
    }
//End Open Method

//SetValues Method @602-0F75DA76
    function SetValues()
    {
        $this->GroupSex1->SetDBValue(trim($this->f("Sex")));
        $this->CountGroupSex->SetDBValue($this->f("Sex"));
    }
//End SetValues Method

} //End NewBorn37DataSource Class @602-FCB6E20C

//NewBorn38 ReportGroup class @666-5479EFA4
class clsReportGroupNewBorn38 {
    public $GroupType;
    public $mode; //1 - open, 2 - close
    public $Report_TotalRecords, $_Report_TotalRecordsAttributes;
    public $GroupSex2, $_GroupSex2Attributes;
    public $CountGroupSex, $_CountGroupSexAttributes;
    public $Attributes;
    public $ReportTotalIndex = 0;
    public $PageTotalIndex;
    public $PageNumber;
    public $RowNumber;
    public $Parent;
    public $SexTotalIndex;

    function clsReportGroupNewBorn38(& $parent) {
        $this->Parent = & $parent;
        $this->Attributes = $this->Parent->Attributes->GetAsArray();
    }
    function SetControls($PrevGroup = "") {
        $this->GroupSex2 = $this->Parent->GroupSex2->Value;
    }

    function SetTotalControls($mode = "", $PrevGroup = "") {
        $this->Report_TotalRecords = $this->Parent->Report_TotalRecords->GetTotalValue($mode);
        $this->CountGroupSex = $this->Parent->CountGroupSex->GetTotalValue($mode);
        $this->_Report_TotalRecordsAttributes = $this->Parent->Report_TotalRecords->Attributes->GetAsArray();
        $this->_GroupSex2Attributes = $this->Parent->GroupSex2->Attributes->GetAsArray();
        $this->_CountGroupSexAttributes = $this->Parent->CountGroupSex->Attributes->GetAsArray();
    }
    function SyncWithHeader(& $Header) {
        $Header->Report_TotalRecords = $this->Report_TotalRecords;
        $Header->_Report_TotalRecordsAttributes = $this->_Report_TotalRecordsAttributes;
        $Header->CountGroupSex = $this->CountGroupSex;
        $Header->_CountGroupSexAttributes = $this->_CountGroupSexAttributes;
        $this->GroupSex2 = $Header->GroupSex2;
        $Header->_GroupSex2Attributes = $this->_GroupSex2Attributes;
        $this->Parent->GroupSex2->Value = $Header->GroupSex2;
        $this->Parent->GroupSex2->Attributes->RestoreFromArray($Header->_GroupSex2Attributes);
    }
    function ChangeTotalControls() {
        $this->Report_TotalRecords = $this->Parent->Report_TotalRecords->GetValue();
        $this->CountGroupSex = $this->Parent->CountGroupSex->GetValue();
    }
}
//End NewBorn38 ReportGroup class

//NewBorn38 GroupsCollection class @666-18F407B5
class clsGroupsCollectionNewBorn38 {
    public $Groups;
    public $mPageCurrentHeaderIndex;
    public $mSexCurrentHeaderIndex;
    public $PageSize;
    public $TotalPages = 0;
    public $TotalRows = 0;
    public $CurrentPageSize = 0;
    public $Pages;
    public $Parent;
    public $LastDetailIndex;

    function clsGroupsCollectionNewBorn38(& $parent) {
        $this->Parent = & $parent;
        $this->Groups = array();
        $this->Pages  = array();
        $this->mSexCurrentHeaderIndex = 1;
        $this->mReportTotalIndex = 0;
        $this->mPageTotalIndex = 1;
    }

    function & InitGroup() {
        $group = new clsReportGroupNewBorn38($this->Parent);
        $group->RowNumber = $this->TotalRows + 1;
        $group->PageNumber = $this->TotalPages;
        $group->PageTotalIndex = $this->mPageCurrentHeaderIndex;
        $group->SexTotalIndex = $this->mSexCurrentHeaderIndex;
        return $group;
    }

    function RestoreValues() {
        $this->Parent->Report_TotalRecords->Value = $this->Parent->Report_TotalRecords->initialValue;
        $this->Parent->GroupSex2->Value = $this->Parent->GroupSex2->initialValue;
        $this->Parent->CountGroupSex->Value = $this->Parent->CountGroupSex->initialValue;
    }

    function OpenPage() {
        $this->TotalPages++;
        $Group = & $this->InitGroup();
        $this->Parent->Page_Header->CCSEventResult = CCGetEvent($this->Parent->Page_Header->CCSEvents, "OnInitialize", $this->Parent->Page_Header);
        if ($this->Parent->Page_Header->Visible)
            $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Page_Header->Height;
        $Group->SetTotalControls("GetNextValue");
        $this->Parent->Page_Header->CCSEventResult = CCGetEvent($this->Parent->Page_Header->CCSEvents, "OnCalculate", $this->Parent->Page_Header);
        $Group->SetControls();
        $Group->Mode = 1;
        $Group->GroupType = "Page";
        $Group->PageTotalIndex = count($this->Groups);
        $this->mPageCurrentHeaderIndex = count($this->Groups);
        $this->Groups[] =  & $Group;
        $this->Pages[] =  count($this->Groups) == 2 ? 0 : count($this->Groups) - 1;
    }

    function OpenGroup($groupName) {
        $Group = "";
        $OpenFlag = false;
        if ($groupName == "Report") {
            $Group = & $this->InitGroup(true);
            $this->Parent->Report_Header->CCSEventResult = CCGetEvent($this->Parent->Report_Header->CCSEvents, "OnInitialize", $this->Parent->Report_Header);
            if ($this->Parent->Report_Header->Visible) 
                $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Report_Header->Height;
                $Group->SetTotalControls("GetNextValue");
            $this->Parent->Report_Header->CCSEventResult = CCGetEvent($this->Parent->Report_Header->CCSEvents, "OnCalculate", $this->Parent->Report_Header);
            $Group->SetControls();
            $Group->Mode = 1;
            $Group->GroupType = "Report";
            $this->Groups[] = & $Group;
            $this->OpenPage();
        }
        if ($groupName == "Sex") {
            $GroupSex = & $this->InitGroup(true);
            $this->Parent->Sex_Header->CCSEventResult = CCGetEvent($this->Parent->Sex_Header->CCSEvents, "OnInitialize", $this->Parent->Sex_Header);
            if ($this->Parent->Page_Footer->Visible) 
                $OverSize = $this->Parent->Sex_Header->Height + $this->Parent->Page_Footer->Height;
            else
                $OverSize = $this->Parent->Sex_Header->Height;
            if (($this->PageSize > 0) and $this->Parent->Sex_Header->Visible and ($this->CurrentPageSize + $OverSize > $this->PageSize)) {
                $this->ClosePage();
                $this->OpenPage();
            }
            if ($this->Parent->Sex_Header->Visible)
                $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Sex_Header->Height;
                $GroupSex->SetTotalControls("GetNextValue");
            $this->Parent->Sex_Header->CCSEventResult = CCGetEvent($this->Parent->Sex_Header->CCSEvents, "OnCalculate", $this->Parent->Sex_Header);
            $GroupSex->SetControls();
            $GroupSex->Mode = 1;
            $GroupSex->GroupType = "Sex";
            $this->mSexCurrentHeaderIndex = count($this->Groups);
            $this->Groups[] = & $GroupSex;
            $this->Parent->CountGroupSex->Reset();
        }
    }

    function ClosePage() {
        $Group = & $this->InitGroup();
        $this->Parent->Page_Footer->CCSEventResult = CCGetEvent($this->Parent->Page_Footer->CCSEvents, "OnInitialize", $this->Parent->Page_Footer);
        $Group->SetTotalControls("GetPrevValue");
        $Group->SyncWithHeader($this->Groups[$this->mPageCurrentHeaderIndex]);
        $this->Parent->Page_Footer->CCSEventResult = CCGetEvent($this->Parent->Page_Footer->CCSEvents, "OnCalculate", $this->Parent->Page_Footer);
        $Group->SetControls();
        $this->RestoreValues();
        $this->CurrentPageSize = 0;
        $Group->Mode = 2;
        $Group->GroupType = "Page";
        $this->Groups[] = & $Group;
    }

    function CloseGroup($groupName)
    {
        $Group = "";
        if ($groupName == "Report") {
            $Group = & $this->InitGroup(true);
            $this->Parent->Report_Footer->CCSEventResult = CCGetEvent($this->Parent->Report_Footer->CCSEvents, "OnInitialize", $this->Parent->Report_Footer);
            if ($this->Parent->Page_Footer->Visible) 
                $OverSize = $this->Parent->Report_Footer->Height + $this->Parent->Page_Footer->Height;
            else
                $OverSize = $this->Parent->Report_Footer->Height;
            if (($this->PageSize > 0) and $this->Parent->Report_Footer->Visible and ($this->CurrentPageSize + $OverSize > $this->PageSize)) {
                $this->ClosePage();
                $this->OpenPage();
            }
            $Group->SetTotalControls("GetPrevValue");
            $Group->SyncWithHeader($this->Groups[0]);
            if ($this->Parent->Report_Footer->Visible)
                $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Report_Footer->Height;
            $this->Parent->Report_Footer->CCSEventResult = CCGetEvent($this->Parent->Report_Footer->CCSEvents, "OnCalculate", $this->Parent->Report_Footer);
            $Group->SetControls();
            $this->RestoreValues();
            $Group->Mode = 2;
            $Group->GroupType = "Report";
            $this->Groups[] = & $Group;
            $this->ClosePage();
            return;
        }
        $GroupSex = & $this->InitGroup(true);
        $this->Parent->Sex_Footer->CCSEventResult = CCGetEvent($this->Parent->Sex_Footer->CCSEvents, "OnInitialize", $this->Parent->Sex_Footer);
        if ($this->Parent->Page_Footer->Visible) 
            $OverSize = $this->Parent->Sex_Footer->Height + $this->Parent->Page_Footer->Height;
        else
            $OverSize = $this->Parent->Sex_Footer->Height;
        if (($this->PageSize > 0) and $this->Parent->Sex_Footer->Visible and ($this->CurrentPageSize + $OverSize > $this->PageSize)) {
            $this->ClosePage();
            $this->OpenPage();
        }
        $GroupSex->SetTotalControls("GetPrevValue");
        $GroupSex->SyncWithHeader($this->Groups[$this->mSexCurrentHeaderIndex]);
        if ($this->Parent->Sex_Footer->Visible)
            $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Sex_Footer->Height;
        $this->Parent->Sex_Footer->CCSEventResult = CCGetEvent($this->Parent->Sex_Footer->CCSEvents, "OnCalculate", $this->Parent->Sex_Footer);
        $GroupSex->SetControls();
        $this->Parent->CountGroupSex->Reset();
        $this->RestoreValues();
        $GroupSex->Mode = 2;
        $GroupSex->GroupType ="Sex";
        $this->Groups[] = & $GroupSex;
    }

    function AddItem()
    {
        $Group = & $this->InitGroup(true);
        $this->Parent->Detail->CCSEventResult = CCGetEvent($this->Parent->Detail->CCSEvents, "OnInitialize", $this->Parent->Detail);
        if ($this->Parent->Page_Footer->Visible) 
            $OverSize = $this->Parent->Detail->Height + $this->Parent->Page_Footer->Height;
        else
            $OverSize = $this->Parent->Detail->Height;
        if (($this->PageSize > 0) and $this->Parent->Detail->Visible and ($this->CurrentPageSize + $OverSize > $this->PageSize)) {
            $this->ClosePage();
            $this->OpenPage();
        }
        $this->TotalRows++;
        if ($this->LastDetailIndex)
            $PrevGroup = & $this->Groups[$this->LastDetailIndex];
        else
            $PrevGroup = "";
        $Group->SetTotalControls("", $PrevGroup);
        if ($this->Parent->Detail->Visible)
            $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Detail->Height;
        $this->Parent->Detail->CCSEventResult = CCGetEvent($this->Parent->Detail->CCSEvents, "OnCalculate", $this->Parent->Detail);
        $Group->SetControls($PrevGroup);
        $this->LastDetailIndex = count($this->Groups);
        $this->Groups[] = & $Group;
    }
}
//End NewBorn38 GroupsCollection class

class clsReportNewBorn38 { //NewBorn38 Class @666-8914C91E

//NewBorn38 Variables @666-80D63D80

    public $ComponentType = "Report";
    public $PageSize;
    public $ComponentName;
    public $Visible;
    public $Errors;
    public $CCSEvents = array();
    public $CCSEventResult;
    public $RelativePath = "";
    public $ViewMode = "Web";
    public $TemplateBlock;
    public $PageNumber;
    public $RowNumber;
    public $TotalRows;
    public $TotalPages;
    public $ControlsVisible = array();
    public $IsEmpty;
    public $Attributes;
    public $DetailBlock, $Detail;
    public $Report_FooterBlock, $Report_Footer;
    public $Report_HeaderBlock, $Report_Header;
    public $Page_FooterBlock, $Page_Footer;
    public $Page_HeaderBlock, $Page_Header;
    public $Sex_HeaderBlock, $Sex_Header;
    public $Sex_FooterBlock, $Sex_Footer;
    public $SorterName, $SorterDirection;

    public $ds;
    public $DataSource;
    public $UseClientPaging = false;

    //Report Controls
    public $StaticControls, $RowControls, $Report_FooterControls, $Report_HeaderControls;
    public $Page_FooterControls, $Page_HeaderControls;
    public $Sex_HeaderControls, $Sex_FooterControls;
//End NewBorn38 Variables

//Class_Initialize Event @666-9B1A9AF4
    function clsReportNewBorn38($RelativePath = "", & $Parent)
    {
        global $FileName;
        global $CCSLocales;
        global $DefaultDateFormat;
        $this->ComponentName = "NewBorn38";
        $this->Visible = True;
        $this->Parent = & $Parent;
        $this->RelativePath = $RelativePath;
        $this->Attributes = new clsAttributes($this->ComponentName . ":");
        $this->Detail = new clsSection($this);
        $MinPageSize = 0;
        $MaxSectionSize = 0;
        $this->Detail->Height = 1;
        $MaxSectionSize = max($MaxSectionSize, $this->Detail->Height);
        $this->Report_Footer = new clsSection($this);
        $this->Report_Header = new clsSection($this);
        $this->Page_Footer = new clsSection($this);
        $this->Page_Footer->Height = 1;
        $MinPageSize += $this->Page_Footer->Height;
        $this->Page_Header = new clsSection($this);
        $this->Page_Header->Height = 1;
        $MinPageSize += $this->Page_Header->Height;
        $this->Sex_Footer = new clsSection($this);
        $this->Sex_Footer->Height = 1;
        $MaxSectionSize = max($MaxSectionSize, $this->Sex_Footer->Height);
        $this->Sex_Header = new clsSection($this);
        $this->Sex_Header->Height = 1;
        $MaxSectionSize = max($MaxSectionSize, $this->Sex_Header->Height);
        $this->Errors = new clsErrors();
        $this->DataSource = new clsNewBorn38DataSource($this);
        $this->ds = & $this->DataSource;
        $PageSize = CCGetParam($this->ComponentName . "PageSize", "");
        if(is_numeric($PageSize) && $PageSize > 0) {
            $this->PageSize = $PageSize;
        } else {
            if (!is_numeric($PageSize) || $PageSize < 0)
                $this->PageSize = 0;
             else if ($PageSize == "0")
                $this->PageSize = 0;
             else 
                $this->PageSize = $PageSize;
        }
        $MinPageSize += $MaxSectionSize;
        if ($this->PageSize && $MinPageSize && $this->PageSize < $MinPageSize)
            $this->PageSize = $MinPageSize;
        $this->PageNumber = $this->ViewMode == "Print" ? 1 : intval(CCGetParam($this->ComponentName . "Page", 1));
        if ($this->PageNumber <= 0 ) {
            $this->PageNumber = 1;
        }
        $this->Visible = (CCSecurityAccessCheck("1;2") == "success");

        $this->Report_TotalRecords = new clsControl(ccsReportLabel, "Report_TotalRecords", "Report_TotalRecords", ccsText, "", 0, $this);
        $this->Report_TotalRecords->TotalFunction = "Count";
        $this->Report_TotalRecords->IsEmptySource = true;
        $this->NoRecords = new clsPanel("NoRecords", $this);
        $this->GroupSex2 = new clsControl(ccsReportLabel, "GroupSex2", "GroupSex2", ccsInteger, "", "", $this);
        $this->CountGroupSex = new clsControl(ccsReportLabel, "CountGroupSex", "CountGroupSex", ccsText, "", 0, $this);
        $this->CountGroupSex->TotalFunction = "Count";
    }
//End Class_Initialize Event

//Initialize Method @666-6C59EE65
    function Initialize()
    {
        if(!$this->Visible) return;

        $this->DataSource->PageSize = $this->PageSize;
        $this->DataSource->AbsolutePage = $this->PageNumber;
        $this->DataSource->SetOrder($this->SorterName, $this->SorterDirection);
    }
//End Initialize Method

//CheckErrors Method @666-CD002B70
    function CheckErrors()
    {
        $errors = false;
        $errors = ($errors || $this->Report_TotalRecords->Errors->Count());
        $errors = ($errors || $this->GroupSex2->Errors->Count());
        $errors = ($errors || $this->CountGroupSex->Errors->Count());
        $errors = ($errors || $this->Errors->Count());
        $errors = ($errors || $this->DataSource->Errors->Count());
        return $errors;
    }
//End CheckErrors Method

//GetErrors Method @666-B2E862A1
    function GetErrors()
    {
        $errors = "";
        $errors = ComposeStrings($errors, $this->Report_TotalRecords->Errors->ToString());
        $errors = ComposeStrings($errors, $this->GroupSex2->Errors->ToString());
        $errors = ComposeStrings($errors, $this->CountGroupSex->Errors->ToString());
        $errors = ComposeStrings($errors, $this->Errors->ToString());
        $errors = ComposeStrings($errors, $this->DataSource->Errors->ToString());
        return $errors;
    }
//End GetErrors Method

//Show Method @666-F8839FC8
    function Show()
    {
        global $Tpl;
        global $CCSLocales;
        if(!$this->Visible) return;

        $ShownRecords = 0;

        $this->DataSource->Parameters["urls_BirthDate"] = CCGetFromGet("s_BirthDate", NULL);
        $this->DataSource->Parameters["urls_BirthDate1"] = CCGetFromGet("s_BirthDate1", NULL);
        $this->DataSource->Parameters["urls_FacilityName"] = CCGetFromGet("s_FacilityName", NULL);

        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeSelect", $this);


        $this->DataSource->Prepare();
        $this->DataSource->Open();

        $SexKey = "";
        $Groups = new clsGroupsCollectionNewBorn38($this);
        $Groups->PageSize = $this->PageSize > 0 ? $this->PageSize : 0;

        $is_next_record = $this->DataSource->next_record();
        $this->IsEmpty = ! $is_next_record;
        while($is_next_record) {
            $this->DataSource->SetValues();
            $this->GroupSex2->SetValue($this->DataSource->GroupSex2->GetValue());
            $this->CountGroupSex->SetValue($this->DataSource->CountGroupSex->GetValue());
            $this->Report_TotalRecords->SetValue(1);
            if (count($Groups->Groups) == 0) $Groups->OpenGroup("Report");
            if (count($Groups->Groups) == 2 or $SexKey != $this->DataSource->f("Sex")) {
                $Groups->OpenGroup("Sex");
            }
            $Groups->AddItem();
            $SexKey = $this->DataSource->f("Sex");
            $is_next_record = $this->DataSource->next_record();
            if (!$is_next_record || $SexKey != $this->DataSource->f("Sex")) {
                $Groups->CloseGroup("Sex");
            }
        }
        if (!count($Groups->Groups)) 
            $Groups->OpenGroup("Report");
        else
            $this->NoRecords->Visible = false;
        $Groups->CloseGroup("Report");
        $this->TotalPages = $Groups->TotalPages;
        $this->TotalRows = $Groups->TotalRows;

        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeShow", $this);
        if(!$this->Visible) return;

        $this->Attributes->Show();
        $ReportBlock = "Report " . $this->ComponentName;
        $ParentPath = $Tpl->block_path;
        $Tpl->block_path = $ParentPath . "/" . $ReportBlock;

        if($this->CheckErrors()) {
            $Tpl->replaceblock("", $this->GetErrors());
            $Tpl->block_path = $ParentPath;
            return;
        } else {
            $items = & $Groups->Groups;
            $i = $Groups->Pages[min($this->PageNumber, $Groups->TotalPages) - 1];
            $this->ControlsVisible["GroupSex2"] = $this->GroupSex2->Visible;
            $this->ControlsVisible["CountGroupSex"] = $this->CountGroupSex->Visible;
            do {
                $this->Attributes->RestoreFromArray($items[$i]->Attributes);
                $this->RowNumber = $items[$i]->RowNumber;
                switch ($items[$i]->GroupType) {
                    Case "":
                        $this->Detail->CCSEventResult = CCGetEvent($this->Detail->CCSEvents, "BeforeShow", $this->Detail);
                        if ($this->Detail->Visible) {
                            $this->Attributes->Show();
                            $Tpl->parseto("Section Detail", true, "Section Detail");
                        }
                        break;
                    case "Report":
                        if ($items[$i]->Mode == 1) {
                            $this->Report_TotalRecords->SetValue($items[$i]->Report_TotalRecords);
                            $this->Report_TotalRecords->Attributes->RestoreFromArray($items[$i]->_Report_TotalRecordsAttributes);
                            $this->Report_Header->CCSEventResult = CCGetEvent($this->Report_Header->CCSEvents, "BeforeShow", $this->Report_Header);
                            if ($this->Report_Header->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Report_Header";
                                $this->Attributes->Show();
                                $this->Report_TotalRecords->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Report_Header", true, "Section Detail");
                            }
                        }
                        if ($items[$i]->Mode == 2) {
                            $this->Report_Footer->CCSEventResult = CCGetEvent($this->Report_Footer->CCSEvents, "BeforeShow", $this->Report_Footer);
                            if ($this->Report_Footer->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Report_Footer";
                                $this->NoRecords->Show();
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Report_Footer", true, "Section Detail");
                            }
                        }
                        break;
                    case "Page":
                        if ($items[$i]->Mode == 1) {
                            $this->Page_Header->CCSEventResult = CCGetEvent($this->Page_Header->CCSEvents, "BeforeShow", $this->Page_Header);
                            if ($this->Page_Header->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Page_Header";
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Page_Header", true, "Section Detail");
                            }
                        }
                        if ($items[$i]->Mode == 2 && !$this->UseClientPaging || $items[$i]->Mode == 1 && $this->UseClientPaging) {
                            $this->Page_Footer->CCSEventResult = CCGetEvent($this->Page_Footer->CCSEvents, "BeforeShow", $this->Page_Footer);
                            if ($this->Page_Footer->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Page_Footer";
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Page_Footer", true, "Section Detail");
                            }
                        }
                        break;
                    case "Sex":
                        if ($items[$i]->Mode == 1) {
                            $this->GroupSex2->SetValue($items[$i]->GroupSex2);
                            $this->GroupSex2->Attributes->RestoreFromArray($items[$i]->_GroupSex2Attributes);
                            $this->CountGroupSex->SetValue($items[$i]->CountGroupSex);
                            $this->CountGroupSex->Attributes->RestoreFromArray($items[$i]->_CountGroupSexAttributes);
                            $this->Sex_Header->CCSEventResult = CCGetEvent($this->Sex_Header->CCSEvents, "BeforeShow", $this->Sex_Header);
                            if ($this->Sex_Header->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Sex_Header";
                                $this->Attributes->Show();
                                $this->GroupSex2->Show();
                                $this->CountGroupSex->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Sex_Header", true, "Section Detail");
                            }
                        }
                        if ($items[$i]->Mode == 2) {
                            $this->Sex_Footer->CCSEventResult = CCGetEvent($this->Sex_Footer->CCSEvents, "BeforeShow", $this->Sex_Footer);
                            if ($this->Sex_Footer->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Sex_Footer";
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Sex_Footer", true, "Section Detail");
                            }
                        }
                        break;
                }
                $i++;
            } while ($i < count($items) && ($this->ViewMode == "Print" ||  !($i > 1 && $items[$i]->GroupType == 'Page' && $items[$i]->Mode == 1)));
            $Tpl->block_path = $ParentPath;
            $Tpl->parse($ReportBlock);
            $this->DataSource->close();
        }

    }
//End Show Method

} //End NewBorn38 Class @666-FCB6E20C

class clsNewBorn38DataSource extends clsDBregistry_db {  //NewBorn38DataSource Class @666-1A9D2AA0

//DataSource Variables @666-F5055419
    public $Parent = "";
    public $CCSEvents = "";
    public $CCSEventResult;
    public $ErrorBlock;
    public $CmdExecution;

    public $wp;


    // Datasource fields
    public $GroupSex2;
    public $CountGroupSex;
//End DataSource Variables

//DataSourceClass_Initialize Event @666-1C045DE5
    function clsNewBorn38DataSource(& $Parent)
    {
        $this->Parent = & $Parent;
        $this->ErrorBlock = "Report NewBorn38";
        $this->Initialize();
        $this->GroupSex2 = new clsField("GroupSex2", ccsInteger, "");
        
        $this->CountGroupSex = new clsField("CountGroupSex", ccsText, "");
        

    }
//End DataSourceClass_Initialize Event

//SetOrder Method @666-9E1383D1
    function SetOrder($SorterName, $SorterDirection)
    {
        $this->Order = "";
        $this->Order = CCGetOrder($this->Order, $SorterName, $SorterDirection, 
            "");
    }
//End SetOrder Method

//Prepare Method @666-58C22190
    function Prepare()
    {
        global $CCSLocales;
        global $DefaultDateFormat;
        $this->wp = new clsSQLParameters($this->ErrorBlock);
        $this->wp->AddParameter("3", "urls_BirthDate", ccsDate, array("ShortDate"), array("yyyy", "-", "mm", "-", "dd", " ", "HH", ":", "nn", ":", "ss"), $this->Parameters["urls_BirthDate"], "", false);
        $this->wp->AddParameter("4", "urls_BirthDate1", ccsDate, array("ShortDate"), array("yyyy", "-", "mm", "-", "dd", " ", "HH", ":", "nn", ":", "ss"), $this->Parameters["urls_BirthDate1"], "", false);
        $this->wp->AddParameter("7", "urls_FacilityName", ccsText, "", "", $this->Parameters["urls_FacilityName"], "", false);
        $this->wp->Criterion[1] = "( newborn.Weight>=500 )";
        $this->wp->Criterion[2] = "( newborn.Weight<=999 )";
        $this->wp->Criterion[3] = $this->wp->Operation(opGreaterThanOrEqual, "newborn.BirthDate", $this->wp->GetDBValue("3"), $this->ToSQL($this->wp->GetDBValue("3"), ccsDate),false);
        $this->wp->Criterion[4] = $this->wp->Operation(opLessThanOrEqual, "newborn.BirthDate", $this->wp->GetDBValue("4"), $this->ToSQL($this->wp->GetDBValue("4"), ccsDate),false);
        $this->wp->Criterion[5] = "( newborn.Died=1 )";
        $this->wp->Criterion[6] = "( newborn.DiedID=1 )";
        $this->wp->Criterion[7] = $this->wp->Operation(opEqual, "facilities.FacilityName", $this->wp->GetDBValue("7"), $this->ToSQL($this->wp->GetDBValue("7"), ccsText),false);
        $this->Where = $this->wp->opAND(
             false, $this->wp->opAND(
             false, $this->wp->opAND(
             false, $this->wp->opAND(
             false, $this->wp->opAND(
             false, $this->wp->opAND(
             false, 
             $this->wp->Criterion[1], 
             $this->wp->Criterion[2]), 
             $this->wp->Criterion[3]), 
             $this->wp->Criterion[4]), 
             $this->wp->Criterion[5]), 
             $this->wp->Criterion[6]), 
             $this->wp->Criterion[7]);
    }
//End Prepare Method

//Open Method @666-CA3C9D7B
    function Open()
    {
        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeBuildSelect", $this->Parent);
        $this->SQL = "SELECT delivery.DeliveryID AS delivery_DeliveryID, FacilityName, Sex, NewBornID, BirthDate, Weight \n\n" .
        "FROM (delivery INNER JOIN facilities ON\n\n" .
        "delivery.FacilityID = facilities.FacilityID) INNER JOIN newborn ON\n\n" .
        "newborn.DeliveryID = delivery.DeliveryID {SQL_Where} {SQL_OrderBy}";
        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeExecuteSelect", $this->Parent);
        $this->query(CCBuildSQL($this->SQL, $this->Where, "newborn.Sex asc" .  ($this->Order ? ", " . $this->Order: "")));
        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "AfterExecuteSelect", $this->Parent);
    }
//End Open Method

//SetValues Method @666-F73A025D
    function SetValues()
    {
        $this->GroupSex2->SetDBValue(trim($this->f("Sex")));
        $this->CountGroupSex->SetDBValue($this->f("Sex"));
    }
//End SetValues Method

} //End NewBorn38DataSource Class @666-FCB6E20C

//NewBorn39 ReportGroup class @730-4D0E929D
class clsReportGroupNewBorn39 {
    public $GroupType;
    public $mode; //1 - open, 2 - close
    public $Report_TotalRecords, $_Report_TotalRecordsAttributes;
    public $GroupSex2, $_GroupSex2Attributes;
    public $CountGroupSex, $_CountGroupSexAttributes;
    public $Attributes;
    public $ReportTotalIndex = 0;
    public $PageTotalIndex;
    public $PageNumber;
    public $RowNumber;
    public $Parent;
    public $SexTotalIndex;

    function clsReportGroupNewBorn39(& $parent) {
        $this->Parent = & $parent;
        $this->Attributes = $this->Parent->Attributes->GetAsArray();
    }
    function SetControls($PrevGroup = "") {
        $this->GroupSex2 = $this->Parent->GroupSex2->Value;
    }

    function SetTotalControls($mode = "", $PrevGroup = "") {
        $this->Report_TotalRecords = $this->Parent->Report_TotalRecords->GetTotalValue($mode);
        $this->CountGroupSex = $this->Parent->CountGroupSex->GetTotalValue($mode);
        $this->_Report_TotalRecordsAttributes = $this->Parent->Report_TotalRecords->Attributes->GetAsArray();
        $this->_GroupSex2Attributes = $this->Parent->GroupSex2->Attributes->GetAsArray();
        $this->_CountGroupSexAttributes = $this->Parent->CountGroupSex->Attributes->GetAsArray();
    }
    function SyncWithHeader(& $Header) {
        $Header->Report_TotalRecords = $this->Report_TotalRecords;
        $Header->_Report_TotalRecordsAttributes = $this->_Report_TotalRecordsAttributes;
        $Header->CountGroupSex = $this->CountGroupSex;
        $Header->_CountGroupSexAttributes = $this->_CountGroupSexAttributes;
        $this->GroupSex2 = $Header->GroupSex2;
        $Header->_GroupSex2Attributes = $this->_GroupSex2Attributes;
        $this->Parent->GroupSex2->Value = $Header->GroupSex2;
        $this->Parent->GroupSex2->Attributes->RestoreFromArray($Header->_GroupSex2Attributes);
    }
    function ChangeTotalControls() {
        $this->Report_TotalRecords = $this->Parent->Report_TotalRecords->GetValue();
        $this->CountGroupSex = $this->Parent->CountGroupSex->GetValue();
    }
}
//End NewBorn39 ReportGroup class

//NewBorn39 GroupsCollection class @730-BFE78A47
class clsGroupsCollectionNewBorn39 {
    public $Groups;
    public $mPageCurrentHeaderIndex;
    public $mSexCurrentHeaderIndex;
    public $PageSize;
    public $TotalPages = 0;
    public $TotalRows = 0;
    public $CurrentPageSize = 0;
    public $Pages;
    public $Parent;
    public $LastDetailIndex;

    function clsGroupsCollectionNewBorn39(& $parent) {
        $this->Parent = & $parent;
        $this->Groups = array();
        $this->Pages  = array();
        $this->mSexCurrentHeaderIndex = 1;
        $this->mReportTotalIndex = 0;
        $this->mPageTotalIndex = 1;
    }

    function & InitGroup() {
        $group = new clsReportGroupNewBorn39($this->Parent);
        $group->RowNumber = $this->TotalRows + 1;
        $group->PageNumber = $this->TotalPages;
        $group->PageTotalIndex = $this->mPageCurrentHeaderIndex;
        $group->SexTotalIndex = $this->mSexCurrentHeaderIndex;
        return $group;
    }

    function RestoreValues() {
        $this->Parent->Report_TotalRecords->Value = $this->Parent->Report_TotalRecords->initialValue;
        $this->Parent->GroupSex2->Value = $this->Parent->GroupSex2->initialValue;
        $this->Parent->CountGroupSex->Value = $this->Parent->CountGroupSex->initialValue;
    }

    function OpenPage() {
        $this->TotalPages++;
        $Group = & $this->InitGroup();
        $this->Parent->Page_Header->CCSEventResult = CCGetEvent($this->Parent->Page_Header->CCSEvents, "OnInitialize", $this->Parent->Page_Header);
        if ($this->Parent->Page_Header->Visible)
            $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Page_Header->Height;
        $Group->SetTotalControls("GetNextValue");
        $this->Parent->Page_Header->CCSEventResult = CCGetEvent($this->Parent->Page_Header->CCSEvents, "OnCalculate", $this->Parent->Page_Header);
        $Group->SetControls();
        $Group->Mode = 1;
        $Group->GroupType = "Page";
        $Group->PageTotalIndex = count($this->Groups);
        $this->mPageCurrentHeaderIndex = count($this->Groups);
        $this->Groups[] =  & $Group;
        $this->Pages[] =  count($this->Groups) == 2 ? 0 : count($this->Groups) - 1;
    }

    function OpenGroup($groupName) {
        $Group = "";
        $OpenFlag = false;
        if ($groupName == "Report") {
            $Group = & $this->InitGroup(true);
            $this->Parent->Report_Header->CCSEventResult = CCGetEvent($this->Parent->Report_Header->CCSEvents, "OnInitialize", $this->Parent->Report_Header);
            if ($this->Parent->Report_Header->Visible) 
                $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Report_Header->Height;
                $Group->SetTotalControls("GetNextValue");
            $this->Parent->Report_Header->CCSEventResult = CCGetEvent($this->Parent->Report_Header->CCSEvents, "OnCalculate", $this->Parent->Report_Header);
            $Group->SetControls();
            $Group->Mode = 1;
            $Group->GroupType = "Report";
            $this->Groups[] = & $Group;
            $this->OpenPage();
        }
        if ($groupName == "Sex") {
            $GroupSex = & $this->InitGroup(true);
            $this->Parent->Sex_Header->CCSEventResult = CCGetEvent($this->Parent->Sex_Header->CCSEvents, "OnInitialize", $this->Parent->Sex_Header);
            if ($this->Parent->Page_Footer->Visible) 
                $OverSize = $this->Parent->Sex_Header->Height + $this->Parent->Page_Footer->Height;
            else
                $OverSize = $this->Parent->Sex_Header->Height;
            if (($this->PageSize > 0) and $this->Parent->Sex_Header->Visible and ($this->CurrentPageSize + $OverSize > $this->PageSize)) {
                $this->ClosePage();
                $this->OpenPage();
            }
            if ($this->Parent->Sex_Header->Visible)
                $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Sex_Header->Height;
                $GroupSex->SetTotalControls("GetNextValue");
            $this->Parent->Sex_Header->CCSEventResult = CCGetEvent($this->Parent->Sex_Header->CCSEvents, "OnCalculate", $this->Parent->Sex_Header);
            $GroupSex->SetControls();
            $GroupSex->Mode = 1;
            $GroupSex->GroupType = "Sex";
            $this->mSexCurrentHeaderIndex = count($this->Groups);
            $this->Groups[] = & $GroupSex;
            $this->Parent->CountGroupSex->Reset();
        }
    }

    function ClosePage() {
        $Group = & $this->InitGroup();
        $this->Parent->Page_Footer->CCSEventResult = CCGetEvent($this->Parent->Page_Footer->CCSEvents, "OnInitialize", $this->Parent->Page_Footer);
        $Group->SetTotalControls("GetPrevValue");
        $Group->SyncWithHeader($this->Groups[$this->mPageCurrentHeaderIndex]);
        $this->Parent->Page_Footer->CCSEventResult = CCGetEvent($this->Parent->Page_Footer->CCSEvents, "OnCalculate", $this->Parent->Page_Footer);
        $Group->SetControls();
        $this->RestoreValues();
        $this->CurrentPageSize = 0;
        $Group->Mode = 2;
        $Group->GroupType = "Page";
        $this->Groups[] = & $Group;
    }

    function CloseGroup($groupName)
    {
        $Group = "";
        if ($groupName == "Report") {
            $Group = & $this->InitGroup(true);
            $this->Parent->Report_Footer->CCSEventResult = CCGetEvent($this->Parent->Report_Footer->CCSEvents, "OnInitialize", $this->Parent->Report_Footer);
            if ($this->Parent->Page_Footer->Visible) 
                $OverSize = $this->Parent->Report_Footer->Height + $this->Parent->Page_Footer->Height;
            else
                $OverSize = $this->Parent->Report_Footer->Height;
            if (($this->PageSize > 0) and $this->Parent->Report_Footer->Visible and ($this->CurrentPageSize + $OverSize > $this->PageSize)) {
                $this->ClosePage();
                $this->OpenPage();
            }
            $Group->SetTotalControls("GetPrevValue");
            $Group->SyncWithHeader($this->Groups[0]);
            if ($this->Parent->Report_Footer->Visible)
                $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Report_Footer->Height;
            $this->Parent->Report_Footer->CCSEventResult = CCGetEvent($this->Parent->Report_Footer->CCSEvents, "OnCalculate", $this->Parent->Report_Footer);
            $Group->SetControls();
            $this->RestoreValues();
            $Group->Mode = 2;
            $Group->GroupType = "Report";
            $this->Groups[] = & $Group;
            $this->ClosePage();
            return;
        }
        $GroupSex = & $this->InitGroup(true);
        $this->Parent->Sex_Footer->CCSEventResult = CCGetEvent($this->Parent->Sex_Footer->CCSEvents, "OnInitialize", $this->Parent->Sex_Footer);
        if ($this->Parent->Page_Footer->Visible) 
            $OverSize = $this->Parent->Sex_Footer->Height + $this->Parent->Page_Footer->Height;
        else
            $OverSize = $this->Parent->Sex_Footer->Height;
        if (($this->PageSize > 0) and $this->Parent->Sex_Footer->Visible and ($this->CurrentPageSize + $OverSize > $this->PageSize)) {
            $this->ClosePage();
            $this->OpenPage();
        }
        $GroupSex->SetTotalControls("GetPrevValue");
        $GroupSex->SyncWithHeader($this->Groups[$this->mSexCurrentHeaderIndex]);
        if ($this->Parent->Sex_Footer->Visible)
            $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Sex_Footer->Height;
        $this->Parent->Sex_Footer->CCSEventResult = CCGetEvent($this->Parent->Sex_Footer->CCSEvents, "OnCalculate", $this->Parent->Sex_Footer);
        $GroupSex->SetControls();
        $this->Parent->CountGroupSex->Reset();
        $this->RestoreValues();
        $GroupSex->Mode = 2;
        $GroupSex->GroupType ="Sex";
        $this->Groups[] = & $GroupSex;
    }

    function AddItem()
    {
        $Group = & $this->InitGroup(true);
        $this->Parent->Detail->CCSEventResult = CCGetEvent($this->Parent->Detail->CCSEvents, "OnInitialize", $this->Parent->Detail);
        if ($this->Parent->Page_Footer->Visible) 
            $OverSize = $this->Parent->Detail->Height + $this->Parent->Page_Footer->Height;
        else
            $OverSize = $this->Parent->Detail->Height;
        if (($this->PageSize > 0) and $this->Parent->Detail->Visible and ($this->CurrentPageSize + $OverSize > $this->PageSize)) {
            $this->ClosePage();
            $this->OpenPage();
        }
        $this->TotalRows++;
        if ($this->LastDetailIndex)
            $PrevGroup = & $this->Groups[$this->LastDetailIndex];
        else
            $PrevGroup = "";
        $Group->SetTotalControls("", $PrevGroup);
        if ($this->Parent->Detail->Visible)
            $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Detail->Height;
        $this->Parent->Detail->CCSEventResult = CCGetEvent($this->Parent->Detail->CCSEvents, "OnCalculate", $this->Parent->Detail);
        $Group->SetControls($PrevGroup);
        $this->LastDetailIndex = count($this->Groups);
        $this->Groups[] = & $Group;
    }
}
//End NewBorn39 GroupsCollection class

class clsReportNewBorn39 { //NewBorn39 Class @730-900FF85F

//NewBorn39 Variables @730-80D63D80

    public $ComponentType = "Report";
    public $PageSize;
    public $ComponentName;
    public $Visible;
    public $Errors;
    public $CCSEvents = array();
    public $CCSEventResult;
    public $RelativePath = "";
    public $ViewMode = "Web";
    public $TemplateBlock;
    public $PageNumber;
    public $RowNumber;
    public $TotalRows;
    public $TotalPages;
    public $ControlsVisible = array();
    public $IsEmpty;
    public $Attributes;
    public $DetailBlock, $Detail;
    public $Report_FooterBlock, $Report_Footer;
    public $Report_HeaderBlock, $Report_Header;
    public $Page_FooterBlock, $Page_Footer;
    public $Page_HeaderBlock, $Page_Header;
    public $Sex_HeaderBlock, $Sex_Header;
    public $Sex_FooterBlock, $Sex_Footer;
    public $SorterName, $SorterDirection;

    public $ds;
    public $DataSource;
    public $UseClientPaging = false;

    //Report Controls
    public $StaticControls, $RowControls, $Report_FooterControls, $Report_HeaderControls;
    public $Page_FooterControls, $Page_HeaderControls;
    public $Sex_HeaderControls, $Sex_FooterControls;
//End NewBorn39 Variables

//Class_Initialize Event @730-71C5FDEE
    function clsReportNewBorn39($RelativePath = "", & $Parent)
    {
        global $FileName;
        global $CCSLocales;
        global $DefaultDateFormat;
        $this->ComponentName = "NewBorn39";
        $this->Visible = True;
        $this->Parent = & $Parent;
        $this->RelativePath = $RelativePath;
        $this->Attributes = new clsAttributes($this->ComponentName . ":");
        $this->Detail = new clsSection($this);
        $MinPageSize = 0;
        $MaxSectionSize = 0;
        $this->Detail->Height = 1;
        $MaxSectionSize = max($MaxSectionSize, $this->Detail->Height);
        $this->Report_Footer = new clsSection($this);
        $this->Report_Header = new clsSection($this);
        $this->Page_Footer = new clsSection($this);
        $this->Page_Footer->Height = 1;
        $MinPageSize += $this->Page_Footer->Height;
        $this->Page_Header = new clsSection($this);
        $this->Page_Header->Height = 1;
        $MinPageSize += $this->Page_Header->Height;
        $this->Sex_Footer = new clsSection($this);
        $this->Sex_Footer->Height = 1;
        $MaxSectionSize = max($MaxSectionSize, $this->Sex_Footer->Height);
        $this->Sex_Header = new clsSection($this);
        $this->Sex_Header->Height = 1;
        $MaxSectionSize = max($MaxSectionSize, $this->Sex_Header->Height);
        $this->Errors = new clsErrors();
        $this->DataSource = new clsNewBorn39DataSource($this);
        $this->ds = & $this->DataSource;
        $PageSize = CCGetParam($this->ComponentName . "PageSize", "");
        if(is_numeric($PageSize) && $PageSize > 0) {
            $this->PageSize = $PageSize;
        } else {
            if (!is_numeric($PageSize) || $PageSize < 0)
                $this->PageSize = 0;
             else if ($PageSize == "0")
                $this->PageSize = 0;
             else 
                $this->PageSize = $PageSize;
        }
        $MinPageSize += $MaxSectionSize;
        if ($this->PageSize && $MinPageSize && $this->PageSize < $MinPageSize)
            $this->PageSize = $MinPageSize;
        $this->PageNumber = $this->ViewMode == "Print" ? 1 : intval(CCGetParam($this->ComponentName . "Page", 1));
        if ($this->PageNumber <= 0 ) {
            $this->PageNumber = 1;
        }
        $this->Visible = (CCSecurityAccessCheck("1;2") == "success");

        $this->Report_TotalRecords = new clsControl(ccsReportLabel, "Report_TotalRecords", "Report_TotalRecords", ccsText, "", 0, $this);
        $this->Report_TotalRecords->TotalFunction = "Count";
        $this->Report_TotalRecords->IsEmptySource = true;
        $this->NoRecords = new clsPanel("NoRecords", $this);
        $this->GroupSex2 = new clsControl(ccsReportLabel, "GroupSex2", "GroupSex2", ccsInteger, "", "", $this);
        $this->CountGroupSex = new clsControl(ccsReportLabel, "CountGroupSex", "CountGroupSex", ccsText, "", 0, $this);
        $this->CountGroupSex->TotalFunction = "Count";
    }
//End Class_Initialize Event

//Initialize Method @730-6C59EE65
    function Initialize()
    {
        if(!$this->Visible) return;

        $this->DataSource->PageSize = $this->PageSize;
        $this->DataSource->AbsolutePage = $this->PageNumber;
        $this->DataSource->SetOrder($this->SorterName, $this->SorterDirection);
    }
//End Initialize Method

//CheckErrors Method @730-CD002B70
    function CheckErrors()
    {
        $errors = false;
        $errors = ($errors || $this->Report_TotalRecords->Errors->Count());
        $errors = ($errors || $this->GroupSex2->Errors->Count());
        $errors = ($errors || $this->CountGroupSex->Errors->Count());
        $errors = ($errors || $this->Errors->Count());
        $errors = ($errors || $this->DataSource->Errors->Count());
        return $errors;
    }
//End CheckErrors Method

//GetErrors Method @730-B2E862A1
    function GetErrors()
    {
        $errors = "";
        $errors = ComposeStrings($errors, $this->Report_TotalRecords->Errors->ToString());
        $errors = ComposeStrings($errors, $this->GroupSex2->Errors->ToString());
        $errors = ComposeStrings($errors, $this->CountGroupSex->Errors->ToString());
        $errors = ComposeStrings($errors, $this->Errors->ToString());
        $errors = ComposeStrings($errors, $this->DataSource->Errors->ToString());
        return $errors;
    }
//End GetErrors Method

//Show Method @730-9B28AD1B
    function Show()
    {
        global $Tpl;
        global $CCSLocales;
        if(!$this->Visible) return;

        $ShownRecords = 0;

        $this->DataSource->Parameters["urls_BirthDate"] = CCGetFromGet("s_BirthDate", NULL);
        $this->DataSource->Parameters["urls_BirthDate1"] = CCGetFromGet("s_BirthDate1", NULL);
        $this->DataSource->Parameters["urls_FacilityName"] = CCGetFromGet("s_FacilityName", NULL);

        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeSelect", $this);


        $this->DataSource->Prepare();
        $this->DataSource->Open();

        $SexKey = "";
        $Groups = new clsGroupsCollectionNewBorn39($this);
        $Groups->PageSize = $this->PageSize > 0 ? $this->PageSize : 0;

        $is_next_record = $this->DataSource->next_record();
        $this->IsEmpty = ! $is_next_record;
        while($is_next_record) {
            $this->DataSource->SetValues();
            $this->GroupSex2->SetValue($this->DataSource->GroupSex2->GetValue());
            $this->CountGroupSex->SetValue($this->DataSource->CountGroupSex->GetValue());
            $this->Report_TotalRecords->SetValue(1);
            if (count($Groups->Groups) == 0) $Groups->OpenGroup("Report");
            if (count($Groups->Groups) == 2 or $SexKey != $this->DataSource->f("Sex")) {
                $Groups->OpenGroup("Sex");
            }
            $Groups->AddItem();
            $SexKey = $this->DataSource->f("Sex");
            $is_next_record = $this->DataSource->next_record();
            if (!$is_next_record || $SexKey != $this->DataSource->f("Sex")) {
                $Groups->CloseGroup("Sex");
            }
        }
        if (!count($Groups->Groups)) 
            $Groups->OpenGroup("Report");
        else
            $this->NoRecords->Visible = false;
        $Groups->CloseGroup("Report");
        $this->TotalPages = $Groups->TotalPages;
        $this->TotalRows = $Groups->TotalRows;

        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeShow", $this);
        if(!$this->Visible) return;

        $this->Attributes->Show();
        $ReportBlock = "Report " . $this->ComponentName;
        $ParentPath = $Tpl->block_path;
        $Tpl->block_path = $ParentPath . "/" . $ReportBlock;

        if($this->CheckErrors()) {
            $Tpl->replaceblock("", $this->GetErrors());
            $Tpl->block_path = $ParentPath;
            return;
        } else {
            $items = & $Groups->Groups;
            $i = $Groups->Pages[min($this->PageNumber, $Groups->TotalPages) - 1];
            $this->ControlsVisible["GroupSex2"] = $this->GroupSex2->Visible;
            $this->ControlsVisible["CountGroupSex"] = $this->CountGroupSex->Visible;
            do {
                $this->Attributes->RestoreFromArray($items[$i]->Attributes);
                $this->RowNumber = $items[$i]->RowNumber;
                switch ($items[$i]->GroupType) {
                    Case "":
                        $this->Detail->CCSEventResult = CCGetEvent($this->Detail->CCSEvents, "BeforeShow", $this->Detail);
                        if ($this->Detail->Visible) {
                            $this->Attributes->Show();
                            $Tpl->parseto("Section Detail", true, "Section Detail");
                        }
                        break;
                    case "Report":
                        if ($items[$i]->Mode == 1) {
                            $this->Report_TotalRecords->SetValue($items[$i]->Report_TotalRecords);
                            $this->Report_TotalRecords->Attributes->RestoreFromArray($items[$i]->_Report_TotalRecordsAttributes);
                            $this->Report_Header->CCSEventResult = CCGetEvent($this->Report_Header->CCSEvents, "BeforeShow", $this->Report_Header);
                            if ($this->Report_Header->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Report_Header";
                                $this->Attributes->Show();
                                $this->Report_TotalRecords->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Report_Header", true, "Section Detail");
                            }
                        }
                        if ($items[$i]->Mode == 2) {
                            $this->Report_Footer->CCSEventResult = CCGetEvent($this->Report_Footer->CCSEvents, "BeforeShow", $this->Report_Footer);
                            if ($this->Report_Footer->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Report_Footer";
                                $this->NoRecords->Show();
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Report_Footer", true, "Section Detail");
                            }
                        }
                        break;
                    case "Page":
                        if ($items[$i]->Mode == 1) {
                            $this->Page_Header->CCSEventResult = CCGetEvent($this->Page_Header->CCSEvents, "BeforeShow", $this->Page_Header);
                            if ($this->Page_Header->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Page_Header";
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Page_Header", true, "Section Detail");
                            }
                        }
                        if ($items[$i]->Mode == 2 && !$this->UseClientPaging || $items[$i]->Mode == 1 && $this->UseClientPaging) {
                            $this->Page_Footer->CCSEventResult = CCGetEvent($this->Page_Footer->CCSEvents, "BeforeShow", $this->Page_Footer);
                            if ($this->Page_Footer->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Page_Footer";
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Page_Footer", true, "Section Detail");
                            }
                        }
                        break;
                    case "Sex":
                        if ($items[$i]->Mode == 1) {
                            $this->GroupSex2->SetValue($items[$i]->GroupSex2);
                            $this->GroupSex2->Attributes->RestoreFromArray($items[$i]->_GroupSex2Attributes);
                            $this->CountGroupSex->SetValue($items[$i]->CountGroupSex);
                            $this->CountGroupSex->Attributes->RestoreFromArray($items[$i]->_CountGroupSexAttributes);
                            $this->Sex_Header->CCSEventResult = CCGetEvent($this->Sex_Header->CCSEvents, "BeforeShow", $this->Sex_Header);
                            if ($this->Sex_Header->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Sex_Header";
                                $this->Attributes->Show();
                                $this->GroupSex2->Show();
                                $this->CountGroupSex->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Sex_Header", true, "Section Detail");
                            }
                        }
                        if ($items[$i]->Mode == 2) {
                            $this->Sex_Footer->CCSEventResult = CCGetEvent($this->Sex_Footer->CCSEvents, "BeforeShow", $this->Sex_Footer);
                            if ($this->Sex_Footer->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Sex_Footer";
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Sex_Footer", true, "Section Detail");
                            }
                        }
                        break;
                }
                $i++;
            } while ($i < count($items) && ($this->ViewMode == "Print" ||  !($i > 1 && $items[$i]->GroupType == 'Page' && $items[$i]->Mode == 1)));
            $Tpl->block_path = $ParentPath;
            $Tpl->parse($ReportBlock);
            $this->DataSource->close();
        }

    }
//End Show Method

} //End NewBorn39 Class @730-FCB6E20C

class clsNewBorn39DataSource extends clsDBregistry_db {  //NewBorn39DataSource Class @730-D5033D68

//DataSource Variables @730-F5055419
    public $Parent = "";
    public $CCSEvents = "";
    public $CCSEventResult;
    public $ErrorBlock;
    public $CmdExecution;

    public $wp;


    // Datasource fields
    public $GroupSex2;
    public $CountGroupSex;
//End DataSource Variables

//DataSourceClass_Initialize Event @730-0F93A131
    function clsNewBorn39DataSource(& $Parent)
    {
        $this->Parent = & $Parent;
        $this->ErrorBlock = "Report NewBorn39";
        $this->Initialize();
        $this->GroupSex2 = new clsField("GroupSex2", ccsInteger, "");
        
        $this->CountGroupSex = new clsField("CountGroupSex", ccsText, "");
        

    }
//End DataSourceClass_Initialize Event

//SetOrder Method @730-9E1383D1
    function SetOrder($SorterName, $SorterDirection)
    {
        $this->Order = "";
        $this->Order = CCGetOrder($this->Order, $SorterName, $SorterDirection, 
            "");
    }
//End SetOrder Method

//Prepare Method @730-C883AF39
    function Prepare()
    {
        global $CCSLocales;
        global $DefaultDateFormat;
        $this->wp = new clsSQLParameters($this->ErrorBlock);
        $this->wp->AddParameter("3", "urls_BirthDate", ccsDate, array("ShortDate"), array("yyyy", "-", "mm", "-", "dd", " ", "HH", ":", "nn", ":", "ss"), $this->Parameters["urls_BirthDate"], "", false);
        $this->wp->AddParameter("4", "urls_BirthDate1", ccsDate, array("ShortDate"), array("yyyy", "-", "mm", "-", "dd", " ", "HH", ":", "nn", ":", "ss"), $this->Parameters["urls_BirthDate1"], "", false);
        $this->wp->AddParameter("7", "urls_FacilityName", ccsText, "", "", $this->Parameters["urls_FacilityName"], "", false);
        $this->wp->Criterion[1] = "( newborn.Weight>=1000 )";
        $this->wp->Criterion[2] = "( newborn.Weight<=1499 )";
        $this->wp->Criterion[3] = $this->wp->Operation(opGreaterThanOrEqual, "newborn.BirthDate", $this->wp->GetDBValue("3"), $this->ToSQL($this->wp->GetDBValue("3"), ccsDate),false);
        $this->wp->Criterion[4] = $this->wp->Operation(opLessThanOrEqual, "newborn.BirthDate", $this->wp->GetDBValue("4"), $this->ToSQL($this->wp->GetDBValue("4"), ccsDate),false);
        $this->wp->Criterion[5] = "( newborn.Died=1 )";
        $this->wp->Criterion[6] = "( newborn.DiedID=1 )";
        $this->wp->Criterion[7] = $this->wp->Operation(opEqual, "facilities.FacilityName", $this->wp->GetDBValue("7"), $this->ToSQL($this->wp->GetDBValue("7"), ccsText),false);
        $this->Where = $this->wp->opAND(
             false, $this->wp->opAND(
             false, $this->wp->opAND(
             false, $this->wp->opAND(
             false, $this->wp->opAND(
             false, $this->wp->opAND(
             false, 
             $this->wp->Criterion[1], 
             $this->wp->Criterion[2]), 
             $this->wp->Criterion[3]), 
             $this->wp->Criterion[4]), 
             $this->wp->Criterion[5]), 
             $this->wp->Criterion[6]), 
             $this->wp->Criterion[7]);
    }
//End Prepare Method

//Open Method @730-CA3C9D7B
    function Open()
    {
        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeBuildSelect", $this->Parent);
        $this->SQL = "SELECT delivery.DeliveryID AS delivery_DeliveryID, FacilityName, Sex, NewBornID, BirthDate, Weight \n\n" .
        "FROM (delivery INNER JOIN facilities ON\n\n" .
        "delivery.FacilityID = facilities.FacilityID) INNER JOIN newborn ON\n\n" .
        "newborn.DeliveryID = delivery.DeliveryID {SQL_Where} {SQL_OrderBy}";
        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeExecuteSelect", $this->Parent);
        $this->query(CCBuildSQL($this->SQL, $this->Where, "newborn.Sex asc" .  ($this->Order ? ", " . $this->Order: "")));
        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "AfterExecuteSelect", $this->Parent);
    }
//End Open Method

//SetValues Method @730-F73A025D
    function SetValues()
    {
        $this->GroupSex2->SetDBValue(trim($this->f("Sex")));
        $this->CountGroupSex->SetDBValue($this->f("Sex"));
    }
//End SetValues Method

} //End NewBorn39DataSource Class @730-FCB6E20C

//NewBorn40 ReportGroup class @794-D9E5FC66
class clsReportGroupNewBorn40 {
    public $GroupType;
    public $mode; //1 - open, 2 - close
    public $Report_TotalRecords, $_Report_TotalRecordsAttributes;
    public $GroupSex2, $_GroupSex2Attributes;
    public $CountGroupSex, $_CountGroupSexAttributes;
    public $Attributes;
    public $ReportTotalIndex = 0;
    public $PageTotalIndex;
    public $PageNumber;
    public $RowNumber;
    public $Parent;
    public $SexTotalIndex;

    function clsReportGroupNewBorn40(& $parent) {
        $this->Parent = & $parent;
        $this->Attributes = $this->Parent->Attributes->GetAsArray();
    }
    function SetControls($PrevGroup = "") {
        $this->GroupSex2 = $this->Parent->GroupSex2->Value;
    }

    function SetTotalControls($mode = "", $PrevGroup = "") {
        $this->Report_TotalRecords = $this->Parent->Report_TotalRecords->GetTotalValue($mode);
        $this->CountGroupSex = $this->Parent->CountGroupSex->GetTotalValue($mode);
        $this->_Report_TotalRecordsAttributes = $this->Parent->Report_TotalRecords->Attributes->GetAsArray();
        $this->_GroupSex2Attributes = $this->Parent->GroupSex2->Attributes->GetAsArray();
        $this->_CountGroupSexAttributes = $this->Parent->CountGroupSex->Attributes->GetAsArray();
    }
    function SyncWithHeader(& $Header) {
        $Header->Report_TotalRecords = $this->Report_TotalRecords;
        $Header->_Report_TotalRecordsAttributes = $this->_Report_TotalRecordsAttributes;
        $Header->CountGroupSex = $this->CountGroupSex;
        $Header->_CountGroupSexAttributes = $this->_CountGroupSexAttributes;
        $this->GroupSex2 = $Header->GroupSex2;
        $Header->_GroupSex2Attributes = $this->_GroupSex2Attributes;
        $this->Parent->GroupSex2->Value = $Header->GroupSex2;
        $this->Parent->GroupSex2->Attributes->RestoreFromArray($Header->_GroupSex2Attributes);
    }
    function ChangeTotalControls() {
        $this->Report_TotalRecords = $this->Parent->Report_TotalRecords->GetValue();
        $this->CountGroupSex = $this->Parent->CountGroupSex->GetValue();
    }
}
//End NewBorn40 ReportGroup class

//NewBorn40 GroupsCollection class @794-4221FE90
class clsGroupsCollectionNewBorn40 {
    public $Groups;
    public $mPageCurrentHeaderIndex;
    public $mSexCurrentHeaderIndex;
    public $PageSize;
    public $TotalPages = 0;
    public $TotalRows = 0;
    public $CurrentPageSize = 0;
    public $Pages;
    public $Parent;
    public $LastDetailIndex;

    function clsGroupsCollectionNewBorn40(& $parent) {
        $this->Parent = & $parent;
        $this->Groups = array();
        $this->Pages  = array();
        $this->mSexCurrentHeaderIndex = 1;
        $this->mReportTotalIndex = 0;
        $this->mPageTotalIndex = 1;
    }

    function & InitGroup() {
        $group = new clsReportGroupNewBorn40($this->Parent);
        $group->RowNumber = $this->TotalRows + 1;
        $group->PageNumber = $this->TotalPages;
        $group->PageTotalIndex = $this->mPageCurrentHeaderIndex;
        $group->SexTotalIndex = $this->mSexCurrentHeaderIndex;
        return $group;
    }

    function RestoreValues() {
        $this->Parent->Report_TotalRecords->Value = $this->Parent->Report_TotalRecords->initialValue;
        $this->Parent->GroupSex2->Value = $this->Parent->GroupSex2->initialValue;
        $this->Parent->CountGroupSex->Value = $this->Parent->CountGroupSex->initialValue;
    }

    function OpenPage() {
        $this->TotalPages++;
        $Group = & $this->InitGroup();
        $this->Parent->Page_Header->CCSEventResult = CCGetEvent($this->Parent->Page_Header->CCSEvents, "OnInitialize", $this->Parent->Page_Header);
        if ($this->Parent->Page_Header->Visible)
            $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Page_Header->Height;
        $Group->SetTotalControls("GetNextValue");
        $this->Parent->Page_Header->CCSEventResult = CCGetEvent($this->Parent->Page_Header->CCSEvents, "OnCalculate", $this->Parent->Page_Header);
        $Group->SetControls();
        $Group->Mode = 1;
        $Group->GroupType = "Page";
        $Group->PageTotalIndex = count($this->Groups);
        $this->mPageCurrentHeaderIndex = count($this->Groups);
        $this->Groups[] =  & $Group;
        $this->Pages[] =  count($this->Groups) == 2 ? 0 : count($this->Groups) - 1;
    }

    function OpenGroup($groupName) {
        $Group = "";
        $OpenFlag = false;
        if ($groupName == "Report") {
            $Group = & $this->InitGroup(true);
            $this->Parent->Report_Header->CCSEventResult = CCGetEvent($this->Parent->Report_Header->CCSEvents, "OnInitialize", $this->Parent->Report_Header);
            if ($this->Parent->Report_Header->Visible) 
                $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Report_Header->Height;
                $Group->SetTotalControls("GetNextValue");
            $this->Parent->Report_Header->CCSEventResult = CCGetEvent($this->Parent->Report_Header->CCSEvents, "OnCalculate", $this->Parent->Report_Header);
            $Group->SetControls();
            $Group->Mode = 1;
            $Group->GroupType = "Report";
            $this->Groups[] = & $Group;
            $this->OpenPage();
        }
        if ($groupName == "Sex") {
            $GroupSex = & $this->InitGroup(true);
            $this->Parent->Sex_Header->CCSEventResult = CCGetEvent($this->Parent->Sex_Header->CCSEvents, "OnInitialize", $this->Parent->Sex_Header);
            if ($this->Parent->Page_Footer->Visible) 
                $OverSize = $this->Parent->Sex_Header->Height + $this->Parent->Page_Footer->Height;
            else
                $OverSize = $this->Parent->Sex_Header->Height;
            if (($this->PageSize > 0) and $this->Parent->Sex_Header->Visible and ($this->CurrentPageSize + $OverSize > $this->PageSize)) {
                $this->ClosePage();
                $this->OpenPage();
            }
            if ($this->Parent->Sex_Header->Visible)
                $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Sex_Header->Height;
                $GroupSex->SetTotalControls("GetNextValue");
            $this->Parent->Sex_Header->CCSEventResult = CCGetEvent($this->Parent->Sex_Header->CCSEvents, "OnCalculate", $this->Parent->Sex_Header);
            $GroupSex->SetControls();
            $GroupSex->Mode = 1;
            $GroupSex->GroupType = "Sex";
            $this->mSexCurrentHeaderIndex = count($this->Groups);
            $this->Groups[] = & $GroupSex;
            $this->Parent->CountGroupSex->Reset();
        }
    }

    function ClosePage() {
        $Group = & $this->InitGroup();
        $this->Parent->Page_Footer->CCSEventResult = CCGetEvent($this->Parent->Page_Footer->CCSEvents, "OnInitialize", $this->Parent->Page_Footer);
        $Group->SetTotalControls("GetPrevValue");
        $Group->SyncWithHeader($this->Groups[$this->mPageCurrentHeaderIndex]);
        $this->Parent->Page_Footer->CCSEventResult = CCGetEvent($this->Parent->Page_Footer->CCSEvents, "OnCalculate", $this->Parent->Page_Footer);
        $Group->SetControls();
        $this->RestoreValues();
        $this->CurrentPageSize = 0;
        $Group->Mode = 2;
        $Group->GroupType = "Page";
        $this->Groups[] = & $Group;
    }

    function CloseGroup($groupName)
    {
        $Group = "";
        if ($groupName == "Report") {
            $Group = & $this->InitGroup(true);
            $this->Parent->Report_Footer->CCSEventResult = CCGetEvent($this->Parent->Report_Footer->CCSEvents, "OnInitialize", $this->Parent->Report_Footer);
            if ($this->Parent->Page_Footer->Visible) 
                $OverSize = $this->Parent->Report_Footer->Height + $this->Parent->Page_Footer->Height;
            else
                $OverSize = $this->Parent->Report_Footer->Height;
            if (($this->PageSize > 0) and $this->Parent->Report_Footer->Visible and ($this->CurrentPageSize + $OverSize > $this->PageSize)) {
                $this->ClosePage();
                $this->OpenPage();
            }
            $Group->SetTotalControls("GetPrevValue");
            $Group->SyncWithHeader($this->Groups[0]);
            if ($this->Parent->Report_Footer->Visible)
                $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Report_Footer->Height;
            $this->Parent->Report_Footer->CCSEventResult = CCGetEvent($this->Parent->Report_Footer->CCSEvents, "OnCalculate", $this->Parent->Report_Footer);
            $Group->SetControls();
            $this->RestoreValues();
            $Group->Mode = 2;
            $Group->GroupType = "Report";
            $this->Groups[] = & $Group;
            $this->ClosePage();
            return;
        }
        $GroupSex = & $this->InitGroup(true);
        $this->Parent->Sex_Footer->CCSEventResult = CCGetEvent($this->Parent->Sex_Footer->CCSEvents, "OnInitialize", $this->Parent->Sex_Footer);
        if ($this->Parent->Page_Footer->Visible) 
            $OverSize = $this->Parent->Sex_Footer->Height + $this->Parent->Page_Footer->Height;
        else
            $OverSize = $this->Parent->Sex_Footer->Height;
        if (($this->PageSize > 0) and $this->Parent->Sex_Footer->Visible and ($this->CurrentPageSize + $OverSize > $this->PageSize)) {
            $this->ClosePage();
            $this->OpenPage();
        }
        $GroupSex->SetTotalControls("GetPrevValue");
        $GroupSex->SyncWithHeader($this->Groups[$this->mSexCurrentHeaderIndex]);
        if ($this->Parent->Sex_Footer->Visible)
            $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Sex_Footer->Height;
        $this->Parent->Sex_Footer->CCSEventResult = CCGetEvent($this->Parent->Sex_Footer->CCSEvents, "OnCalculate", $this->Parent->Sex_Footer);
        $GroupSex->SetControls();
        $this->Parent->CountGroupSex->Reset();
        $this->RestoreValues();
        $GroupSex->Mode = 2;
        $GroupSex->GroupType ="Sex";
        $this->Groups[] = & $GroupSex;
    }

    function AddItem()
    {
        $Group = & $this->InitGroup(true);
        $this->Parent->Detail->CCSEventResult = CCGetEvent($this->Parent->Detail->CCSEvents, "OnInitialize", $this->Parent->Detail);
        if ($this->Parent->Page_Footer->Visible) 
            $OverSize = $this->Parent->Detail->Height + $this->Parent->Page_Footer->Height;
        else
            $OverSize = $this->Parent->Detail->Height;
        if (($this->PageSize > 0) and $this->Parent->Detail->Visible and ($this->CurrentPageSize + $OverSize > $this->PageSize)) {
            $this->ClosePage();
            $this->OpenPage();
        }
        $this->TotalRows++;
        if ($this->LastDetailIndex)
            $PrevGroup = & $this->Groups[$this->LastDetailIndex];
        else
            $PrevGroup = "";
        $Group->SetTotalControls("", $PrevGroup);
        if ($this->Parent->Detail->Visible)
            $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Detail->Height;
        $this->Parent->Detail->CCSEventResult = CCGetEvent($this->Parent->Detail->CCSEvents, "OnCalculate", $this->Parent->Detail);
        $Group->SetControls($PrevGroup);
        $this->LastDetailIndex = count($this->Groups);
        $this->Groups[] = & $Group;
    }
}
//End NewBorn40 GroupsCollection class

class clsReportNewBorn40 { //NewBorn40 Class @794-44825593

//NewBorn40 Variables @794-80D63D80

    public $ComponentType = "Report";
    public $PageSize;
    public $ComponentName;
    public $Visible;
    public $Errors;
    public $CCSEvents = array();
    public $CCSEventResult;
    public $RelativePath = "";
    public $ViewMode = "Web";
    public $TemplateBlock;
    public $PageNumber;
    public $RowNumber;
    public $TotalRows;
    public $TotalPages;
    public $ControlsVisible = array();
    public $IsEmpty;
    public $Attributes;
    public $DetailBlock, $Detail;
    public $Report_FooterBlock, $Report_Footer;
    public $Report_HeaderBlock, $Report_Header;
    public $Page_FooterBlock, $Page_Footer;
    public $Page_HeaderBlock, $Page_Header;
    public $Sex_HeaderBlock, $Sex_Header;
    public $Sex_FooterBlock, $Sex_Footer;
    public $SorterName, $SorterDirection;

    public $ds;
    public $DataSource;
    public $UseClientPaging = false;

    //Report Controls
    public $StaticControls, $RowControls, $Report_FooterControls, $Report_HeaderControls;
    public $Page_FooterControls, $Page_HeaderControls;
    public $Sex_HeaderControls, $Sex_FooterControls;
//End NewBorn40 Variables

//Class_Initialize Event @794-3D0E43B0
    function clsReportNewBorn40($RelativePath = "", & $Parent)
    {
        global $FileName;
        global $CCSLocales;
        global $DefaultDateFormat;
        $this->ComponentName = "NewBorn40";
        $this->Visible = True;
        $this->Parent = & $Parent;
        $this->RelativePath = $RelativePath;
        $this->Attributes = new clsAttributes($this->ComponentName . ":");
        $this->Detail = new clsSection($this);
        $MinPageSize = 0;
        $MaxSectionSize = 0;
        $this->Detail->Height = 1;
        $MaxSectionSize = max($MaxSectionSize, $this->Detail->Height);
        $this->Report_Footer = new clsSection($this);
        $this->Report_Header = new clsSection($this);
        $this->Page_Footer = new clsSection($this);
        $this->Page_Footer->Height = 1;
        $MinPageSize += $this->Page_Footer->Height;
        $this->Page_Header = new clsSection($this);
        $this->Page_Header->Height = 1;
        $MinPageSize += $this->Page_Header->Height;
        $this->Sex_Footer = new clsSection($this);
        $this->Sex_Footer->Height = 1;
        $MaxSectionSize = max($MaxSectionSize, $this->Sex_Footer->Height);
        $this->Sex_Header = new clsSection($this);
        $this->Sex_Header->Height = 1;
        $MaxSectionSize = max($MaxSectionSize, $this->Sex_Header->Height);
        $this->Errors = new clsErrors();
        $this->DataSource = new clsNewBorn40DataSource($this);
        $this->ds = & $this->DataSource;
        $PageSize = CCGetParam($this->ComponentName . "PageSize", "");
        if(is_numeric($PageSize) && $PageSize > 0) {
            $this->PageSize = $PageSize;
        } else {
            if (!is_numeric($PageSize) || $PageSize < 0)
                $this->PageSize = 0;
             else if ($PageSize == "0")
                $this->PageSize = 0;
             else 
                $this->PageSize = $PageSize;
        }
        $MinPageSize += $MaxSectionSize;
        if ($this->PageSize && $MinPageSize && $this->PageSize < $MinPageSize)
            $this->PageSize = $MinPageSize;
        $this->PageNumber = $this->ViewMode == "Print" ? 1 : intval(CCGetParam($this->ComponentName . "Page", 1));
        if ($this->PageNumber <= 0 ) {
            $this->PageNumber = 1;
        }
        $this->Visible = (CCSecurityAccessCheck("1;2") == "success");

        $this->Report_TotalRecords = new clsControl(ccsReportLabel, "Report_TotalRecords", "Report_TotalRecords", ccsText, "", 0, $this);
        $this->Report_TotalRecords->TotalFunction = "Count";
        $this->Report_TotalRecords->IsEmptySource = true;
        $this->NoRecords = new clsPanel("NoRecords", $this);
        $this->GroupSex2 = new clsControl(ccsReportLabel, "GroupSex2", "GroupSex2", ccsInteger, "", "", $this);
        $this->CountGroupSex = new clsControl(ccsReportLabel, "CountGroupSex", "CountGroupSex", ccsText, "", 0, $this);
        $this->CountGroupSex->TotalFunction = "Count";
    }
//End Class_Initialize Event

//Initialize Method @794-6C59EE65
    function Initialize()
    {
        if(!$this->Visible) return;

        $this->DataSource->PageSize = $this->PageSize;
        $this->DataSource->AbsolutePage = $this->PageNumber;
        $this->DataSource->SetOrder($this->SorterName, $this->SorterDirection);
    }
//End Initialize Method

//CheckErrors Method @794-CD002B70
    function CheckErrors()
    {
        $errors = false;
        $errors = ($errors || $this->Report_TotalRecords->Errors->Count());
        $errors = ($errors || $this->GroupSex2->Errors->Count());
        $errors = ($errors || $this->CountGroupSex->Errors->Count());
        $errors = ($errors || $this->Errors->Count());
        $errors = ($errors || $this->DataSource->Errors->Count());
        return $errors;
    }
//End CheckErrors Method

//GetErrors Method @794-B2E862A1
    function GetErrors()
    {
        $errors = "";
        $errors = ComposeStrings($errors, $this->Report_TotalRecords->Errors->ToString());
        $errors = ComposeStrings($errors, $this->GroupSex2->Errors->ToString());
        $errors = ComposeStrings($errors, $this->CountGroupSex->Errors->ToString());
        $errors = ComposeStrings($errors, $this->Errors->ToString());
        $errors = ComposeStrings($errors, $this->DataSource->Errors->ToString());
        return $errors;
    }
//End GetErrors Method

//Show Method @794-0D17DC46
    function Show()
    {
        global $Tpl;
        global $CCSLocales;
        if(!$this->Visible) return;

        $ShownRecords = 0;

        $this->DataSource->Parameters["urls_BirthDate"] = CCGetFromGet("s_BirthDate", NULL);
        $this->DataSource->Parameters["urls_BirthDate1"] = CCGetFromGet("s_BirthDate1", NULL);
        $this->DataSource->Parameters["urls_FacilityName"] = CCGetFromGet("s_FacilityName", NULL);

        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeSelect", $this);


        $this->DataSource->Prepare();
        $this->DataSource->Open();

        $SexKey = "";
        $Groups = new clsGroupsCollectionNewBorn40($this);
        $Groups->PageSize = $this->PageSize > 0 ? $this->PageSize : 0;

        $is_next_record = $this->DataSource->next_record();
        $this->IsEmpty = ! $is_next_record;
        while($is_next_record) {
            $this->DataSource->SetValues();
            $this->GroupSex2->SetValue($this->DataSource->GroupSex2->GetValue());
            $this->CountGroupSex->SetValue($this->DataSource->CountGroupSex->GetValue());
            $this->Report_TotalRecords->SetValue(1);
            if (count($Groups->Groups) == 0) $Groups->OpenGroup("Report");
            if (count($Groups->Groups) == 2 or $SexKey != $this->DataSource->f("Sex")) {
                $Groups->OpenGroup("Sex");
            }
            $Groups->AddItem();
            $SexKey = $this->DataSource->f("Sex");
            $is_next_record = $this->DataSource->next_record();
            if (!$is_next_record || $SexKey != $this->DataSource->f("Sex")) {
                $Groups->CloseGroup("Sex");
            }
        }
        if (!count($Groups->Groups)) 
            $Groups->OpenGroup("Report");
        else
            $this->NoRecords->Visible = false;
        $Groups->CloseGroup("Report");
        $this->TotalPages = $Groups->TotalPages;
        $this->TotalRows = $Groups->TotalRows;

        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeShow", $this);
        if(!$this->Visible) return;

        $this->Attributes->Show();
        $ReportBlock = "Report " . $this->ComponentName;
        $ParentPath = $Tpl->block_path;
        $Tpl->block_path = $ParentPath . "/" . $ReportBlock;

        if($this->CheckErrors()) {
            $Tpl->replaceblock("", $this->GetErrors());
            $Tpl->block_path = $ParentPath;
            return;
        } else {
            $items = & $Groups->Groups;
            $i = $Groups->Pages[min($this->PageNumber, $Groups->TotalPages) - 1];
            $this->ControlsVisible["GroupSex2"] = $this->GroupSex2->Visible;
            $this->ControlsVisible["CountGroupSex"] = $this->CountGroupSex->Visible;
            do {
                $this->Attributes->RestoreFromArray($items[$i]->Attributes);
                $this->RowNumber = $items[$i]->RowNumber;
                switch ($items[$i]->GroupType) {
                    Case "":
                        $this->Detail->CCSEventResult = CCGetEvent($this->Detail->CCSEvents, "BeforeShow", $this->Detail);
                        if ($this->Detail->Visible) {
                            $this->Attributes->Show();
                            $Tpl->parseto("Section Detail", true, "Section Detail");
                        }
                        break;
                    case "Report":
                        if ($items[$i]->Mode == 1) {
                            $this->Report_TotalRecords->SetValue($items[$i]->Report_TotalRecords);
                            $this->Report_TotalRecords->Attributes->RestoreFromArray($items[$i]->_Report_TotalRecordsAttributes);
                            $this->Report_Header->CCSEventResult = CCGetEvent($this->Report_Header->CCSEvents, "BeforeShow", $this->Report_Header);
                            if ($this->Report_Header->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Report_Header";
                                $this->Attributes->Show();
                                $this->Report_TotalRecords->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Report_Header", true, "Section Detail");
                            }
                        }
                        if ($items[$i]->Mode == 2) {
                            $this->Report_Footer->CCSEventResult = CCGetEvent($this->Report_Footer->CCSEvents, "BeforeShow", $this->Report_Footer);
                            if ($this->Report_Footer->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Report_Footer";
                                $this->NoRecords->Show();
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Report_Footer", true, "Section Detail");
                            }
                        }
                        break;
                    case "Page":
                        if ($items[$i]->Mode == 1) {
                            $this->Page_Header->CCSEventResult = CCGetEvent($this->Page_Header->CCSEvents, "BeforeShow", $this->Page_Header);
                            if ($this->Page_Header->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Page_Header";
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Page_Header", true, "Section Detail");
                            }
                        }
                        if ($items[$i]->Mode == 2 && !$this->UseClientPaging || $items[$i]->Mode == 1 && $this->UseClientPaging) {
                            $this->Page_Footer->CCSEventResult = CCGetEvent($this->Page_Footer->CCSEvents, "BeforeShow", $this->Page_Footer);
                            if ($this->Page_Footer->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Page_Footer";
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Page_Footer", true, "Section Detail");
                            }
                        }
                        break;
                    case "Sex":
                        if ($items[$i]->Mode == 1) {
                            $this->GroupSex2->SetValue($items[$i]->GroupSex2);
                            $this->GroupSex2->Attributes->RestoreFromArray($items[$i]->_GroupSex2Attributes);
                            $this->CountGroupSex->SetValue($items[$i]->CountGroupSex);
                            $this->CountGroupSex->Attributes->RestoreFromArray($items[$i]->_CountGroupSexAttributes);
                            $this->Sex_Header->CCSEventResult = CCGetEvent($this->Sex_Header->CCSEvents, "BeforeShow", $this->Sex_Header);
                            if ($this->Sex_Header->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Sex_Header";
                                $this->Attributes->Show();
                                $this->GroupSex2->Show();
                                $this->CountGroupSex->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Sex_Header", true, "Section Detail");
                            }
                        }
                        if ($items[$i]->Mode == 2) {
                            $this->Sex_Footer->CCSEventResult = CCGetEvent($this->Sex_Footer->CCSEvents, "BeforeShow", $this->Sex_Footer);
                            if ($this->Sex_Footer->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Sex_Footer";
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Sex_Footer", true, "Section Detail");
                            }
                        }
                        break;
                }
                $i++;
            } while ($i < count($items) && ($this->ViewMode == "Print" ||  !($i > 1 && $items[$i]->GroupType == 'Page' && $items[$i]->Mode == 1)));
            $Tpl->block_path = $ParentPath;
            $Tpl->parse($ReportBlock);
            $this->DataSource->close();
        }

    }
//End Show Method

} //End NewBorn40 Class @794-FCB6E20C

class clsNewBorn40DataSource extends clsDBregistry_db {  //NewBorn40DataSource Class @794-8C68A8CC

//DataSource Variables @794-F5055419
    public $Parent = "";
    public $CCSEvents = "";
    public $CCSEventResult;
    public $ErrorBlock;
    public $CmdExecution;

    public $wp;


    // Datasource fields
    public $GroupSex2;
    public $CountGroupSex;
//End DataSource Variables

//DataSourceClass_Initialize Event @794-B2193050
    function clsNewBorn40DataSource(& $Parent)
    {
        $this->Parent = & $Parent;
        $this->ErrorBlock = "Report NewBorn40";
        $this->Initialize();
        $this->GroupSex2 = new clsField("GroupSex2", ccsInteger, "");
        
        $this->CountGroupSex = new clsField("CountGroupSex", ccsText, "");
        

    }
//End DataSourceClass_Initialize Event

//SetOrder Method @794-9E1383D1
    function SetOrder($SorterName, $SorterDirection)
    {
        $this->Order = "";
        $this->Order = CCGetOrder($this->Order, $SorterName, $SorterDirection, 
            "");
    }
//End SetOrder Method

//Prepare Method @794-034E3F58
    function Prepare()
    {
        global $CCSLocales;
        global $DefaultDateFormat;
        $this->wp = new clsSQLParameters($this->ErrorBlock);
        $this->wp->AddParameter("3", "urls_BirthDate", ccsDate, array("ShortDate"), array("yyyy", "-", "mm", "-", "dd", " ", "HH", ":", "nn", ":", "ss"), $this->Parameters["urls_BirthDate"], "", false);
        $this->wp->AddParameter("4", "urls_BirthDate1", ccsDate, array("ShortDate"), array("yyyy", "-", "mm", "-", "dd", " ", "HH", ":", "nn", ":", "ss"), $this->Parameters["urls_BirthDate1"], "", false);
        $this->wp->AddParameter("7", "urls_FacilityName", ccsText, "", "", $this->Parameters["urls_FacilityName"], "", false);
        $this->wp->Criterion[1] = "( newborn.Weight>=1500 )";
        $this->wp->Criterion[2] = "( newborn.Weight<=1999 )";
        $this->wp->Criterion[3] = $this->wp->Operation(opGreaterThanOrEqual, "newborn.BirthDate", $this->wp->GetDBValue("3"), $this->ToSQL($this->wp->GetDBValue("3"), ccsDate),false);
        $this->wp->Criterion[4] = $this->wp->Operation(opLessThanOrEqual, "newborn.BirthDate", $this->wp->GetDBValue("4"), $this->ToSQL($this->wp->GetDBValue("4"), ccsDate),false);
        $this->wp->Criterion[5] = "( newborn.Died=1 )";
        $this->wp->Criterion[6] = "( newborn.DiedID=1 )";
        $this->wp->Criterion[7] = $this->wp->Operation(opEqual, "facilities.FacilityName", $this->wp->GetDBValue("7"), $this->ToSQL($this->wp->GetDBValue("7"), ccsText),false);
        $this->Where = $this->wp->opAND(
             false, $this->wp->opAND(
             false, $this->wp->opAND(
             false, $this->wp->opAND(
             false, $this->wp->opAND(
             false, $this->wp->opAND(
             false, 
             $this->wp->Criterion[1], 
             $this->wp->Criterion[2]), 
             $this->wp->Criterion[3]), 
             $this->wp->Criterion[4]), 
             $this->wp->Criterion[5]), 
             $this->wp->Criterion[6]), 
             $this->wp->Criterion[7]);
    }
//End Prepare Method

//Open Method @794-CA3C9D7B
    function Open()
    {
        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeBuildSelect", $this->Parent);
        $this->SQL = "SELECT delivery.DeliveryID AS delivery_DeliveryID, FacilityName, Sex, NewBornID, BirthDate, Weight \n\n" .
        "FROM (delivery INNER JOIN facilities ON\n\n" .
        "delivery.FacilityID = facilities.FacilityID) INNER JOIN newborn ON\n\n" .
        "newborn.DeliveryID = delivery.DeliveryID {SQL_Where} {SQL_OrderBy}";
        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeExecuteSelect", $this->Parent);
        $this->query(CCBuildSQL($this->SQL, $this->Where, "newborn.Sex asc" .  ($this->Order ? ", " . $this->Order: "")));
        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "AfterExecuteSelect", $this->Parent);
    }
//End Open Method

//SetValues Method @794-F73A025D
    function SetValues()
    {
        $this->GroupSex2->SetDBValue(trim($this->f("Sex")));
        $this->CountGroupSex->SetDBValue($this->f("Sex"));
    }
//End SetValues Method

} //End NewBorn40DataSource Class @794-FCB6E20C

//NewBorn41 ReportGroup class @858-C092815F
class clsReportGroupNewBorn41 {
    public $GroupType;
    public $mode; //1 - open, 2 - close
    public $Report_TotalRecords, $_Report_TotalRecordsAttributes;
    public $GroupSex2, $_GroupSex2Attributes;
    public $CountGroupSex, $_CountGroupSexAttributes;
    public $Attributes;
    public $ReportTotalIndex = 0;
    public $PageTotalIndex;
    public $PageNumber;
    public $RowNumber;
    public $Parent;
    public $SexTotalIndex;

    function clsReportGroupNewBorn41(& $parent) {
        $this->Parent = & $parent;
        $this->Attributes = $this->Parent->Attributes->GetAsArray();
    }
    function SetControls($PrevGroup = "") {
        $this->GroupSex2 = $this->Parent->GroupSex2->Value;
    }

    function SetTotalControls($mode = "", $PrevGroup = "") {
        $this->Report_TotalRecords = $this->Parent->Report_TotalRecords->GetTotalValue($mode);
        $this->CountGroupSex = $this->Parent->CountGroupSex->GetTotalValue($mode);
        $this->_Report_TotalRecordsAttributes = $this->Parent->Report_TotalRecords->Attributes->GetAsArray();
        $this->_GroupSex2Attributes = $this->Parent->GroupSex2->Attributes->GetAsArray();
        $this->_CountGroupSexAttributes = $this->Parent->CountGroupSex->Attributes->GetAsArray();
    }
    function SyncWithHeader(& $Header) {
        $Header->Report_TotalRecords = $this->Report_TotalRecords;
        $Header->_Report_TotalRecordsAttributes = $this->_Report_TotalRecordsAttributes;
        $Header->CountGroupSex = $this->CountGroupSex;
        $Header->_CountGroupSexAttributes = $this->_CountGroupSexAttributes;
        $this->GroupSex2 = $Header->GroupSex2;
        $Header->_GroupSex2Attributes = $this->_GroupSex2Attributes;
        $this->Parent->GroupSex2->Value = $Header->GroupSex2;
        $this->Parent->GroupSex2->Attributes->RestoreFromArray($Header->_GroupSex2Attributes);
    }
    function ChangeTotalControls() {
        $this->Report_TotalRecords = $this->Parent->Report_TotalRecords->GetValue();
        $this->CountGroupSex = $this->Parent->CountGroupSex->GetValue();
    }
}
//End NewBorn41 ReportGroup class

//NewBorn41 GroupsCollection class @858-E5327362
class clsGroupsCollectionNewBorn41 {
    public $Groups;
    public $mPageCurrentHeaderIndex;
    public $mSexCurrentHeaderIndex;
    public $PageSize;
    public $TotalPages = 0;
    public $TotalRows = 0;
    public $CurrentPageSize = 0;
    public $Pages;
    public $Parent;
    public $LastDetailIndex;

    function clsGroupsCollectionNewBorn41(& $parent) {
        $this->Parent = & $parent;
        $this->Groups = array();
        $this->Pages  = array();
        $this->mSexCurrentHeaderIndex = 1;
        $this->mReportTotalIndex = 0;
        $this->mPageTotalIndex = 1;
    }

    function & InitGroup() {
        $group = new clsReportGroupNewBorn41($this->Parent);
        $group->RowNumber = $this->TotalRows + 1;
        $group->PageNumber = $this->TotalPages;
        $group->PageTotalIndex = $this->mPageCurrentHeaderIndex;
        $group->SexTotalIndex = $this->mSexCurrentHeaderIndex;
        return $group;
    }

    function RestoreValues() {
        $this->Parent->Report_TotalRecords->Value = $this->Parent->Report_TotalRecords->initialValue;
        $this->Parent->GroupSex2->Value = $this->Parent->GroupSex2->initialValue;
        $this->Parent->CountGroupSex->Value = $this->Parent->CountGroupSex->initialValue;
    }

    function OpenPage() {
        $this->TotalPages++;
        $Group = & $this->InitGroup();
        $this->Parent->Page_Header->CCSEventResult = CCGetEvent($this->Parent->Page_Header->CCSEvents, "OnInitialize", $this->Parent->Page_Header);
        if ($this->Parent->Page_Header->Visible)
            $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Page_Header->Height;
        $Group->SetTotalControls("GetNextValue");
        $this->Parent->Page_Header->CCSEventResult = CCGetEvent($this->Parent->Page_Header->CCSEvents, "OnCalculate", $this->Parent->Page_Header);
        $Group->SetControls();
        $Group->Mode = 1;
        $Group->GroupType = "Page";
        $Group->PageTotalIndex = count($this->Groups);
        $this->mPageCurrentHeaderIndex = count($this->Groups);
        $this->Groups[] =  & $Group;
        $this->Pages[] =  count($this->Groups) == 2 ? 0 : count($this->Groups) - 1;
    }

    function OpenGroup($groupName) {
        $Group = "";
        $OpenFlag = false;
        if ($groupName == "Report") {
            $Group = & $this->InitGroup(true);
            $this->Parent->Report_Header->CCSEventResult = CCGetEvent($this->Parent->Report_Header->CCSEvents, "OnInitialize", $this->Parent->Report_Header);
            if ($this->Parent->Report_Header->Visible) 
                $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Report_Header->Height;
                $Group->SetTotalControls("GetNextValue");
            $this->Parent->Report_Header->CCSEventResult = CCGetEvent($this->Parent->Report_Header->CCSEvents, "OnCalculate", $this->Parent->Report_Header);
            $Group->SetControls();
            $Group->Mode = 1;
            $Group->GroupType = "Report";
            $this->Groups[] = & $Group;
            $this->OpenPage();
        }
        if ($groupName == "Sex") {
            $GroupSex = & $this->InitGroup(true);
            $this->Parent->Sex_Header->CCSEventResult = CCGetEvent($this->Parent->Sex_Header->CCSEvents, "OnInitialize", $this->Parent->Sex_Header);
            if ($this->Parent->Page_Footer->Visible) 
                $OverSize = $this->Parent->Sex_Header->Height + $this->Parent->Page_Footer->Height;
            else
                $OverSize = $this->Parent->Sex_Header->Height;
            if (($this->PageSize > 0) and $this->Parent->Sex_Header->Visible and ($this->CurrentPageSize + $OverSize > $this->PageSize)) {
                $this->ClosePage();
                $this->OpenPage();
            }
            if ($this->Parent->Sex_Header->Visible)
                $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Sex_Header->Height;
                $GroupSex->SetTotalControls("GetNextValue");
            $this->Parent->Sex_Header->CCSEventResult = CCGetEvent($this->Parent->Sex_Header->CCSEvents, "OnCalculate", $this->Parent->Sex_Header);
            $GroupSex->SetControls();
            $GroupSex->Mode = 1;
            $GroupSex->GroupType = "Sex";
            $this->mSexCurrentHeaderIndex = count($this->Groups);
            $this->Groups[] = & $GroupSex;
            $this->Parent->CountGroupSex->Reset();
        }
    }

    function ClosePage() {
        $Group = & $this->InitGroup();
        $this->Parent->Page_Footer->CCSEventResult = CCGetEvent($this->Parent->Page_Footer->CCSEvents, "OnInitialize", $this->Parent->Page_Footer);
        $Group->SetTotalControls("GetPrevValue");
        $Group->SyncWithHeader($this->Groups[$this->mPageCurrentHeaderIndex]);
        $this->Parent->Page_Footer->CCSEventResult = CCGetEvent($this->Parent->Page_Footer->CCSEvents, "OnCalculate", $this->Parent->Page_Footer);
        $Group->SetControls();
        $this->RestoreValues();
        $this->CurrentPageSize = 0;
        $Group->Mode = 2;
        $Group->GroupType = "Page";
        $this->Groups[] = & $Group;
    }

    function CloseGroup($groupName)
    {
        $Group = "";
        if ($groupName == "Report") {
            $Group = & $this->InitGroup(true);
            $this->Parent->Report_Footer->CCSEventResult = CCGetEvent($this->Parent->Report_Footer->CCSEvents, "OnInitialize", $this->Parent->Report_Footer);
            if ($this->Parent->Page_Footer->Visible) 
                $OverSize = $this->Parent->Report_Footer->Height + $this->Parent->Page_Footer->Height;
            else
                $OverSize = $this->Parent->Report_Footer->Height;
            if (($this->PageSize > 0) and $this->Parent->Report_Footer->Visible and ($this->CurrentPageSize + $OverSize > $this->PageSize)) {
                $this->ClosePage();
                $this->OpenPage();
            }
            $Group->SetTotalControls("GetPrevValue");
            $Group->SyncWithHeader($this->Groups[0]);
            if ($this->Parent->Report_Footer->Visible)
                $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Report_Footer->Height;
            $this->Parent->Report_Footer->CCSEventResult = CCGetEvent($this->Parent->Report_Footer->CCSEvents, "OnCalculate", $this->Parent->Report_Footer);
            $Group->SetControls();
            $this->RestoreValues();
            $Group->Mode = 2;
            $Group->GroupType = "Report";
            $this->Groups[] = & $Group;
            $this->ClosePage();
            return;
        }
        $GroupSex = & $this->InitGroup(true);
        $this->Parent->Sex_Footer->CCSEventResult = CCGetEvent($this->Parent->Sex_Footer->CCSEvents, "OnInitialize", $this->Parent->Sex_Footer);
        if ($this->Parent->Page_Footer->Visible) 
            $OverSize = $this->Parent->Sex_Footer->Height + $this->Parent->Page_Footer->Height;
        else
            $OverSize = $this->Parent->Sex_Footer->Height;
        if (($this->PageSize > 0) and $this->Parent->Sex_Footer->Visible and ($this->CurrentPageSize + $OverSize > $this->PageSize)) {
            $this->ClosePage();
            $this->OpenPage();
        }
        $GroupSex->SetTotalControls("GetPrevValue");
        $GroupSex->SyncWithHeader($this->Groups[$this->mSexCurrentHeaderIndex]);
        if ($this->Parent->Sex_Footer->Visible)
            $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Sex_Footer->Height;
        $this->Parent->Sex_Footer->CCSEventResult = CCGetEvent($this->Parent->Sex_Footer->CCSEvents, "OnCalculate", $this->Parent->Sex_Footer);
        $GroupSex->SetControls();
        $this->Parent->CountGroupSex->Reset();
        $this->RestoreValues();
        $GroupSex->Mode = 2;
        $GroupSex->GroupType ="Sex";
        $this->Groups[] = & $GroupSex;
    }

    function AddItem()
    {
        $Group = & $this->InitGroup(true);
        $this->Parent->Detail->CCSEventResult = CCGetEvent($this->Parent->Detail->CCSEvents, "OnInitialize", $this->Parent->Detail);
        if ($this->Parent->Page_Footer->Visible) 
            $OverSize = $this->Parent->Detail->Height + $this->Parent->Page_Footer->Height;
        else
            $OverSize = $this->Parent->Detail->Height;
        if (($this->PageSize > 0) and $this->Parent->Detail->Visible and ($this->CurrentPageSize + $OverSize > $this->PageSize)) {
            $this->ClosePage();
            $this->OpenPage();
        }
        $this->TotalRows++;
        if ($this->LastDetailIndex)
            $PrevGroup = & $this->Groups[$this->LastDetailIndex];
        else
            $PrevGroup = "";
        $Group->SetTotalControls("", $PrevGroup);
        if ($this->Parent->Detail->Visible)
            $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Detail->Height;
        $this->Parent->Detail->CCSEventResult = CCGetEvent($this->Parent->Detail->CCSEvents, "OnCalculate", $this->Parent->Detail);
        $Group->SetControls($PrevGroup);
        $this->LastDetailIndex = count($this->Groups);
        $this->Groups[] = & $Group;
    }
}
//End NewBorn41 GroupsCollection class

class clsReportNewBorn41 { //NewBorn41 Class @858-5D9964D2

//NewBorn41 Variables @858-80D63D80

    public $ComponentType = "Report";
    public $PageSize;
    public $ComponentName;
    public $Visible;
    public $Errors;
    public $CCSEvents = array();
    public $CCSEventResult;
    public $RelativePath = "";
    public $ViewMode = "Web";
    public $TemplateBlock;
    public $PageNumber;
    public $RowNumber;
    public $TotalRows;
    public $TotalPages;
    public $ControlsVisible = array();
    public $IsEmpty;
    public $Attributes;
    public $DetailBlock, $Detail;
    public $Report_FooterBlock, $Report_Footer;
    public $Report_HeaderBlock, $Report_Header;
    public $Page_FooterBlock, $Page_Footer;
    public $Page_HeaderBlock, $Page_Header;
    public $Sex_HeaderBlock, $Sex_Header;
    public $Sex_FooterBlock, $Sex_Footer;
    public $SorterName, $SorterDirection;

    public $ds;
    public $DataSource;
    public $UseClientPaging = false;

    //Report Controls
    public $StaticControls, $RowControls, $Report_FooterControls, $Report_HeaderControls;
    public $Page_FooterControls, $Page_HeaderControls;
    public $Sex_HeaderControls, $Sex_FooterControls;
//End NewBorn41 Variables

//Class_Initialize Event @858-D7D124AA
    function clsReportNewBorn41($RelativePath = "", & $Parent)
    {
        global $FileName;
        global $CCSLocales;
        global $DefaultDateFormat;
        $this->ComponentName = "NewBorn41";
        $this->Visible = True;
        $this->Parent = & $Parent;
        $this->RelativePath = $RelativePath;
        $this->Attributes = new clsAttributes($this->ComponentName . ":");
        $this->Detail = new clsSection($this);
        $MinPageSize = 0;
        $MaxSectionSize = 0;
        $this->Detail->Height = 1;
        $MaxSectionSize = max($MaxSectionSize, $this->Detail->Height);
        $this->Report_Footer = new clsSection($this);
        $this->Report_Header = new clsSection($this);
        $this->Page_Footer = new clsSection($this);
        $this->Page_Footer->Height = 1;
        $MinPageSize += $this->Page_Footer->Height;
        $this->Page_Header = new clsSection($this);
        $this->Page_Header->Height = 1;
        $MinPageSize += $this->Page_Header->Height;
        $this->Sex_Footer = new clsSection($this);
        $this->Sex_Footer->Height = 1;
        $MaxSectionSize = max($MaxSectionSize, $this->Sex_Footer->Height);
        $this->Sex_Header = new clsSection($this);
        $this->Sex_Header->Height = 1;
        $MaxSectionSize = max($MaxSectionSize, $this->Sex_Header->Height);
        $this->Errors = new clsErrors();
        $this->DataSource = new clsNewBorn41DataSource($this);
        $this->ds = & $this->DataSource;
        $PageSize = CCGetParam($this->ComponentName . "PageSize", "");
        if(is_numeric($PageSize) && $PageSize > 0) {
            $this->PageSize = $PageSize;
        } else {
            if (!is_numeric($PageSize) || $PageSize < 0)
                $this->PageSize = 0;
             else if ($PageSize == "0")
                $this->PageSize = 0;
             else 
                $this->PageSize = $PageSize;
        }
        $MinPageSize += $MaxSectionSize;
        if ($this->PageSize && $MinPageSize && $this->PageSize < $MinPageSize)
            $this->PageSize = $MinPageSize;
        $this->PageNumber = $this->ViewMode == "Print" ? 1 : intval(CCGetParam($this->ComponentName . "Page", 1));
        if ($this->PageNumber <= 0 ) {
            $this->PageNumber = 1;
        }
        $this->Visible = (CCSecurityAccessCheck("1;2") == "success");

        $this->Report_TotalRecords = new clsControl(ccsReportLabel, "Report_TotalRecords", "Report_TotalRecords", ccsText, "", 0, $this);
        $this->Report_TotalRecords->TotalFunction = "Count";
        $this->Report_TotalRecords->IsEmptySource = true;
        $this->NoRecords = new clsPanel("NoRecords", $this);
        $this->GroupSex2 = new clsControl(ccsReportLabel, "GroupSex2", "GroupSex2", ccsInteger, "", "", $this);
        $this->CountGroupSex = new clsControl(ccsReportLabel, "CountGroupSex", "CountGroupSex", ccsText, "", 0, $this);
        $this->CountGroupSex->TotalFunction = "Count";
    }
//End Class_Initialize Event

//Initialize Method @858-6C59EE65
    function Initialize()
    {
        if(!$this->Visible) return;

        $this->DataSource->PageSize = $this->PageSize;
        $this->DataSource->AbsolutePage = $this->PageNumber;
        $this->DataSource->SetOrder($this->SorterName, $this->SorterDirection);
    }
//End Initialize Method

//CheckErrors Method @858-CD002B70
    function CheckErrors()
    {
        $errors = false;
        $errors = ($errors || $this->Report_TotalRecords->Errors->Count());
        $errors = ($errors || $this->GroupSex2->Errors->Count());
        $errors = ($errors || $this->CountGroupSex->Errors->Count());
        $errors = ($errors || $this->Errors->Count());
        $errors = ($errors || $this->DataSource->Errors->Count());
        return $errors;
    }
//End CheckErrors Method

//GetErrors Method @858-B2E862A1
    function GetErrors()
    {
        $errors = "";
        $errors = ComposeStrings($errors, $this->Report_TotalRecords->Errors->ToString());
        $errors = ComposeStrings($errors, $this->GroupSex2->Errors->ToString());
        $errors = ComposeStrings($errors, $this->CountGroupSex->Errors->ToString());
        $errors = ComposeStrings($errors, $this->Errors->ToString());
        $errors = ComposeStrings($errors, $this->DataSource->Errors->ToString());
        return $errors;
    }
//End GetErrors Method

//Show Method @858-6EBCEE95
    function Show()
    {
        global $Tpl;
        global $CCSLocales;
        if(!$this->Visible) return;

        $ShownRecords = 0;

        $this->DataSource->Parameters["urls_BirthDate"] = CCGetFromGet("s_BirthDate", NULL);
        $this->DataSource->Parameters["urls_BirthDate1"] = CCGetFromGet("s_BirthDate1", NULL);
        $this->DataSource->Parameters["urls_FacilityName"] = CCGetFromGet("s_FacilityName", NULL);

        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeSelect", $this);


        $this->DataSource->Prepare();
        $this->DataSource->Open();

        $SexKey = "";
        $Groups = new clsGroupsCollectionNewBorn41($this);
        $Groups->PageSize = $this->PageSize > 0 ? $this->PageSize : 0;

        $is_next_record = $this->DataSource->next_record();
        $this->IsEmpty = ! $is_next_record;
        while($is_next_record) {
            $this->DataSource->SetValues();
            $this->GroupSex2->SetValue($this->DataSource->GroupSex2->GetValue());
            $this->CountGroupSex->SetValue($this->DataSource->CountGroupSex->GetValue());
            $this->Report_TotalRecords->SetValue(1);
            if (count($Groups->Groups) == 0) $Groups->OpenGroup("Report");
            if (count($Groups->Groups) == 2 or $SexKey != $this->DataSource->f("Sex")) {
                $Groups->OpenGroup("Sex");
            }
            $Groups->AddItem();
            $SexKey = $this->DataSource->f("Sex");
            $is_next_record = $this->DataSource->next_record();
            if (!$is_next_record || $SexKey != $this->DataSource->f("Sex")) {
                $Groups->CloseGroup("Sex");
            }
        }
        if (!count($Groups->Groups)) 
            $Groups->OpenGroup("Report");
        else
            $this->NoRecords->Visible = false;
        $Groups->CloseGroup("Report");
        $this->TotalPages = $Groups->TotalPages;
        $this->TotalRows = $Groups->TotalRows;

        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeShow", $this);
        if(!$this->Visible) return;

        $this->Attributes->Show();
        $ReportBlock = "Report " . $this->ComponentName;
        $ParentPath = $Tpl->block_path;
        $Tpl->block_path = $ParentPath . "/" . $ReportBlock;

        if($this->CheckErrors()) {
            $Tpl->replaceblock("", $this->GetErrors());
            $Tpl->block_path = $ParentPath;
            return;
        } else {
            $items = & $Groups->Groups;
            $i = $Groups->Pages[min($this->PageNumber, $Groups->TotalPages) - 1];
            $this->ControlsVisible["GroupSex2"] = $this->GroupSex2->Visible;
            $this->ControlsVisible["CountGroupSex"] = $this->CountGroupSex->Visible;
            do {
                $this->Attributes->RestoreFromArray($items[$i]->Attributes);
                $this->RowNumber = $items[$i]->RowNumber;
                switch ($items[$i]->GroupType) {
                    Case "":
                        $this->Detail->CCSEventResult = CCGetEvent($this->Detail->CCSEvents, "BeforeShow", $this->Detail);
                        if ($this->Detail->Visible) {
                            $this->Attributes->Show();
                            $Tpl->parseto("Section Detail", true, "Section Detail");
                        }
                        break;
                    case "Report":
                        if ($items[$i]->Mode == 1) {
                            $this->Report_TotalRecords->SetValue($items[$i]->Report_TotalRecords);
                            $this->Report_TotalRecords->Attributes->RestoreFromArray($items[$i]->_Report_TotalRecordsAttributes);
                            $this->Report_Header->CCSEventResult = CCGetEvent($this->Report_Header->CCSEvents, "BeforeShow", $this->Report_Header);
                            if ($this->Report_Header->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Report_Header";
                                $this->Attributes->Show();
                                $this->Report_TotalRecords->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Report_Header", true, "Section Detail");
                            }
                        }
                        if ($items[$i]->Mode == 2) {
                            $this->Report_Footer->CCSEventResult = CCGetEvent($this->Report_Footer->CCSEvents, "BeforeShow", $this->Report_Footer);
                            if ($this->Report_Footer->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Report_Footer";
                                $this->NoRecords->Show();
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Report_Footer", true, "Section Detail");
                            }
                        }
                        break;
                    case "Page":
                        if ($items[$i]->Mode == 1) {
                            $this->Page_Header->CCSEventResult = CCGetEvent($this->Page_Header->CCSEvents, "BeforeShow", $this->Page_Header);
                            if ($this->Page_Header->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Page_Header";
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Page_Header", true, "Section Detail");
                            }
                        }
                        if ($items[$i]->Mode == 2 && !$this->UseClientPaging || $items[$i]->Mode == 1 && $this->UseClientPaging) {
                            $this->Page_Footer->CCSEventResult = CCGetEvent($this->Page_Footer->CCSEvents, "BeforeShow", $this->Page_Footer);
                            if ($this->Page_Footer->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Page_Footer";
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Page_Footer", true, "Section Detail");
                            }
                        }
                        break;
                    case "Sex":
                        if ($items[$i]->Mode == 1) {
                            $this->GroupSex2->SetValue($items[$i]->GroupSex2);
                            $this->GroupSex2->Attributes->RestoreFromArray($items[$i]->_GroupSex2Attributes);
                            $this->CountGroupSex->SetValue($items[$i]->CountGroupSex);
                            $this->CountGroupSex->Attributes->RestoreFromArray($items[$i]->_CountGroupSexAttributes);
                            $this->Sex_Header->CCSEventResult = CCGetEvent($this->Sex_Header->CCSEvents, "BeforeShow", $this->Sex_Header);
                            if ($this->Sex_Header->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Sex_Header";
                                $this->Attributes->Show();
                                $this->GroupSex2->Show();
                                $this->CountGroupSex->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Sex_Header", true, "Section Detail");
                            }
                        }
                        if ($items[$i]->Mode == 2) {
                            $this->Sex_Footer->CCSEventResult = CCGetEvent($this->Sex_Footer->CCSEvents, "BeforeShow", $this->Sex_Footer);
                            if ($this->Sex_Footer->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Sex_Footer";
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Sex_Footer", true, "Section Detail");
                            }
                        }
                        break;
                }
                $i++;
            } while ($i < count($items) && ($this->ViewMode == "Print" ||  !($i > 1 && $items[$i]->GroupType == 'Page' && $items[$i]->Mode == 1)));
            $Tpl->block_path = $ParentPath;
            $Tpl->parse($ReportBlock);
            $this->DataSource->close();
        }

    }
//End Show Method

} //End NewBorn41 Class @858-FCB6E20C

class clsNewBorn41DataSource extends clsDBregistry_db {  //NewBorn41DataSource Class @858-43F6BF04

//DataSource Variables @858-F5055419
    public $Parent = "";
    public $CCSEvents = "";
    public $CCSEventResult;
    public $ErrorBlock;
    public $CmdExecution;

    public $wp;


    // Datasource fields
    public $GroupSex2;
    public $CountGroupSex;
//End DataSource Variables

//DataSourceClass_Initialize Event @858-A18ECC84
    function clsNewBorn41DataSource(& $Parent)
    {
        $this->Parent = & $Parent;
        $this->ErrorBlock = "Report NewBorn41";
        $this->Initialize();
        $this->GroupSex2 = new clsField("GroupSex2", ccsInteger, "");
        
        $this->CountGroupSex = new clsField("CountGroupSex", ccsText, "");
        

    }
//End DataSourceClass_Initialize Event

//SetOrder Method @858-9E1383D1
    function SetOrder($SorterName, $SorterDirection)
    {
        $this->Order = "";
        $this->Order = CCGetOrder($this->Order, $SorterName, $SorterDirection, 
            "");
    }
//End SetOrder Method

//Prepare Method @858-0A119396
    function Prepare()
    {
        global $CCSLocales;
        global $DefaultDateFormat;
        $this->wp = new clsSQLParameters($this->ErrorBlock);
        $this->wp->AddParameter("3", "urls_BirthDate", ccsDate, array("ShortDate"), array("yyyy", "-", "mm", "-", "dd", " ", "HH", ":", "nn", ":", "ss"), $this->Parameters["urls_BirthDate"], "", false);
        $this->wp->AddParameter("4", "urls_BirthDate1", ccsDate, array("ShortDate"), array("yyyy", "-", "mm", "-", "dd", " ", "HH", ":", "nn", ":", "ss"), $this->Parameters["urls_BirthDate1"], "", false);
        $this->wp->AddParameter("7", "urls_FacilityName", ccsText, "", "", $this->Parameters["urls_FacilityName"], "", false);
        $this->wp->Criterion[1] = "( newborn.Weight>=2000 )";
        $this->wp->Criterion[2] = "( newborn.Weight<=2499 )";
        $this->wp->Criterion[3] = $this->wp->Operation(opGreaterThanOrEqual, "newborn.BirthDate", $this->wp->GetDBValue("3"), $this->ToSQL($this->wp->GetDBValue("3"), ccsDate),false);
        $this->wp->Criterion[4] = $this->wp->Operation(opLessThanOrEqual, "newborn.BirthDate", $this->wp->GetDBValue("4"), $this->ToSQL($this->wp->GetDBValue("4"), ccsDate),false);
        $this->wp->Criterion[5] = "( newborn.Died=1 )";
        $this->wp->Criterion[6] = "( newborn.DiedID=1 )";
        $this->wp->Criterion[7] = $this->wp->Operation(opEqual, "facilities.FacilityName", $this->wp->GetDBValue("7"), $this->ToSQL($this->wp->GetDBValue("7"), ccsText),false);
        $this->Where = $this->wp->opAND(
             false, $this->wp->opAND(
             false, $this->wp->opAND(
             false, $this->wp->opAND(
             false, $this->wp->opAND(
             false, $this->wp->opAND(
             false, 
             $this->wp->Criterion[1], 
             $this->wp->Criterion[2]), 
             $this->wp->Criterion[3]), 
             $this->wp->Criterion[4]), 
             $this->wp->Criterion[5]), 
             $this->wp->Criterion[6]), 
             $this->wp->Criterion[7]);
    }
//End Prepare Method

//Open Method @858-CA3C9D7B
    function Open()
    {
        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeBuildSelect", $this->Parent);
        $this->SQL = "SELECT delivery.DeliveryID AS delivery_DeliveryID, FacilityName, Sex, NewBornID, BirthDate, Weight \n\n" .
        "FROM (delivery INNER JOIN facilities ON\n\n" .
        "delivery.FacilityID = facilities.FacilityID) INNER JOIN newborn ON\n\n" .
        "newborn.DeliveryID = delivery.DeliveryID {SQL_Where} {SQL_OrderBy}";
        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeExecuteSelect", $this->Parent);
        $this->query(CCBuildSQL($this->SQL, $this->Where, "newborn.Sex asc" .  ($this->Order ? ", " . $this->Order: "")));
        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "AfterExecuteSelect", $this->Parent);
    }
//End Open Method

//SetValues Method @858-F73A025D
    function SetValues()
    {
        $this->GroupSex2->SetDBValue(trim($this->f("Sex")));
        $this->CountGroupSex->SetDBValue($this->f("Sex"));
    }
//End SetValues Method

} //End NewBorn41DataSource Class @858-FCB6E20C

//NewBorn42 ReportGroup class @922-EB0B0614
class clsReportGroupNewBorn42 {
    public $GroupType;
    public $mode; //1 - open, 2 - close
    public $Report_TotalRecords, $_Report_TotalRecordsAttributes;
    public $GroupSex2, $_GroupSex2Attributes;
    public $CountGroupSex, $_CountGroupSexAttributes;
    public $Attributes;
    public $ReportTotalIndex = 0;
    public $PageTotalIndex;
    public $PageNumber;
    public $RowNumber;
    public $Parent;
    public $SexTotalIndex;

    function clsReportGroupNewBorn42(& $parent) {
        $this->Parent = & $parent;
        $this->Attributes = $this->Parent->Attributes->GetAsArray();
    }
    function SetControls($PrevGroup = "") {
        $this->GroupSex2 = $this->Parent->GroupSex2->Value;
    }

    function SetTotalControls($mode = "", $PrevGroup = "") {
        $this->Report_TotalRecords = $this->Parent->Report_TotalRecords->GetTotalValue($mode);
        $this->CountGroupSex = $this->Parent->CountGroupSex->GetTotalValue($mode);
        $this->_Report_TotalRecordsAttributes = $this->Parent->Report_TotalRecords->Attributes->GetAsArray();
        $this->_GroupSex2Attributes = $this->Parent->GroupSex2->Attributes->GetAsArray();
        $this->_CountGroupSexAttributes = $this->Parent->CountGroupSex->Attributes->GetAsArray();
    }
    function SyncWithHeader(& $Header) {
        $Header->Report_TotalRecords = $this->Report_TotalRecords;
        $Header->_Report_TotalRecordsAttributes = $this->_Report_TotalRecordsAttributes;
        $Header->CountGroupSex = $this->CountGroupSex;
        $Header->_CountGroupSexAttributes = $this->_CountGroupSexAttributes;
        $this->GroupSex2 = $Header->GroupSex2;
        $Header->_GroupSex2Attributes = $this->_GroupSex2Attributes;
        $this->Parent->GroupSex2->Value = $Header->GroupSex2;
        $this->Parent->GroupSex2->Attributes->RestoreFromArray($Header->_GroupSex2Attributes);
    }
    function ChangeTotalControls() {
        $this->Report_TotalRecords = $this->Parent->Report_TotalRecords->GetValue();
        $this->CountGroupSex = $this->Parent->CountGroupSex->GetValue();
    }
}
//End NewBorn42 ReportGroup class

//NewBorn42 GroupsCollection class @922-D777E335
class clsGroupsCollectionNewBorn42 {
    public $Groups;
    public $mPageCurrentHeaderIndex;
    public $mSexCurrentHeaderIndex;
    public $PageSize;
    public $TotalPages = 0;
    public $TotalRows = 0;
    public $CurrentPageSize = 0;
    public $Pages;
    public $Parent;
    public $LastDetailIndex;

    function clsGroupsCollectionNewBorn42(& $parent) {
        $this->Parent = & $parent;
        $this->Groups = array();
        $this->Pages  = array();
        $this->mSexCurrentHeaderIndex = 1;
        $this->mReportTotalIndex = 0;
        $this->mPageTotalIndex = 1;
    }

    function & InitGroup() {
        $group = new clsReportGroupNewBorn42($this->Parent);
        $group->RowNumber = $this->TotalRows + 1;
        $group->PageNumber = $this->TotalPages;
        $group->PageTotalIndex = $this->mPageCurrentHeaderIndex;
        $group->SexTotalIndex = $this->mSexCurrentHeaderIndex;
        return $group;
    }

    function RestoreValues() {
        $this->Parent->Report_TotalRecords->Value = $this->Parent->Report_TotalRecords->initialValue;
        $this->Parent->GroupSex2->Value = $this->Parent->GroupSex2->initialValue;
        $this->Parent->CountGroupSex->Value = $this->Parent->CountGroupSex->initialValue;
    }

    function OpenPage() {
        $this->TotalPages++;
        $Group = & $this->InitGroup();
        $this->Parent->Page_Header->CCSEventResult = CCGetEvent($this->Parent->Page_Header->CCSEvents, "OnInitialize", $this->Parent->Page_Header);
        if ($this->Parent->Page_Header->Visible)
            $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Page_Header->Height;
        $Group->SetTotalControls("GetNextValue");
        $this->Parent->Page_Header->CCSEventResult = CCGetEvent($this->Parent->Page_Header->CCSEvents, "OnCalculate", $this->Parent->Page_Header);
        $Group->SetControls();
        $Group->Mode = 1;
        $Group->GroupType = "Page";
        $Group->PageTotalIndex = count($this->Groups);
        $this->mPageCurrentHeaderIndex = count($this->Groups);
        $this->Groups[] =  & $Group;
        $this->Pages[] =  count($this->Groups) == 2 ? 0 : count($this->Groups) - 1;
    }

    function OpenGroup($groupName) {
        $Group = "";
        $OpenFlag = false;
        if ($groupName == "Report") {
            $Group = & $this->InitGroup(true);
            $this->Parent->Report_Header->CCSEventResult = CCGetEvent($this->Parent->Report_Header->CCSEvents, "OnInitialize", $this->Parent->Report_Header);
            if ($this->Parent->Report_Header->Visible) 
                $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Report_Header->Height;
                $Group->SetTotalControls("GetNextValue");
            $this->Parent->Report_Header->CCSEventResult = CCGetEvent($this->Parent->Report_Header->CCSEvents, "OnCalculate", $this->Parent->Report_Header);
            $Group->SetControls();
            $Group->Mode = 1;
            $Group->GroupType = "Report";
            $this->Groups[] = & $Group;
            $this->OpenPage();
        }
        if ($groupName == "Sex") {
            $GroupSex = & $this->InitGroup(true);
            $this->Parent->Sex_Header->CCSEventResult = CCGetEvent($this->Parent->Sex_Header->CCSEvents, "OnInitialize", $this->Parent->Sex_Header);
            if ($this->Parent->Page_Footer->Visible) 
                $OverSize = $this->Parent->Sex_Header->Height + $this->Parent->Page_Footer->Height;
            else
                $OverSize = $this->Parent->Sex_Header->Height;
            if (($this->PageSize > 0) and $this->Parent->Sex_Header->Visible and ($this->CurrentPageSize + $OverSize > $this->PageSize)) {
                $this->ClosePage();
                $this->OpenPage();
            }
            if ($this->Parent->Sex_Header->Visible)
                $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Sex_Header->Height;
                $GroupSex->SetTotalControls("GetNextValue");
            $this->Parent->Sex_Header->CCSEventResult = CCGetEvent($this->Parent->Sex_Header->CCSEvents, "OnCalculate", $this->Parent->Sex_Header);
            $GroupSex->SetControls();
            $GroupSex->Mode = 1;
            $GroupSex->GroupType = "Sex";
            $this->mSexCurrentHeaderIndex = count($this->Groups);
            $this->Groups[] = & $GroupSex;
            $this->Parent->CountGroupSex->Reset();
        }
    }

    function ClosePage() {
        $Group = & $this->InitGroup();
        $this->Parent->Page_Footer->CCSEventResult = CCGetEvent($this->Parent->Page_Footer->CCSEvents, "OnInitialize", $this->Parent->Page_Footer);
        $Group->SetTotalControls("GetPrevValue");
        $Group->SyncWithHeader($this->Groups[$this->mPageCurrentHeaderIndex]);
        $this->Parent->Page_Footer->CCSEventResult = CCGetEvent($this->Parent->Page_Footer->CCSEvents, "OnCalculate", $this->Parent->Page_Footer);
        $Group->SetControls();
        $this->RestoreValues();
        $this->CurrentPageSize = 0;
        $Group->Mode = 2;
        $Group->GroupType = "Page";
        $this->Groups[] = & $Group;
    }

    function CloseGroup($groupName)
    {
        $Group = "";
        if ($groupName == "Report") {
            $Group = & $this->InitGroup(true);
            $this->Parent->Report_Footer->CCSEventResult = CCGetEvent($this->Parent->Report_Footer->CCSEvents, "OnInitialize", $this->Parent->Report_Footer);
            if ($this->Parent->Page_Footer->Visible) 
                $OverSize = $this->Parent->Report_Footer->Height + $this->Parent->Page_Footer->Height;
            else
                $OverSize = $this->Parent->Report_Footer->Height;
            if (($this->PageSize > 0) and $this->Parent->Report_Footer->Visible and ($this->CurrentPageSize + $OverSize > $this->PageSize)) {
                $this->ClosePage();
                $this->OpenPage();
            }
            $Group->SetTotalControls("GetPrevValue");
            $Group->SyncWithHeader($this->Groups[0]);
            if ($this->Parent->Report_Footer->Visible)
                $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Report_Footer->Height;
            $this->Parent->Report_Footer->CCSEventResult = CCGetEvent($this->Parent->Report_Footer->CCSEvents, "OnCalculate", $this->Parent->Report_Footer);
            $Group->SetControls();
            $this->RestoreValues();
            $Group->Mode = 2;
            $Group->GroupType = "Report";
            $this->Groups[] = & $Group;
            $this->ClosePage();
            return;
        }
        $GroupSex = & $this->InitGroup(true);
        $this->Parent->Sex_Footer->CCSEventResult = CCGetEvent($this->Parent->Sex_Footer->CCSEvents, "OnInitialize", $this->Parent->Sex_Footer);
        if ($this->Parent->Page_Footer->Visible) 
            $OverSize = $this->Parent->Sex_Footer->Height + $this->Parent->Page_Footer->Height;
        else
            $OverSize = $this->Parent->Sex_Footer->Height;
        if (($this->PageSize > 0) and $this->Parent->Sex_Footer->Visible and ($this->CurrentPageSize + $OverSize > $this->PageSize)) {
            $this->ClosePage();
            $this->OpenPage();
        }
        $GroupSex->SetTotalControls("GetPrevValue");
        $GroupSex->SyncWithHeader($this->Groups[$this->mSexCurrentHeaderIndex]);
        if ($this->Parent->Sex_Footer->Visible)
            $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Sex_Footer->Height;
        $this->Parent->Sex_Footer->CCSEventResult = CCGetEvent($this->Parent->Sex_Footer->CCSEvents, "OnCalculate", $this->Parent->Sex_Footer);
        $GroupSex->SetControls();
        $this->Parent->CountGroupSex->Reset();
        $this->RestoreValues();
        $GroupSex->Mode = 2;
        $GroupSex->GroupType ="Sex";
        $this->Groups[] = & $GroupSex;
    }

    function AddItem()
    {
        $Group = & $this->InitGroup(true);
        $this->Parent->Detail->CCSEventResult = CCGetEvent($this->Parent->Detail->CCSEvents, "OnInitialize", $this->Parent->Detail);
        if ($this->Parent->Page_Footer->Visible) 
            $OverSize = $this->Parent->Detail->Height + $this->Parent->Page_Footer->Height;
        else
            $OverSize = $this->Parent->Detail->Height;
        if (($this->PageSize > 0) and $this->Parent->Detail->Visible and ($this->CurrentPageSize + $OverSize > $this->PageSize)) {
            $this->ClosePage();
            $this->OpenPage();
        }
        $this->TotalRows++;
        if ($this->LastDetailIndex)
            $PrevGroup = & $this->Groups[$this->LastDetailIndex];
        else
            $PrevGroup = "";
        $Group->SetTotalControls("", $PrevGroup);
        if ($this->Parent->Detail->Visible)
            $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Detail->Height;
        $this->Parent->Detail->CCSEventResult = CCGetEvent($this->Parent->Detail->CCSEvents, "OnCalculate", $this->Parent->Detail);
        $Group->SetControls($PrevGroup);
        $this->LastDetailIndex = count($this->Groups);
        $this->Groups[] = & $Group;
    }
}
//End NewBorn42 GroupsCollection class

class clsReportNewBorn42 { //NewBorn42 Class @922-76B43711

//NewBorn42 Variables @922-80D63D80

    public $ComponentType = "Report";
    public $PageSize;
    public $ComponentName;
    public $Visible;
    public $Errors;
    public $CCSEvents = array();
    public $CCSEventResult;
    public $RelativePath = "";
    public $ViewMode = "Web";
    public $TemplateBlock;
    public $PageNumber;
    public $RowNumber;
    public $TotalRows;
    public $TotalPages;
    public $ControlsVisible = array();
    public $IsEmpty;
    public $Attributes;
    public $DetailBlock, $Detail;
    public $Report_FooterBlock, $Report_Footer;
    public $Report_HeaderBlock, $Report_Header;
    public $Page_FooterBlock, $Page_Footer;
    public $Page_HeaderBlock, $Page_Header;
    public $Sex_HeaderBlock, $Sex_Header;
    public $Sex_FooterBlock, $Sex_Footer;
    public $SorterName, $SorterDirection;

    public $ds;
    public $DataSource;
    public $UseClientPaging = false;

    //Report Controls
    public $StaticControls, $RowControls, $Report_FooterControls, $Report_HeaderControls;
    public $Page_FooterControls, $Page_HeaderControls;
    public $Sex_HeaderControls, $Sex_FooterControls;
//End NewBorn42 Variables

//Class_Initialize Event @922-33C18BC5
    function clsReportNewBorn42($RelativePath = "", & $Parent)
    {
        global $FileName;
        global $CCSLocales;
        global $DefaultDateFormat;
        $this->ComponentName = "NewBorn42";
        $this->Visible = True;
        $this->Parent = & $Parent;
        $this->RelativePath = $RelativePath;
        $this->Attributes = new clsAttributes($this->ComponentName . ":");
        $this->Detail = new clsSection($this);
        $MinPageSize = 0;
        $MaxSectionSize = 0;
        $this->Detail->Height = 1;
        $MaxSectionSize = max($MaxSectionSize, $this->Detail->Height);
        $this->Report_Footer = new clsSection($this);
        $this->Report_Header = new clsSection($this);
        $this->Page_Footer = new clsSection($this);
        $this->Page_Footer->Height = 1;
        $MinPageSize += $this->Page_Footer->Height;
        $this->Page_Header = new clsSection($this);
        $this->Page_Header->Height = 1;
        $MinPageSize += $this->Page_Header->Height;
        $this->Sex_Footer = new clsSection($this);
        $this->Sex_Footer->Height = 1;
        $MaxSectionSize = max($MaxSectionSize, $this->Sex_Footer->Height);
        $this->Sex_Header = new clsSection($this);
        $this->Sex_Header->Height = 1;
        $MaxSectionSize = max($MaxSectionSize, $this->Sex_Header->Height);
        $this->Errors = new clsErrors();
        $this->DataSource = new clsNewBorn42DataSource($this);
        $this->ds = & $this->DataSource;
        $PageSize = CCGetParam($this->ComponentName . "PageSize", "");
        if(is_numeric($PageSize) && $PageSize > 0) {
            $this->PageSize = $PageSize;
        } else {
            if (!is_numeric($PageSize) || $PageSize < 0)
                $this->PageSize = 0;
             else if ($PageSize == "0")
                $this->PageSize = 0;
             else 
                $this->PageSize = $PageSize;
        }
        $MinPageSize += $MaxSectionSize;
        if ($this->PageSize && $MinPageSize && $this->PageSize < $MinPageSize)
            $this->PageSize = $MinPageSize;
        $this->PageNumber = $this->ViewMode == "Print" ? 1 : intval(CCGetParam($this->ComponentName . "Page", 1));
        if ($this->PageNumber <= 0 ) {
            $this->PageNumber = 1;
        }
        $this->Visible = (CCSecurityAccessCheck("1;2") == "success");

        $this->Report_TotalRecords = new clsControl(ccsReportLabel, "Report_TotalRecords", "Report_TotalRecords", ccsText, "", 0, $this);
        $this->Report_TotalRecords->TotalFunction = "Count";
        $this->Report_TotalRecords->IsEmptySource = true;
        $this->NoRecords = new clsPanel("NoRecords", $this);
        $this->GroupSex2 = new clsControl(ccsReportLabel, "GroupSex2", "GroupSex2", ccsInteger, "", "", $this);
        $this->CountGroupSex = new clsControl(ccsReportLabel, "CountGroupSex", "CountGroupSex", ccsText, "", 0, $this);
        $this->CountGroupSex->TotalFunction = "Count";
    }
//End Class_Initialize Event

//Initialize Method @922-6C59EE65
    function Initialize()
    {
        if(!$this->Visible) return;

        $this->DataSource->PageSize = $this->PageSize;
        $this->DataSource->AbsolutePage = $this->PageNumber;
        $this->DataSource->SetOrder($this->SorterName, $this->SorterDirection);
    }
//End Initialize Method

//CheckErrors Method @922-CD002B70
    function CheckErrors()
    {
        $errors = false;
        $errors = ($errors || $this->Report_TotalRecords->Errors->Count());
        $errors = ($errors || $this->GroupSex2->Errors->Count());
        $errors = ($errors || $this->CountGroupSex->Errors->Count());
        $errors = ($errors || $this->Errors->Count());
        $errors = ($errors || $this->DataSource->Errors->Count());
        return $errors;
    }
//End CheckErrors Method

//GetErrors Method @922-B2E862A1
    function GetErrors()
    {
        $errors = "";
        $errors = ComposeStrings($errors, $this->Report_TotalRecords->Errors->ToString());
        $errors = ComposeStrings($errors, $this->GroupSex2->Errors->ToString());
        $errors = ComposeStrings($errors, $this->CountGroupSex->Errors->ToString());
        $errors = ComposeStrings($errors, $this->Errors->ToString());
        $errors = ComposeStrings($errors, $this->DataSource->Errors->ToString());
        return $errors;
    }
//End GetErrors Method

//Show Method @922-CA41B9E0
    function Show()
    {
        global $Tpl;
        global $CCSLocales;
        if(!$this->Visible) return;

        $ShownRecords = 0;

        $this->DataSource->Parameters["urls_BirthDate"] = CCGetFromGet("s_BirthDate", NULL);
        $this->DataSource->Parameters["urls_BirthDate1"] = CCGetFromGet("s_BirthDate1", NULL);
        $this->DataSource->Parameters["urls_FacilityName"] = CCGetFromGet("s_FacilityName", NULL);

        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeSelect", $this);


        $this->DataSource->Prepare();
        $this->DataSource->Open();

        $SexKey = "";
        $Groups = new clsGroupsCollectionNewBorn42($this);
        $Groups->PageSize = $this->PageSize > 0 ? $this->PageSize : 0;

        $is_next_record = $this->DataSource->next_record();
        $this->IsEmpty = ! $is_next_record;
        while($is_next_record) {
            $this->DataSource->SetValues();
            $this->GroupSex2->SetValue($this->DataSource->GroupSex2->GetValue());
            $this->CountGroupSex->SetValue($this->DataSource->CountGroupSex->GetValue());
            $this->Report_TotalRecords->SetValue(1);
            if (count($Groups->Groups) == 0) $Groups->OpenGroup("Report");
            if (count($Groups->Groups) == 2 or $SexKey != $this->DataSource->f("Sex")) {
                $Groups->OpenGroup("Sex");
            }
            $Groups->AddItem();
            $SexKey = $this->DataSource->f("Sex");
            $is_next_record = $this->DataSource->next_record();
            if (!$is_next_record || $SexKey != $this->DataSource->f("Sex")) {
                $Groups->CloseGroup("Sex");
            }
        }
        if (!count($Groups->Groups)) 
            $Groups->OpenGroup("Report");
        else
            $this->NoRecords->Visible = false;
        $Groups->CloseGroup("Report");
        $this->TotalPages = $Groups->TotalPages;
        $this->TotalRows = $Groups->TotalRows;

        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeShow", $this);
        if(!$this->Visible) return;

        $this->Attributes->Show();
        $ReportBlock = "Report " . $this->ComponentName;
        $ParentPath = $Tpl->block_path;
        $Tpl->block_path = $ParentPath . "/" . $ReportBlock;

        if($this->CheckErrors()) {
            $Tpl->replaceblock("", $this->GetErrors());
            $Tpl->block_path = $ParentPath;
            return;
        } else {
            $items = & $Groups->Groups;
            $i = $Groups->Pages[min($this->PageNumber, $Groups->TotalPages) - 1];
            $this->ControlsVisible["GroupSex2"] = $this->GroupSex2->Visible;
            $this->ControlsVisible["CountGroupSex"] = $this->CountGroupSex->Visible;
            do {
                $this->Attributes->RestoreFromArray($items[$i]->Attributes);
                $this->RowNumber = $items[$i]->RowNumber;
                switch ($items[$i]->GroupType) {
                    Case "":
                        $this->Detail->CCSEventResult = CCGetEvent($this->Detail->CCSEvents, "BeforeShow", $this->Detail);
                        if ($this->Detail->Visible) {
                            $this->Attributes->Show();
                            $Tpl->parseto("Section Detail", true, "Section Detail");
                        }
                        break;
                    case "Report":
                        if ($items[$i]->Mode == 1) {
                            $this->Report_TotalRecords->SetValue($items[$i]->Report_TotalRecords);
                            $this->Report_TotalRecords->Attributes->RestoreFromArray($items[$i]->_Report_TotalRecordsAttributes);
                            $this->Report_Header->CCSEventResult = CCGetEvent($this->Report_Header->CCSEvents, "BeforeShow", $this->Report_Header);
                            if ($this->Report_Header->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Report_Header";
                                $this->Attributes->Show();
                                $this->Report_TotalRecords->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Report_Header", true, "Section Detail");
                            }
                        }
                        if ($items[$i]->Mode == 2) {
                            $this->Report_Footer->CCSEventResult = CCGetEvent($this->Report_Footer->CCSEvents, "BeforeShow", $this->Report_Footer);
                            if ($this->Report_Footer->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Report_Footer";
                                $this->NoRecords->Show();
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Report_Footer", true, "Section Detail");
                            }
                        }
                        break;
                    case "Page":
                        if ($items[$i]->Mode == 1) {
                            $this->Page_Header->CCSEventResult = CCGetEvent($this->Page_Header->CCSEvents, "BeforeShow", $this->Page_Header);
                            if ($this->Page_Header->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Page_Header";
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Page_Header", true, "Section Detail");
                            }
                        }
                        if ($items[$i]->Mode == 2 && !$this->UseClientPaging || $items[$i]->Mode == 1 && $this->UseClientPaging) {
                            $this->Page_Footer->CCSEventResult = CCGetEvent($this->Page_Footer->CCSEvents, "BeforeShow", $this->Page_Footer);
                            if ($this->Page_Footer->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Page_Footer";
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Page_Footer", true, "Section Detail");
                            }
                        }
                        break;
                    case "Sex":
                        if ($items[$i]->Mode == 1) {
                            $this->GroupSex2->SetValue($items[$i]->GroupSex2);
                            $this->GroupSex2->Attributes->RestoreFromArray($items[$i]->_GroupSex2Attributes);
                            $this->CountGroupSex->SetValue($items[$i]->CountGroupSex);
                            $this->CountGroupSex->Attributes->RestoreFromArray($items[$i]->_CountGroupSexAttributes);
                            $this->Sex_Header->CCSEventResult = CCGetEvent($this->Sex_Header->CCSEvents, "BeforeShow", $this->Sex_Header);
                            if ($this->Sex_Header->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Sex_Header";
                                $this->Attributes->Show();
                                $this->GroupSex2->Show();
                                $this->CountGroupSex->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Sex_Header", true, "Section Detail");
                            }
                        }
                        if ($items[$i]->Mode == 2) {
                            $this->Sex_Footer->CCSEventResult = CCGetEvent($this->Sex_Footer->CCSEvents, "BeforeShow", $this->Sex_Footer);
                            if ($this->Sex_Footer->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Sex_Footer";
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Sex_Footer", true, "Section Detail");
                            }
                        }
                        break;
                }
                $i++;
            } while ($i < count($items) && ($this->ViewMode == "Print" ||  !($i > 1 && $items[$i]->GroupType == 'Page' && $items[$i]->Mode == 1)));
            $Tpl->block_path = $ParentPath;
            $Tpl->parse($ReportBlock);
            $this->DataSource->close();
        }

    }
//End Show Method

} //End NewBorn42 Class @922-FCB6E20C

class clsNewBorn42DataSource extends clsDBregistry_db {  //NewBorn42DataSource Class @922-C825811D

//DataSource Variables @922-F5055419
    public $Parent = "";
    public $CCSEvents = "";
    public $CCSEventResult;
    public $ErrorBlock;
    public $CmdExecution;

    public $wp;


    // Datasource fields
    public $GroupSex2;
    public $CountGroupSex;
//End DataSource Variables

//DataSourceClass_Initialize Event @922-9536C9F8
    function clsNewBorn42DataSource(& $Parent)
    {
        $this->Parent = & $Parent;
        $this->ErrorBlock = "Report NewBorn42";
        $this->Initialize();
        $this->GroupSex2 = new clsField("GroupSex2", ccsInteger, "");
        
        $this->CountGroupSex = new clsField("CountGroupSex", ccsText, "");
        

    }
//End DataSourceClass_Initialize Event

//SetOrder Method @922-9E1383D1
    function SetOrder($SorterName, $SorterDirection)
    {
        $this->Order = "";
        $this->Order = CCGetOrder($this->Order, $SorterName, $SorterDirection, 
            "");
    }
//End SetOrder Method

//Prepare Method @922-C1DC03F7
    function Prepare()
    {
        global $CCSLocales;
        global $DefaultDateFormat;
        $this->wp = new clsSQLParameters($this->ErrorBlock);
        $this->wp->AddParameter("3", "urls_BirthDate", ccsDate, array("ShortDate"), array("yyyy", "-", "mm", "-", "dd", " ", "HH", ":", "nn", ":", "ss"), $this->Parameters["urls_BirthDate"], "", false);
        $this->wp->AddParameter("4", "urls_BirthDate1", ccsDate, array("ShortDate"), array("yyyy", "-", "mm", "-", "dd", " ", "HH", ":", "nn", ":", "ss"), $this->Parameters["urls_BirthDate1"], "", false);
        $this->wp->AddParameter("7", "urls_FacilityName", ccsText, "", "", $this->Parameters["urls_FacilityName"], "", false);
        $this->wp->Criterion[1] = "( newborn.Weight>=2500 )";
        $this->wp->Criterion[2] = "( newborn.Weight<=2999 )";
        $this->wp->Criterion[3] = $this->wp->Operation(opGreaterThanOrEqual, "newborn.BirthDate", $this->wp->GetDBValue("3"), $this->ToSQL($this->wp->GetDBValue("3"), ccsDate),false);
        $this->wp->Criterion[4] = $this->wp->Operation(opLessThanOrEqual, "newborn.BirthDate", $this->wp->GetDBValue("4"), $this->ToSQL($this->wp->GetDBValue("4"), ccsDate),false);
        $this->wp->Criterion[5] = "( newborn.Died=1 )";
        $this->wp->Criterion[6] = "( newborn.DiedID=1 )";
        $this->wp->Criterion[7] = $this->wp->Operation(opEqual, "facilities.FacilityName", $this->wp->GetDBValue("7"), $this->ToSQL($this->wp->GetDBValue("7"), ccsText),false);
        $this->Where = $this->wp->opAND(
             false, $this->wp->opAND(
             false, $this->wp->opAND(
             false, $this->wp->opAND(
             false, $this->wp->opAND(
             false, $this->wp->opAND(
             false, 
             $this->wp->Criterion[1], 
             $this->wp->Criterion[2]), 
             $this->wp->Criterion[3]), 
             $this->wp->Criterion[4]), 
             $this->wp->Criterion[5]), 
             $this->wp->Criterion[6]), 
             $this->wp->Criterion[7]);
    }
//End Prepare Method

//Open Method @922-CA3C9D7B
    function Open()
    {
        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeBuildSelect", $this->Parent);
        $this->SQL = "SELECT delivery.DeliveryID AS delivery_DeliveryID, FacilityName, Sex, NewBornID, BirthDate, Weight \n\n" .
        "FROM (delivery INNER JOIN facilities ON\n\n" .
        "delivery.FacilityID = facilities.FacilityID) INNER JOIN newborn ON\n\n" .
        "newborn.DeliveryID = delivery.DeliveryID {SQL_Where} {SQL_OrderBy}";
        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeExecuteSelect", $this->Parent);
        $this->query(CCBuildSQL($this->SQL, $this->Where, "newborn.Sex asc" .  ($this->Order ? ", " . $this->Order: "")));
        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "AfterExecuteSelect", $this->Parent);
    }
//End Open Method

//SetValues Method @922-F73A025D
    function SetValues()
    {
        $this->GroupSex2->SetDBValue(trim($this->f("Sex")));
        $this->CountGroupSex->SetDBValue($this->f("Sex"));
    }
//End SetValues Method

} //End NewBorn42DataSource Class @922-FCB6E20C

//NewBorn43 ReportGroup class @986-F27C7B2D
class clsReportGroupNewBorn43 {
    public $GroupType;
    public $mode; //1 - open, 2 - close
    public $Report_TotalRecords, $_Report_TotalRecordsAttributes;
    public $GroupSex2, $_GroupSex2Attributes;
    public $CountGroupSex, $_CountGroupSexAttributes;
    public $Attributes;
    public $ReportTotalIndex = 0;
    public $PageTotalIndex;
    public $PageNumber;
    public $RowNumber;
    public $Parent;
    public $SexTotalIndex;

    function clsReportGroupNewBorn43(& $parent) {
        $this->Parent = & $parent;
        $this->Attributes = $this->Parent->Attributes->GetAsArray();
    }
    function SetControls($PrevGroup = "") {
        $this->GroupSex2 = $this->Parent->GroupSex2->Value;
    }

    function SetTotalControls($mode = "", $PrevGroup = "") {
        $this->Report_TotalRecords = $this->Parent->Report_TotalRecords->GetTotalValue($mode);
        $this->CountGroupSex = $this->Parent->CountGroupSex->GetTotalValue($mode);
        $this->_Report_TotalRecordsAttributes = $this->Parent->Report_TotalRecords->Attributes->GetAsArray();
        $this->_GroupSex2Attributes = $this->Parent->GroupSex2->Attributes->GetAsArray();
        $this->_CountGroupSexAttributes = $this->Parent->CountGroupSex->Attributes->GetAsArray();
    }
    function SyncWithHeader(& $Header) {
        $Header->Report_TotalRecords = $this->Report_TotalRecords;
        $Header->_Report_TotalRecordsAttributes = $this->_Report_TotalRecordsAttributes;
        $Header->CountGroupSex = $this->CountGroupSex;
        $Header->_CountGroupSexAttributes = $this->_CountGroupSexAttributes;
        $this->GroupSex2 = $Header->GroupSex2;
        $Header->_GroupSex2Attributes = $this->_GroupSex2Attributes;
        $this->Parent->GroupSex2->Value = $Header->GroupSex2;
        $this->Parent->GroupSex2->Attributes->RestoreFromArray($Header->_GroupSex2Attributes);
    }
    function ChangeTotalControls() {
        $this->Report_TotalRecords = $this->Parent->Report_TotalRecords->GetValue();
        $this->CountGroupSex = $this->Parent->CountGroupSex->GetValue();
    }
}
//End NewBorn43 ReportGroup class

//NewBorn43 GroupsCollection class @986-70646EC7
class clsGroupsCollectionNewBorn43 {
    public $Groups;
    public $mPageCurrentHeaderIndex;
    public $mSexCurrentHeaderIndex;
    public $PageSize;
    public $TotalPages = 0;
    public $TotalRows = 0;
    public $CurrentPageSize = 0;
    public $Pages;
    public $Parent;
    public $LastDetailIndex;

    function clsGroupsCollectionNewBorn43(& $parent) {
        $this->Parent = & $parent;
        $this->Groups = array();
        $this->Pages  = array();
        $this->mSexCurrentHeaderIndex = 1;
        $this->mReportTotalIndex = 0;
        $this->mPageTotalIndex = 1;
    }

    function & InitGroup() {
        $group = new clsReportGroupNewBorn43($this->Parent);
        $group->RowNumber = $this->TotalRows + 1;
        $group->PageNumber = $this->TotalPages;
        $group->PageTotalIndex = $this->mPageCurrentHeaderIndex;
        $group->SexTotalIndex = $this->mSexCurrentHeaderIndex;
        return $group;
    }

    function RestoreValues() {
        $this->Parent->Report_TotalRecords->Value = $this->Parent->Report_TotalRecords->initialValue;
        $this->Parent->GroupSex2->Value = $this->Parent->GroupSex2->initialValue;
        $this->Parent->CountGroupSex->Value = $this->Parent->CountGroupSex->initialValue;
    }

    function OpenPage() {
        $this->TotalPages++;
        $Group = & $this->InitGroup();
        $this->Parent->Page_Header->CCSEventResult = CCGetEvent($this->Parent->Page_Header->CCSEvents, "OnInitialize", $this->Parent->Page_Header);
        if ($this->Parent->Page_Header->Visible)
            $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Page_Header->Height;
        $Group->SetTotalControls("GetNextValue");
        $this->Parent->Page_Header->CCSEventResult = CCGetEvent($this->Parent->Page_Header->CCSEvents, "OnCalculate", $this->Parent->Page_Header);
        $Group->SetControls();
        $Group->Mode = 1;
        $Group->GroupType = "Page";
        $Group->PageTotalIndex = count($this->Groups);
        $this->mPageCurrentHeaderIndex = count($this->Groups);
        $this->Groups[] =  & $Group;
        $this->Pages[] =  count($this->Groups) == 2 ? 0 : count($this->Groups) - 1;
    }

    function OpenGroup($groupName) {
        $Group = "";
        $OpenFlag = false;
        if ($groupName == "Report") {
            $Group = & $this->InitGroup(true);
            $this->Parent->Report_Header->CCSEventResult = CCGetEvent($this->Parent->Report_Header->CCSEvents, "OnInitialize", $this->Parent->Report_Header);
            if ($this->Parent->Report_Header->Visible) 
                $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Report_Header->Height;
                $Group->SetTotalControls("GetNextValue");
            $this->Parent->Report_Header->CCSEventResult = CCGetEvent($this->Parent->Report_Header->CCSEvents, "OnCalculate", $this->Parent->Report_Header);
            $Group->SetControls();
            $Group->Mode = 1;
            $Group->GroupType = "Report";
            $this->Groups[] = & $Group;
            $this->OpenPage();
        }
        if ($groupName == "Sex") {
            $GroupSex = & $this->InitGroup(true);
            $this->Parent->Sex_Header->CCSEventResult = CCGetEvent($this->Parent->Sex_Header->CCSEvents, "OnInitialize", $this->Parent->Sex_Header);
            if ($this->Parent->Page_Footer->Visible) 
                $OverSize = $this->Parent->Sex_Header->Height + $this->Parent->Page_Footer->Height;
            else
                $OverSize = $this->Parent->Sex_Header->Height;
            if (($this->PageSize > 0) and $this->Parent->Sex_Header->Visible and ($this->CurrentPageSize + $OverSize > $this->PageSize)) {
                $this->ClosePage();
                $this->OpenPage();
            }
            if ($this->Parent->Sex_Header->Visible)
                $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Sex_Header->Height;
                $GroupSex->SetTotalControls("GetNextValue");
            $this->Parent->Sex_Header->CCSEventResult = CCGetEvent($this->Parent->Sex_Header->CCSEvents, "OnCalculate", $this->Parent->Sex_Header);
            $GroupSex->SetControls();
            $GroupSex->Mode = 1;
            $GroupSex->GroupType = "Sex";
            $this->mSexCurrentHeaderIndex = count($this->Groups);
            $this->Groups[] = & $GroupSex;
            $this->Parent->CountGroupSex->Reset();
        }
    }

    function ClosePage() {
        $Group = & $this->InitGroup();
        $this->Parent->Page_Footer->CCSEventResult = CCGetEvent($this->Parent->Page_Footer->CCSEvents, "OnInitialize", $this->Parent->Page_Footer);
        $Group->SetTotalControls("GetPrevValue");
        $Group->SyncWithHeader($this->Groups[$this->mPageCurrentHeaderIndex]);
        $this->Parent->Page_Footer->CCSEventResult = CCGetEvent($this->Parent->Page_Footer->CCSEvents, "OnCalculate", $this->Parent->Page_Footer);
        $Group->SetControls();
        $this->RestoreValues();
        $this->CurrentPageSize = 0;
        $Group->Mode = 2;
        $Group->GroupType = "Page";
        $this->Groups[] = & $Group;
    }

    function CloseGroup($groupName)
    {
        $Group = "";
        if ($groupName == "Report") {
            $Group = & $this->InitGroup(true);
            $this->Parent->Report_Footer->CCSEventResult = CCGetEvent($this->Parent->Report_Footer->CCSEvents, "OnInitialize", $this->Parent->Report_Footer);
            if ($this->Parent->Page_Footer->Visible) 
                $OverSize = $this->Parent->Report_Footer->Height + $this->Parent->Page_Footer->Height;
            else
                $OverSize = $this->Parent->Report_Footer->Height;
            if (($this->PageSize > 0) and $this->Parent->Report_Footer->Visible and ($this->CurrentPageSize + $OverSize > $this->PageSize)) {
                $this->ClosePage();
                $this->OpenPage();
            }
            $Group->SetTotalControls("GetPrevValue");
            $Group->SyncWithHeader($this->Groups[0]);
            if ($this->Parent->Report_Footer->Visible)
                $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Report_Footer->Height;
            $this->Parent->Report_Footer->CCSEventResult = CCGetEvent($this->Parent->Report_Footer->CCSEvents, "OnCalculate", $this->Parent->Report_Footer);
            $Group->SetControls();
            $this->RestoreValues();
            $Group->Mode = 2;
            $Group->GroupType = "Report";
            $this->Groups[] = & $Group;
            $this->ClosePage();
            return;
        }
        $GroupSex = & $this->InitGroup(true);
        $this->Parent->Sex_Footer->CCSEventResult = CCGetEvent($this->Parent->Sex_Footer->CCSEvents, "OnInitialize", $this->Parent->Sex_Footer);
        if ($this->Parent->Page_Footer->Visible) 
            $OverSize = $this->Parent->Sex_Footer->Height + $this->Parent->Page_Footer->Height;
        else
            $OverSize = $this->Parent->Sex_Footer->Height;
        if (($this->PageSize > 0) and $this->Parent->Sex_Footer->Visible and ($this->CurrentPageSize + $OverSize > $this->PageSize)) {
            $this->ClosePage();
            $this->OpenPage();
        }
        $GroupSex->SetTotalControls("GetPrevValue");
        $GroupSex->SyncWithHeader($this->Groups[$this->mSexCurrentHeaderIndex]);
        if ($this->Parent->Sex_Footer->Visible)
            $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Sex_Footer->Height;
        $this->Parent->Sex_Footer->CCSEventResult = CCGetEvent($this->Parent->Sex_Footer->CCSEvents, "OnCalculate", $this->Parent->Sex_Footer);
        $GroupSex->SetControls();
        $this->Parent->CountGroupSex->Reset();
        $this->RestoreValues();
        $GroupSex->Mode = 2;
        $GroupSex->GroupType ="Sex";
        $this->Groups[] = & $GroupSex;
    }

    function AddItem()
    {
        $Group = & $this->InitGroup(true);
        $this->Parent->Detail->CCSEventResult = CCGetEvent($this->Parent->Detail->CCSEvents, "OnInitialize", $this->Parent->Detail);
        if ($this->Parent->Page_Footer->Visible) 
            $OverSize = $this->Parent->Detail->Height + $this->Parent->Page_Footer->Height;
        else
            $OverSize = $this->Parent->Detail->Height;
        if (($this->PageSize > 0) and $this->Parent->Detail->Visible and ($this->CurrentPageSize + $OverSize > $this->PageSize)) {
            $this->ClosePage();
            $this->OpenPage();
        }
        $this->TotalRows++;
        if ($this->LastDetailIndex)
            $PrevGroup = & $this->Groups[$this->LastDetailIndex];
        else
            $PrevGroup = "";
        $Group->SetTotalControls("", $PrevGroup);
        if ($this->Parent->Detail->Visible)
            $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Detail->Height;
        $this->Parent->Detail->CCSEventResult = CCGetEvent($this->Parent->Detail->CCSEvents, "OnCalculate", $this->Parent->Detail);
        $Group->SetControls($PrevGroup);
        $this->LastDetailIndex = count($this->Groups);
        $this->Groups[] = & $Group;
    }
}
//End NewBorn43 GroupsCollection class

class clsReportNewBorn43 { //NewBorn43 Class @986-6FAF0650

//NewBorn43 Variables @986-80D63D80

    public $ComponentType = "Report";
    public $PageSize;
    public $ComponentName;
    public $Visible;
    public $Errors;
    public $CCSEvents = array();
    public $CCSEventResult;
    public $RelativePath = "";
    public $ViewMode = "Web";
    public $TemplateBlock;
    public $PageNumber;
    public $RowNumber;
    public $TotalRows;
    public $TotalPages;
    public $ControlsVisible = array();
    public $IsEmpty;
    public $Attributes;
    public $DetailBlock, $Detail;
    public $Report_FooterBlock, $Report_Footer;
    public $Report_HeaderBlock, $Report_Header;
    public $Page_FooterBlock, $Page_Footer;
    public $Page_HeaderBlock, $Page_Header;
    public $Sex_HeaderBlock, $Sex_Header;
    public $Sex_FooterBlock, $Sex_Footer;
    public $SorterName, $SorterDirection;

    public $ds;
    public $DataSource;
    public $UseClientPaging = false;

    //Report Controls
    public $StaticControls, $RowControls, $Report_FooterControls, $Report_HeaderControls;
    public $Page_FooterControls, $Page_HeaderControls;
    public $Sex_HeaderControls, $Sex_FooterControls;
//End NewBorn43 Variables

//Class_Initialize Event @986-D91EECDF
    function clsReportNewBorn43($RelativePath = "", & $Parent)
    {
        global $FileName;
        global $CCSLocales;
        global $DefaultDateFormat;
        $this->ComponentName = "NewBorn43";
        $this->Visible = True;
        $this->Parent = & $Parent;
        $this->RelativePath = $RelativePath;
        $this->Attributes = new clsAttributes($this->ComponentName . ":");
        $this->Detail = new clsSection($this);
        $MinPageSize = 0;
        $MaxSectionSize = 0;
        $this->Detail->Height = 1;
        $MaxSectionSize = max($MaxSectionSize, $this->Detail->Height);
        $this->Report_Footer = new clsSection($this);
        $this->Report_Header = new clsSection($this);
        $this->Page_Footer = new clsSection($this);
        $this->Page_Footer->Height = 1;
        $MinPageSize += $this->Page_Footer->Height;
        $this->Page_Header = new clsSection($this);
        $this->Page_Header->Height = 1;
        $MinPageSize += $this->Page_Header->Height;
        $this->Sex_Footer = new clsSection($this);
        $this->Sex_Footer->Height = 1;
        $MaxSectionSize = max($MaxSectionSize, $this->Sex_Footer->Height);
        $this->Sex_Header = new clsSection($this);
        $this->Sex_Header->Height = 1;
        $MaxSectionSize = max($MaxSectionSize, $this->Sex_Header->Height);
        $this->Errors = new clsErrors();
        $this->DataSource = new clsNewBorn43DataSource($this);
        $this->ds = & $this->DataSource;
        $PageSize = CCGetParam($this->ComponentName . "PageSize", "");
        if(is_numeric($PageSize) && $PageSize > 0) {
            $this->PageSize = $PageSize;
        } else {
            if (!is_numeric($PageSize) || $PageSize < 0)
                $this->PageSize = 0;
             else if ($PageSize == "0")
                $this->PageSize = 0;
             else 
                $this->PageSize = $PageSize;
        }
        $MinPageSize += $MaxSectionSize;
        if ($this->PageSize && $MinPageSize && $this->PageSize < $MinPageSize)
            $this->PageSize = $MinPageSize;
        $this->PageNumber = $this->ViewMode == "Print" ? 1 : intval(CCGetParam($this->ComponentName . "Page", 1));
        if ($this->PageNumber <= 0 ) {
            $this->PageNumber = 1;
        }
        $this->Visible = (CCSecurityAccessCheck("1;2") == "success");

        $this->Report_TotalRecords = new clsControl(ccsReportLabel, "Report_TotalRecords", "Report_TotalRecords", ccsText, "", 0, $this);
        $this->Report_TotalRecords->TotalFunction = "Count";
        $this->Report_TotalRecords->IsEmptySource = true;
        $this->NoRecords = new clsPanel("NoRecords", $this);
        $this->GroupSex2 = new clsControl(ccsReportLabel, "GroupSex2", "GroupSex2", ccsInteger, "", "", $this);
        $this->CountGroupSex = new clsControl(ccsReportLabel, "CountGroupSex", "CountGroupSex", ccsText, "", 0, $this);
        $this->CountGroupSex->TotalFunction = "Count";
    }
//End Class_Initialize Event

//Initialize Method @986-6C59EE65
    function Initialize()
    {
        if(!$this->Visible) return;

        $this->DataSource->PageSize = $this->PageSize;
        $this->DataSource->AbsolutePage = $this->PageNumber;
        $this->DataSource->SetOrder($this->SorterName, $this->SorterDirection);
    }
//End Initialize Method

//CheckErrors Method @986-CD002B70
    function CheckErrors()
    {
        $errors = false;
        $errors = ($errors || $this->Report_TotalRecords->Errors->Count());
        $errors = ($errors || $this->GroupSex2->Errors->Count());
        $errors = ($errors || $this->CountGroupSex->Errors->Count());
        $errors = ($errors || $this->Errors->Count());
        $errors = ($errors || $this->DataSource->Errors->Count());
        return $errors;
    }
//End CheckErrors Method

//GetErrors Method @986-B2E862A1
    function GetErrors()
    {
        $errors = "";
        $errors = ComposeStrings($errors, $this->Report_TotalRecords->Errors->ToString());
        $errors = ComposeStrings($errors, $this->GroupSex2->Errors->ToString());
        $errors = ComposeStrings($errors, $this->CountGroupSex->Errors->ToString());
        $errors = ComposeStrings($errors, $this->Errors->ToString());
        $errors = ComposeStrings($errors, $this->DataSource->Errors->ToString());
        return $errors;
    }
//End GetErrors Method

//Show Method @986-A9EA8B33
    function Show()
    {
        global $Tpl;
        global $CCSLocales;
        if(!$this->Visible) return;

        $ShownRecords = 0;

        $this->DataSource->Parameters["urls_BirthDate"] = CCGetFromGet("s_BirthDate", NULL);
        $this->DataSource->Parameters["urls_BirthDate1"] = CCGetFromGet("s_BirthDate1", NULL);
        $this->DataSource->Parameters["urls_FacilityName"] = CCGetFromGet("s_FacilityName", NULL);

        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeSelect", $this);


        $this->DataSource->Prepare();
        $this->DataSource->Open();

        $SexKey = "";
        $Groups = new clsGroupsCollectionNewBorn43($this);
        $Groups->PageSize = $this->PageSize > 0 ? $this->PageSize : 0;

        $is_next_record = $this->DataSource->next_record();
        $this->IsEmpty = ! $is_next_record;
        while($is_next_record) {
            $this->DataSource->SetValues();
            $this->GroupSex2->SetValue($this->DataSource->GroupSex2->GetValue());
            $this->CountGroupSex->SetValue($this->DataSource->CountGroupSex->GetValue());
            $this->Report_TotalRecords->SetValue(1);
            if (count($Groups->Groups) == 0) $Groups->OpenGroup("Report");
            if (count($Groups->Groups) == 2 or $SexKey != $this->DataSource->f("Sex")) {
                $Groups->OpenGroup("Sex");
            }
            $Groups->AddItem();
            $SexKey = $this->DataSource->f("Sex");
            $is_next_record = $this->DataSource->next_record();
            if (!$is_next_record || $SexKey != $this->DataSource->f("Sex")) {
                $Groups->CloseGroup("Sex");
            }
        }
        if (!count($Groups->Groups)) 
            $Groups->OpenGroup("Report");
        else
            $this->NoRecords->Visible = false;
        $Groups->CloseGroup("Report");
        $this->TotalPages = $Groups->TotalPages;
        $this->TotalRows = $Groups->TotalRows;

        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeShow", $this);
        if(!$this->Visible) return;

        $this->Attributes->Show();
        $ReportBlock = "Report " . $this->ComponentName;
        $ParentPath = $Tpl->block_path;
        $Tpl->block_path = $ParentPath . "/" . $ReportBlock;

        if($this->CheckErrors()) {
            $Tpl->replaceblock("", $this->GetErrors());
            $Tpl->block_path = $ParentPath;
            return;
        } else {
            $items = & $Groups->Groups;
            $i = $Groups->Pages[min($this->PageNumber, $Groups->TotalPages) - 1];
            $this->ControlsVisible["GroupSex2"] = $this->GroupSex2->Visible;
            $this->ControlsVisible["CountGroupSex"] = $this->CountGroupSex->Visible;
            do {
                $this->Attributes->RestoreFromArray($items[$i]->Attributes);
                $this->RowNumber = $items[$i]->RowNumber;
                switch ($items[$i]->GroupType) {
                    Case "":
                        $this->Detail->CCSEventResult = CCGetEvent($this->Detail->CCSEvents, "BeforeShow", $this->Detail);
                        if ($this->Detail->Visible) {
                            $this->Attributes->Show();
                            $Tpl->parseto("Section Detail", true, "Section Detail");
                        }
                        break;
                    case "Report":
                        if ($items[$i]->Mode == 1) {
                            $this->Report_TotalRecords->SetValue($items[$i]->Report_TotalRecords);
                            $this->Report_TotalRecords->Attributes->RestoreFromArray($items[$i]->_Report_TotalRecordsAttributes);
                            $this->Report_Header->CCSEventResult = CCGetEvent($this->Report_Header->CCSEvents, "BeforeShow", $this->Report_Header);
                            if ($this->Report_Header->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Report_Header";
                                $this->Attributes->Show();
                                $this->Report_TotalRecords->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Report_Header", true, "Section Detail");
                            }
                        }
                        if ($items[$i]->Mode == 2) {
                            $this->Report_Footer->CCSEventResult = CCGetEvent($this->Report_Footer->CCSEvents, "BeforeShow", $this->Report_Footer);
                            if ($this->Report_Footer->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Report_Footer";
                                $this->NoRecords->Show();
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Report_Footer", true, "Section Detail");
                            }
                        }
                        break;
                    case "Page":
                        if ($items[$i]->Mode == 1) {
                            $this->Page_Header->CCSEventResult = CCGetEvent($this->Page_Header->CCSEvents, "BeforeShow", $this->Page_Header);
                            if ($this->Page_Header->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Page_Header";
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Page_Header", true, "Section Detail");
                            }
                        }
                        if ($items[$i]->Mode == 2 && !$this->UseClientPaging || $items[$i]->Mode == 1 && $this->UseClientPaging) {
                            $this->Page_Footer->CCSEventResult = CCGetEvent($this->Page_Footer->CCSEvents, "BeforeShow", $this->Page_Footer);
                            if ($this->Page_Footer->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Page_Footer";
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Page_Footer", true, "Section Detail");
                            }
                        }
                        break;
                    case "Sex":
                        if ($items[$i]->Mode == 1) {
                            $this->GroupSex2->SetValue($items[$i]->GroupSex2);
                            $this->GroupSex2->Attributes->RestoreFromArray($items[$i]->_GroupSex2Attributes);
                            $this->CountGroupSex->SetValue($items[$i]->CountGroupSex);
                            $this->CountGroupSex->Attributes->RestoreFromArray($items[$i]->_CountGroupSexAttributes);
                            $this->Sex_Header->CCSEventResult = CCGetEvent($this->Sex_Header->CCSEvents, "BeforeShow", $this->Sex_Header);
                            if ($this->Sex_Header->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Sex_Header";
                                $this->Attributes->Show();
                                $this->GroupSex2->Show();
                                $this->CountGroupSex->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Sex_Header", true, "Section Detail");
                            }
                        }
                        if ($items[$i]->Mode == 2) {
                            $this->Sex_Footer->CCSEventResult = CCGetEvent($this->Sex_Footer->CCSEvents, "BeforeShow", $this->Sex_Footer);
                            if ($this->Sex_Footer->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Sex_Footer";
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Sex_Footer", true, "Section Detail");
                            }
                        }
                        break;
                }
                $i++;
            } while ($i < count($items) && ($this->ViewMode == "Print" ||  !($i > 1 && $items[$i]->GroupType == 'Page' && $items[$i]->Mode == 1)));
            $Tpl->block_path = $ParentPath;
            $Tpl->parse($ReportBlock);
            $this->DataSource->close();
        }

    }
//End Show Method

} //End NewBorn43 Class @986-FCB6E20C

class clsNewBorn43DataSource extends clsDBregistry_db {  //NewBorn43DataSource Class @986-07BB96D5

//DataSource Variables @986-F5055419
    public $Parent = "";
    public $CCSEvents = "";
    public $CCSEventResult;
    public $ErrorBlock;
    public $CmdExecution;

    public $wp;


    // Datasource fields
    public $GroupSex2;
    public $CountGroupSex;
//End DataSource Variables

//DataSourceClass_Initialize Event @986-86A1352C
    function clsNewBorn43DataSource(& $Parent)
    {
        $this->Parent = & $Parent;
        $this->ErrorBlock = "Report NewBorn43";
        $this->Initialize();
        $this->GroupSex2 = new clsField("GroupSex2", ccsInteger, "");
        
        $this->CountGroupSex = new clsField("CountGroupSex", ccsText, "");
        

    }
//End DataSourceClass_Initialize Event

//SetOrder Method @986-9E1383D1
    function SetOrder($SorterName, $SorterDirection)
    {
        $this->Order = "";
        $this->Order = CCGetOrder($this->Order, $SorterName, $SorterDirection, 
            "");
    }
//End SetOrder Method

//Prepare Method @986-4B9F87F3
    function Prepare()
    {
        global $CCSLocales;
        global $DefaultDateFormat;
        $this->wp = new clsSQLParameters($this->ErrorBlock);
        $this->wp->AddParameter("3", "urls_BirthDate", ccsDate, array("ShortDate"), array("yyyy", "-", "mm", "-", "dd", " ", "HH", ":", "nn", ":", "ss"), $this->Parameters["urls_BirthDate"], "", false);
        $this->wp->AddParameter("4", "urls_BirthDate1", ccsDate, array("ShortDate"), array("yyyy", "-", "mm", "-", "dd", " ", "HH", ":", "nn", ":", "ss"), $this->Parameters["urls_BirthDate1"], "", false);
        $this->wp->AddParameter("7", "urls_FacilityName", ccsText, "", "", $this->Parameters["urls_FacilityName"], "", false);
        $this->wp->Criterion[1] = "( newborn.Weight>=3000 )";
        $this->wp->Criterion[2] = "( newborn.Weight<=3499 )";
        $this->wp->Criterion[3] = $this->wp->Operation(opGreaterThanOrEqual, "newborn.BirthDate", $this->wp->GetDBValue("3"), $this->ToSQL($this->wp->GetDBValue("3"), ccsDate),false);
        $this->wp->Criterion[4] = $this->wp->Operation(opLessThanOrEqual, "newborn.BirthDate", $this->wp->GetDBValue("4"), $this->ToSQL($this->wp->GetDBValue("4"), ccsDate),false);
        $this->wp->Criterion[5] = "( newborn.Died=1 )";
        $this->wp->Criterion[6] = "( newborn.DiedID=1 )";
        $this->wp->Criterion[7] = $this->wp->Operation(opEqual, "facilities.FacilityName", $this->wp->GetDBValue("7"), $this->ToSQL($this->wp->GetDBValue("7"), ccsText),false);
        $this->Where = $this->wp->opAND(
             false, $this->wp->opAND(
             false, $this->wp->opAND(
             false, $this->wp->opAND(
             false, $this->wp->opAND(
             false, $this->wp->opAND(
             false, 
             $this->wp->Criterion[1], 
             $this->wp->Criterion[2]), 
             $this->wp->Criterion[3]), 
             $this->wp->Criterion[4]), 
             $this->wp->Criterion[5]), 
             $this->wp->Criterion[6]), 
             $this->wp->Criterion[7]);
    }
//End Prepare Method

//Open Method @986-CA3C9D7B
    function Open()
    {
        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeBuildSelect", $this->Parent);
        $this->SQL = "SELECT delivery.DeliveryID AS delivery_DeliveryID, FacilityName, Sex, NewBornID, BirthDate, Weight \n\n" .
        "FROM (delivery INNER JOIN facilities ON\n\n" .
        "delivery.FacilityID = facilities.FacilityID) INNER JOIN newborn ON\n\n" .
        "newborn.DeliveryID = delivery.DeliveryID {SQL_Where} {SQL_OrderBy}";
        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeExecuteSelect", $this->Parent);
        $this->query(CCBuildSQL($this->SQL, $this->Where, "newborn.Sex asc" .  ($this->Order ? ", " . $this->Order: "")));
        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "AfterExecuteSelect", $this->Parent);
    }
//End Open Method

//SetValues Method @986-F73A025D
    function SetValues()
    {
        $this->GroupSex2->SetDBValue(trim($this->f("Sex")));
        $this->CountGroupSex->SetDBValue($this->f("Sex"));
    }
//End SetValues Method

} //End NewBorn43DataSource Class @986-FCB6E20C

//NewBorn44 ReportGroup class @1050-BC380882
class clsReportGroupNewBorn44 {
    public $GroupType;
    public $mode; //1 - open, 2 - close
    public $Report_TotalRecords, $_Report_TotalRecordsAttributes;
    public $GroupSex2, $_GroupSex2Attributes;
    public $CountGroupSex, $_CountGroupSexAttributes;
    public $Attributes;
    public $ReportTotalIndex = 0;
    public $PageTotalIndex;
    public $PageNumber;
    public $RowNumber;
    public $Parent;
    public $SexTotalIndex;

    function clsReportGroupNewBorn44(& $parent) {
        $this->Parent = & $parent;
        $this->Attributes = $this->Parent->Attributes->GetAsArray();
    }
    function SetControls($PrevGroup = "") {
        $this->GroupSex2 = $this->Parent->GroupSex2->Value;
    }

    function SetTotalControls($mode = "", $PrevGroup = "") {
        $this->Report_TotalRecords = $this->Parent->Report_TotalRecords->GetTotalValue($mode);
        $this->CountGroupSex = $this->Parent->CountGroupSex->GetTotalValue($mode);
        $this->_Report_TotalRecordsAttributes = $this->Parent->Report_TotalRecords->Attributes->GetAsArray();
        $this->_GroupSex2Attributes = $this->Parent->GroupSex2->Attributes->GetAsArray();
        $this->_CountGroupSexAttributes = $this->Parent->CountGroupSex->Attributes->GetAsArray();
    }
    function SyncWithHeader(& $Header) {
        $Header->Report_TotalRecords = $this->Report_TotalRecords;
        $Header->_Report_TotalRecordsAttributes = $this->_Report_TotalRecordsAttributes;
        $Header->CountGroupSex = $this->CountGroupSex;
        $Header->_CountGroupSexAttributes = $this->_CountGroupSexAttributes;
        $this->GroupSex2 = $Header->GroupSex2;
        $Header->_GroupSex2Attributes = $this->_GroupSex2Attributes;
        $this->Parent->GroupSex2->Value = $Header->GroupSex2;
        $this->Parent->GroupSex2->Attributes->RestoreFromArray($Header->_GroupSex2Attributes);
    }
    function ChangeTotalControls() {
        $this->Report_TotalRecords = $this->Parent->Report_TotalRecords->GetValue();
        $this->CountGroupSex = $this->Parent->CountGroupSex->GetValue();
    }
}
//End NewBorn44 ReportGroup class

//NewBorn44 GroupsCollection class @1050-B3FCC39B
class clsGroupsCollectionNewBorn44 {
    public $Groups;
    public $mPageCurrentHeaderIndex;
    public $mSexCurrentHeaderIndex;
    public $PageSize;
    public $TotalPages = 0;
    public $TotalRows = 0;
    public $CurrentPageSize = 0;
    public $Pages;
    public $Parent;
    public $LastDetailIndex;

    function clsGroupsCollectionNewBorn44(& $parent) {
        $this->Parent = & $parent;
        $this->Groups = array();
        $this->Pages  = array();
        $this->mSexCurrentHeaderIndex = 1;
        $this->mReportTotalIndex = 0;
        $this->mPageTotalIndex = 1;
    }

    function & InitGroup() {
        $group = new clsReportGroupNewBorn44($this->Parent);
        $group->RowNumber = $this->TotalRows + 1;
        $group->PageNumber = $this->TotalPages;
        $group->PageTotalIndex = $this->mPageCurrentHeaderIndex;
        $group->SexTotalIndex = $this->mSexCurrentHeaderIndex;
        return $group;
    }

    function RestoreValues() {
        $this->Parent->Report_TotalRecords->Value = $this->Parent->Report_TotalRecords->initialValue;
        $this->Parent->GroupSex2->Value = $this->Parent->GroupSex2->initialValue;
        $this->Parent->CountGroupSex->Value = $this->Parent->CountGroupSex->initialValue;
    }

    function OpenPage() {
        $this->TotalPages++;
        $Group = & $this->InitGroup();
        $this->Parent->Page_Header->CCSEventResult = CCGetEvent($this->Parent->Page_Header->CCSEvents, "OnInitialize", $this->Parent->Page_Header);
        if ($this->Parent->Page_Header->Visible)
            $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Page_Header->Height;
        $Group->SetTotalControls("GetNextValue");
        $this->Parent->Page_Header->CCSEventResult = CCGetEvent($this->Parent->Page_Header->CCSEvents, "OnCalculate", $this->Parent->Page_Header);
        $Group->SetControls();
        $Group->Mode = 1;
        $Group->GroupType = "Page";
        $Group->PageTotalIndex = count($this->Groups);
        $this->mPageCurrentHeaderIndex = count($this->Groups);
        $this->Groups[] =  & $Group;
        $this->Pages[] =  count($this->Groups) == 2 ? 0 : count($this->Groups) - 1;
    }

    function OpenGroup($groupName) {
        $Group = "";
        $OpenFlag = false;
        if ($groupName == "Report") {
            $Group = & $this->InitGroup(true);
            $this->Parent->Report_Header->CCSEventResult = CCGetEvent($this->Parent->Report_Header->CCSEvents, "OnInitialize", $this->Parent->Report_Header);
            if ($this->Parent->Report_Header->Visible) 
                $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Report_Header->Height;
                $Group->SetTotalControls("GetNextValue");
            $this->Parent->Report_Header->CCSEventResult = CCGetEvent($this->Parent->Report_Header->CCSEvents, "OnCalculate", $this->Parent->Report_Header);
            $Group->SetControls();
            $Group->Mode = 1;
            $Group->GroupType = "Report";
            $this->Groups[] = & $Group;
            $this->OpenPage();
        }
        if ($groupName == "Sex") {
            $GroupSex = & $this->InitGroup(true);
            $this->Parent->Sex_Header->CCSEventResult = CCGetEvent($this->Parent->Sex_Header->CCSEvents, "OnInitialize", $this->Parent->Sex_Header);
            if ($this->Parent->Page_Footer->Visible) 
                $OverSize = $this->Parent->Sex_Header->Height + $this->Parent->Page_Footer->Height;
            else
                $OverSize = $this->Parent->Sex_Header->Height;
            if (($this->PageSize > 0) and $this->Parent->Sex_Header->Visible and ($this->CurrentPageSize + $OverSize > $this->PageSize)) {
                $this->ClosePage();
                $this->OpenPage();
            }
            if ($this->Parent->Sex_Header->Visible)
                $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Sex_Header->Height;
                $GroupSex->SetTotalControls("GetNextValue");
            $this->Parent->Sex_Header->CCSEventResult = CCGetEvent($this->Parent->Sex_Header->CCSEvents, "OnCalculate", $this->Parent->Sex_Header);
            $GroupSex->SetControls();
            $GroupSex->Mode = 1;
            $GroupSex->GroupType = "Sex";
            $this->mSexCurrentHeaderIndex = count($this->Groups);
            $this->Groups[] = & $GroupSex;
            $this->Parent->CountGroupSex->Reset();
        }
    }

    function ClosePage() {
        $Group = & $this->InitGroup();
        $this->Parent->Page_Footer->CCSEventResult = CCGetEvent($this->Parent->Page_Footer->CCSEvents, "OnInitialize", $this->Parent->Page_Footer);
        $Group->SetTotalControls("GetPrevValue");
        $Group->SyncWithHeader($this->Groups[$this->mPageCurrentHeaderIndex]);
        $this->Parent->Page_Footer->CCSEventResult = CCGetEvent($this->Parent->Page_Footer->CCSEvents, "OnCalculate", $this->Parent->Page_Footer);
        $Group->SetControls();
        $this->RestoreValues();
        $this->CurrentPageSize = 0;
        $Group->Mode = 2;
        $Group->GroupType = "Page";
        $this->Groups[] = & $Group;
    }

    function CloseGroup($groupName)
    {
        $Group = "";
        if ($groupName == "Report") {
            $Group = & $this->InitGroup(true);
            $this->Parent->Report_Footer->CCSEventResult = CCGetEvent($this->Parent->Report_Footer->CCSEvents, "OnInitialize", $this->Parent->Report_Footer);
            if ($this->Parent->Page_Footer->Visible) 
                $OverSize = $this->Parent->Report_Footer->Height + $this->Parent->Page_Footer->Height;
            else
                $OverSize = $this->Parent->Report_Footer->Height;
            if (($this->PageSize > 0) and $this->Parent->Report_Footer->Visible and ($this->CurrentPageSize + $OverSize > $this->PageSize)) {
                $this->ClosePage();
                $this->OpenPage();
            }
            $Group->SetTotalControls("GetPrevValue");
            $Group->SyncWithHeader($this->Groups[0]);
            if ($this->Parent->Report_Footer->Visible)
                $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Report_Footer->Height;
            $this->Parent->Report_Footer->CCSEventResult = CCGetEvent($this->Parent->Report_Footer->CCSEvents, "OnCalculate", $this->Parent->Report_Footer);
            $Group->SetControls();
            $this->RestoreValues();
            $Group->Mode = 2;
            $Group->GroupType = "Report";
            $this->Groups[] = & $Group;
            $this->ClosePage();
            return;
        }
        $GroupSex = & $this->InitGroup(true);
        $this->Parent->Sex_Footer->CCSEventResult = CCGetEvent($this->Parent->Sex_Footer->CCSEvents, "OnInitialize", $this->Parent->Sex_Footer);
        if ($this->Parent->Page_Footer->Visible) 
            $OverSize = $this->Parent->Sex_Footer->Height + $this->Parent->Page_Footer->Height;
        else
            $OverSize = $this->Parent->Sex_Footer->Height;
        if (($this->PageSize > 0) and $this->Parent->Sex_Footer->Visible and ($this->CurrentPageSize + $OverSize > $this->PageSize)) {
            $this->ClosePage();
            $this->OpenPage();
        }
        $GroupSex->SetTotalControls("GetPrevValue");
        $GroupSex->SyncWithHeader($this->Groups[$this->mSexCurrentHeaderIndex]);
        if ($this->Parent->Sex_Footer->Visible)
            $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Sex_Footer->Height;
        $this->Parent->Sex_Footer->CCSEventResult = CCGetEvent($this->Parent->Sex_Footer->CCSEvents, "OnCalculate", $this->Parent->Sex_Footer);
        $GroupSex->SetControls();
        $this->Parent->CountGroupSex->Reset();
        $this->RestoreValues();
        $GroupSex->Mode = 2;
        $GroupSex->GroupType ="Sex";
        $this->Groups[] = & $GroupSex;
    }

    function AddItem()
    {
        $Group = & $this->InitGroup(true);
        $this->Parent->Detail->CCSEventResult = CCGetEvent($this->Parent->Detail->CCSEvents, "OnInitialize", $this->Parent->Detail);
        if ($this->Parent->Page_Footer->Visible) 
            $OverSize = $this->Parent->Detail->Height + $this->Parent->Page_Footer->Height;
        else
            $OverSize = $this->Parent->Detail->Height;
        if (($this->PageSize > 0) and $this->Parent->Detail->Visible and ($this->CurrentPageSize + $OverSize > $this->PageSize)) {
            $this->ClosePage();
            $this->OpenPage();
        }
        $this->TotalRows++;
        if ($this->LastDetailIndex)
            $PrevGroup = & $this->Groups[$this->LastDetailIndex];
        else
            $PrevGroup = "";
        $Group->SetTotalControls("", $PrevGroup);
        if ($this->Parent->Detail->Visible)
            $this->CurrentPageSize = $this->CurrentPageSize + $this->Parent->Detail->Height;
        $this->Parent->Detail->CCSEventResult = CCGetEvent($this->Parent->Detail->CCSEvents, "OnCalculate", $this->Parent->Detail);
        $Group->SetControls($PrevGroup);
        $this->LastDetailIndex = count($this->Groups);
        $this->Groups[] = & $Group;
    }
}
//End NewBorn44 GroupsCollection class

class clsReportNewBorn44 { //NewBorn44 Class @1050-20EE9097

//NewBorn44 Variables @1050-80D63D80

    public $ComponentType = "Report";
    public $PageSize;
    public $ComponentName;
    public $Visible;
    public $Errors;
    public $CCSEvents = array();
    public $CCSEventResult;
    public $RelativePath = "";
    public $ViewMode = "Web";
    public $TemplateBlock;
    public $PageNumber;
    public $RowNumber;
    public $TotalRows;
    public $TotalPages;
    public $ControlsVisible = array();
    public $IsEmpty;
    public $Attributes;
    public $DetailBlock, $Detail;
    public $Report_FooterBlock, $Report_Footer;
    public $Report_HeaderBlock, $Report_Header;
    public $Page_FooterBlock, $Page_Footer;
    public $Page_HeaderBlock, $Page_Header;
    public $Sex_HeaderBlock, $Sex_Header;
    public $Sex_FooterBlock, $Sex_Footer;
    public $SorterName, $SorterDirection;

    public $ds;
    public $DataSource;
    public $UseClientPaging = false;

    //Report Controls
    public $StaticControls, $RowControls, $Report_FooterControls, $Report_HeaderControls;
    public $Page_FooterControls, $Page_HeaderControls;
    public $Sex_HeaderControls, $Sex_FooterControls;
//End NewBorn44 Variables

//Class_Initialize Event @1050-2091D35A
    function clsReportNewBorn44($RelativePath = "", & $Parent)
    {
        global $FileName;
        global $CCSLocales;
        global $DefaultDateFormat;
        $this->ComponentName = "NewBorn44";
        $this->Visible = True;
        $this->Parent = & $Parent;
        $this->RelativePath = $RelativePath;
        $this->Attributes = new clsAttributes($this->ComponentName . ":");
        $this->Detail = new clsSection($this);
        $MinPageSize = 0;
        $MaxSectionSize = 0;
        $this->Detail->Height = 1;
        $MaxSectionSize = max($MaxSectionSize, $this->Detail->Height);
        $this->Report_Footer = new clsSection($this);
        $this->Report_Header = new clsSection($this);
        $this->Page_Footer = new clsSection($this);
        $this->Page_Footer->Height = 1;
        $MinPageSize += $this->Page_Footer->Height;
        $this->Page_Header = new clsSection($this);
        $this->Page_Header->Height = 1;
        $MinPageSize += $this->Page_Header->Height;
        $this->Sex_Footer = new clsSection($this);
        $this->Sex_Footer->Height = 1;
        $MaxSectionSize = max($MaxSectionSize, $this->Sex_Footer->Height);
        $this->Sex_Header = new clsSection($this);
        $this->Sex_Header->Height = 1;
        $MaxSectionSize = max($MaxSectionSize, $this->Sex_Header->Height);
        $this->Errors = new clsErrors();
        $this->DataSource = new clsNewBorn44DataSource($this);
        $this->ds = & $this->DataSource;
        $PageSize = CCGetParam($this->ComponentName . "PageSize", "");
        if(is_numeric($PageSize) && $PageSize > 0) {
            $this->PageSize = $PageSize;
        } else {
            if (!is_numeric($PageSize) || $PageSize < 0)
                $this->PageSize = 0;
             else if ($PageSize == "0")
                $this->PageSize = 0;
             else 
                $this->PageSize = $PageSize;
        }
        $MinPageSize += $MaxSectionSize;
        if ($this->PageSize && $MinPageSize && $this->PageSize < $MinPageSize)
            $this->PageSize = $MinPageSize;
        $this->PageNumber = $this->ViewMode == "Print" ? 1 : intval(CCGetParam($this->ComponentName . "Page", 1));
        if ($this->PageNumber <= 0 ) {
            $this->PageNumber = 1;
        }
        $this->Visible = (CCSecurityAccessCheck("1;2") == "success");

        $this->Report_TotalRecords = new clsControl(ccsReportLabel, "Report_TotalRecords", "Report_TotalRecords", ccsText, "", 0, $this);
        $this->Report_TotalRecords->TotalFunction = "Count";
        $this->Report_TotalRecords->IsEmptySource = true;
        $this->NoRecords = new clsPanel("NoRecords", $this);
        $this->GroupSex2 = new clsControl(ccsReportLabel, "GroupSex2", "GroupSex2", ccsInteger, "", "", $this);
        $this->CountGroupSex = new clsControl(ccsReportLabel, "CountGroupSex", "CountGroupSex", ccsText, "", 0, $this);
        $this->CountGroupSex->TotalFunction = "Count";
    }
//End Class_Initialize Event

//Initialize Method @1050-6C59EE65
    function Initialize()
    {
        if(!$this->Visible) return;

        $this->DataSource->PageSize = $this->PageSize;
        $this->DataSource->AbsolutePage = $this->PageNumber;
        $this->DataSource->SetOrder($this->SorterName, $this->SorterDirection);
    }
//End Initialize Method

//CheckErrors Method @1050-CD002B70
    function CheckErrors()
    {
        $errors = false;
        $errors = ($errors || $this->Report_TotalRecords->Errors->Count());
        $errors = ($errors || $this->GroupSex2->Errors->Count());
        $errors = ($errors || $this->CountGroupSex->Errors->Count());
        $errors = ($errors || $this->Errors->Count());
        $errors = ($errors || $this->DataSource->Errors->Count());
        return $errors;
    }
//End CheckErrors Method

//GetErrors Method @1050-B2E862A1
    function GetErrors()
    {
        $errors = "";
        $errors = ComposeStrings($errors, $this->Report_TotalRecords->Errors->ToString());
        $errors = ComposeStrings($errors, $this->GroupSex2->Errors->ToString());
        $errors = ComposeStrings($errors, $this->CountGroupSex->Errors->ToString());
        $errors = ComposeStrings($errors, $this->Errors->ToString());
        $errors = ComposeStrings($errors, $this->DataSource->Errors->ToString());
        return $errors;
    }
//End GetErrors Method

//Show Method @1050-58CA114B
    function Show()
    {
        global $Tpl;
        global $CCSLocales;
        if(!$this->Visible) return;

        $ShownRecords = 0;

        $this->DataSource->Parameters["urls_BirthDate"] = CCGetFromGet("s_BirthDate", NULL);
        $this->DataSource->Parameters["urls_BirthDate1"] = CCGetFromGet("s_BirthDate1", NULL);
        $this->DataSource->Parameters["urls_FacilityName"] = CCGetFromGet("s_FacilityName", NULL);

        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeSelect", $this);


        $this->DataSource->Prepare();
        $this->DataSource->Open();

        $SexKey = "";
        $Groups = new clsGroupsCollectionNewBorn44($this);
        $Groups->PageSize = $this->PageSize > 0 ? $this->PageSize : 0;

        $is_next_record = $this->DataSource->next_record();
        $this->IsEmpty = ! $is_next_record;
        while($is_next_record) {
            $this->DataSource->SetValues();
            $this->GroupSex2->SetValue($this->DataSource->GroupSex2->GetValue());
            $this->CountGroupSex->SetValue($this->DataSource->CountGroupSex->GetValue());
            $this->Report_TotalRecords->SetValue(1);
            if (count($Groups->Groups) == 0) $Groups->OpenGroup("Report");
            if (count($Groups->Groups) == 2 or $SexKey != $this->DataSource->f("Sex")) {
                $Groups->OpenGroup("Sex");
            }
            $Groups->AddItem();
            $SexKey = $this->DataSource->f("Sex");
            $is_next_record = $this->DataSource->next_record();
            if (!$is_next_record || $SexKey != $this->DataSource->f("Sex")) {
                $Groups->CloseGroup("Sex");
            }
        }
        if (!count($Groups->Groups)) 
            $Groups->OpenGroup("Report");
        else
            $this->NoRecords->Visible = false;
        $Groups->CloseGroup("Report");
        $this->TotalPages = $Groups->TotalPages;
        $this->TotalRows = $Groups->TotalRows;

        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeShow", $this);
        if(!$this->Visible) return;

        $this->Attributes->Show();
        $ReportBlock = "Report " . $this->ComponentName;
        $ParentPath = $Tpl->block_path;
        $Tpl->block_path = $ParentPath . "/" . $ReportBlock;

        if($this->CheckErrors()) {
            $Tpl->replaceblock("", $this->GetErrors());
            $Tpl->block_path = $ParentPath;
            return;
        } else {
            $items = & $Groups->Groups;
            $i = $Groups->Pages[min($this->PageNumber, $Groups->TotalPages) - 1];
            $this->ControlsVisible["GroupSex2"] = $this->GroupSex2->Visible;
            $this->ControlsVisible["CountGroupSex"] = $this->CountGroupSex->Visible;
            do {
                $this->Attributes->RestoreFromArray($items[$i]->Attributes);
                $this->RowNumber = $items[$i]->RowNumber;
                switch ($items[$i]->GroupType) {
                    Case "":
                        $this->Detail->CCSEventResult = CCGetEvent($this->Detail->CCSEvents, "BeforeShow", $this->Detail);
                        if ($this->Detail->Visible) {
                            $this->Attributes->Show();
                            $Tpl->parseto("Section Detail", true, "Section Detail");
                        }
                        break;
                    case "Report":
                        if ($items[$i]->Mode == 1) {
                            $this->Report_TotalRecords->SetValue($items[$i]->Report_TotalRecords);
                            $this->Report_TotalRecords->Attributes->RestoreFromArray($items[$i]->_Report_TotalRecordsAttributes);
                            $this->Report_Header->CCSEventResult = CCGetEvent($this->Report_Header->CCSEvents, "BeforeShow", $this->Report_Header);
                            if ($this->Report_Header->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Report_Header";
                                $this->Attributes->Show();
                                $this->Report_TotalRecords->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Report_Header", true, "Section Detail");
                            }
                        }
                        if ($items[$i]->Mode == 2) {
                            $this->Report_Footer->CCSEventResult = CCGetEvent($this->Report_Footer->CCSEvents, "BeforeShow", $this->Report_Footer);
                            if ($this->Report_Footer->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Report_Footer";
                                $this->NoRecords->Show();
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Report_Footer", true, "Section Detail");
                            }
                        }
                        break;
                    case "Page":
                        if ($items[$i]->Mode == 1) {
                            $this->Page_Header->CCSEventResult = CCGetEvent($this->Page_Header->CCSEvents, "BeforeShow", $this->Page_Header);
                            if ($this->Page_Header->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Page_Header";
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Page_Header", true, "Section Detail");
                            }
                        }
                        if ($items[$i]->Mode == 2 && !$this->UseClientPaging || $items[$i]->Mode == 1 && $this->UseClientPaging) {
                            $this->Page_Footer->CCSEventResult = CCGetEvent($this->Page_Footer->CCSEvents, "BeforeShow", $this->Page_Footer);
                            if ($this->Page_Footer->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Page_Footer";
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Page_Footer", true, "Section Detail");
                            }
                        }
                        break;
                    case "Sex":
                        if ($items[$i]->Mode == 1) {
                            $this->GroupSex2->SetValue($items[$i]->GroupSex2);
                            $this->GroupSex2->Attributes->RestoreFromArray($items[$i]->_GroupSex2Attributes);
                            $this->CountGroupSex->SetValue($items[$i]->CountGroupSex);
                            $this->CountGroupSex->Attributes->RestoreFromArray($items[$i]->_CountGroupSexAttributes);
                            $this->Sex_Header->CCSEventResult = CCGetEvent($this->Sex_Header->CCSEvents, "BeforeShow", $this->Sex_Header);
                            if ($this->Sex_Header->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Sex_Header";
                                $this->Attributes->Show();
                                $this->GroupSex2->Show();
                                $this->CountGroupSex->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Sex_Header", true, "Section Detail");
                            }
                        }
                        if ($items[$i]->Mode == 2) {
                            $this->Sex_Footer->CCSEventResult = CCGetEvent($this->Sex_Footer->CCSEvents, "BeforeShow", $this->Sex_Footer);
                            if ($this->Sex_Footer->Visible) {
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock . "/Section Sex_Footer";
                                $this->Attributes->Show();
                                $Tpl->block_path = $ParentPath . "/" . $ReportBlock;
                                $Tpl->parseto("Section Sex_Footer", true, "Section Detail");
                            }
                        }
                        break;
                }
                $i++;
            } while ($i < count($items) && ($this->ViewMode == "Print" ||  !($i > 1 && $items[$i]->GroupType == 'Page' && $items[$i]->Mode == 1)));
            $Tpl->block_path = $ParentPath;
            $Tpl->parse($ReportBlock);
            $this->DataSource->close();
        }

    }
//End Show Method

} //End NewBorn44 Class @1050-FCB6E20C

class clsNewBorn44DataSource extends clsDBregistry_db {  //NewBorn44DataSource Class @1050-04F2FB6E

//DataSource Variables @1050-F5055419
    public $Parent = "";
    public $CCSEvents = "";
    public $CCSEventResult;
    public $ErrorBlock;
    public $CmdExecution;

    public $wp;


    // Datasource fields
    public $GroupSex2;
    public $CountGroupSex;
//End DataSource Variables

//DataSourceClass_Initialize Event @1050-FC46C300
    function clsNewBorn44DataSource(& $Parent)
    {
        $this->Parent = & $Parent;
        $this->ErrorBlock = "Report NewBorn44";
        $this->Initialize();
        $this->GroupSex2 = new clsField("GroupSex2", ccsInteger, "");
        
        $this->CountGroupSex = new clsField("CountGroupSex", ccsText, "");
        

    }
//End DataSourceClass_Initialize Event

//SetOrder Method @1050-9E1383D1
    function SetOrder($SorterName, $SorterDirection)
    {
        $this->Order = "";
        $this->Order = CCGetOrder($this->Order, $SorterName, $SorterDirection, 
            "");
    }
//End SetOrder Method

//Prepare Method @1050-3D91F6F0
    function Prepare()
    {
        global $CCSLocales;
        global $DefaultDateFormat;
        $this->wp = new clsSQLParameters($this->ErrorBlock);
        $this->wp->AddParameter("2", "urls_BirthDate", ccsDate, array("ShortDate"), array("yyyy", "-", "mm", "-", "dd", " ", "HH", ":", "nn", ":", "ss"), $this->Parameters["urls_BirthDate"], "", false);
        $this->wp->AddParameter("3", "urls_BirthDate1", ccsDate, array("ShortDate"), array("yyyy", "-", "mm", "-", "dd", " ", "HH", ":", "nn", ":", "ss"), $this->Parameters["urls_BirthDate1"], "", false);
        $this->wp->AddParameter("6", "urls_FacilityName", ccsText, "", "", $this->Parameters["urls_FacilityName"], "", false);
        $this->wp->Criterion[1] = "( newborn.Weight>=3500 )";
        $this->wp->Criterion[2] = $this->wp->Operation(opGreaterThanOrEqual, "newborn.BirthDate", $this->wp->GetDBValue("2"), $this->ToSQL($this->wp->GetDBValue("2"), ccsDate),false);
        $this->wp->Criterion[3] = $this->wp->Operation(opLessThanOrEqual, "newborn.BirthDate", $this->wp->GetDBValue("3"), $this->ToSQL($this->wp->GetDBValue("3"), ccsDate),false);
        $this->wp->Criterion[4] = "( newborn.Died=1 )";
        $this->wp->Criterion[5] = "( newborn.DiedID=1 )";
        $this->wp->Criterion[6] = $this->wp->Operation(opEqual, "facilities.FacilityName", $this->wp->GetDBValue("6"), $this->ToSQL($this->wp->GetDBValue("6"), ccsText),false);
        $this->Where = $this->wp->opAND(
             false, $this->wp->opAND(
             false, $this->wp->opAND(
             false, $this->wp->opAND(
             false, $this->wp->opAND(
             false, 
             $this->wp->Criterion[1], 
             $this->wp->Criterion[2]), 
             $this->wp->Criterion[3]), 
             $this->wp->Criterion[4]), 
             $this->wp->Criterion[5]), 
             $this->wp->Criterion[6]);
    }
//End Prepare Method

//Open Method @1050-CA3C9D7B
    function Open()
    {
        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeBuildSelect", $this->Parent);
        $this->SQL = "SELECT delivery.DeliveryID AS delivery_DeliveryID, FacilityName, Sex, NewBornID, BirthDate, Weight \n\n" .
        "FROM (delivery INNER JOIN facilities ON\n\n" .
        "delivery.FacilityID = facilities.FacilityID) INNER JOIN newborn ON\n\n" .
        "newborn.DeliveryID = delivery.DeliveryID {SQL_Where} {SQL_OrderBy}";
        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeExecuteSelect", $this->Parent);
        $this->query(CCBuildSQL($this->SQL, $this->Where, "newborn.Sex asc" .  ($this->Order ? ", " . $this->Order: "")));
        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "AfterExecuteSelect", $this->Parent);
    }
//End Open Method

//SetValues Method @1050-F73A025D
    function SetValues()
    {
        $this->GroupSex2->SetDBValue(trim($this->f("Sex")));
        $this->CountGroupSex->SetDBValue($this->f("Sex"));
    }
//End SetValues Method

} //End NewBorn44DataSource Class @1050-FCB6E20C

class clsRecorddelivery_facilities_newbo { //delivery_facilities_newbo Class @1108-3F0E03CC

//Variables @1108-9E315808

    // Public variables
    public $ComponentType = "Record";
    public $ComponentName;
    public $Parent;
    public $HTMLFormAction;
    public $PressedButton;
    public $Errors;
    public $ErrorBlock;
    public $FormSubmitted;
    public $FormEnctype;
    public $Visible;
    public $IsEmpty;

    public $CCSEvents = "";
    public $CCSEventResult;

    public $RelativePath = "";

    public $InsertAllowed = false;
    public $UpdateAllowed = false;
    public $DeleteAllowed = false;
    public $ReadAllowed   = false;
    public $EditMode      = false;
    public $ds;
    public $DataSource;
    public $ValidatingControls;
    public $Controls;
    public $Attributes;

    // Class variables
//End Variables

//Class_Initialize Event @1108-BEA74564
    function clsRecorddelivery_facilities_newbo($RelativePath, & $Parent)
    {

        global $FileName;
        global $CCSLocales;
        global $DefaultDateFormat;
        $this->Visible = true;
        $this->Parent = & $Parent;
        $this->RelativePath = $RelativePath;
        $this->Errors = new clsErrors();
        $this->ErrorBlock = "Record delivery_facilities_newbo/Error";
        $this->ReadAllowed = true;
        $this->Visible = (CCSecurityAccessCheck("3") == "success");
        if($this->Visible)
        {
            $this->ReadAllowed = $this->ReadAllowed && CCUserInGroups(CCGetGroupID(), "3");
            $this->ComponentName = "delivery_facilities_newbo";
            $this->Attributes = new clsAttributes($this->ComponentName . ":");
            $CCSForm = explode(":", CCGetFromGet("ccsForm", ""), 2);
            if(sizeof($CCSForm) == 1)
                $CCSForm[1] = "";
            list($FormName, $FormMethod) = $CCSForm;
            $this->FormEnctype = "application/x-www-form-urlencoded";
            $this->FormSubmitted = ($FormName == $this->ComponentName);
            $Method = $this->FormSubmitted ? ccsPost : ccsGet;
            $this->Button_DoSearch = new clsButton("Button_DoSearch", $Method, $this);
            $this->s_BirthDate = new clsControl(ccsTextBox, "s_BirthDate", "s_BirthDate", ccsDate, $DefaultDateFormat, CCGetRequestParam("s_BirthDate", $Method, NULL), $this);
            $this->DatePicker_s_BirthDate = new clsDatePicker("DatePicker_s_BirthDate", "delivery_facilities_newbo", "s_BirthDate", $this);
            $this->s_BirthDate1 = new clsControl(ccsTextBox, "s_BirthDate1", "s_BirthDate1", ccsDate, $DefaultDateFormat, CCGetRequestParam("s_BirthDate1", $Method, NULL), $this);
            $this->DatePicker_s_BirthDate1 = new clsDatePicker("DatePicker_s_BirthDate1", "delivery_facilities_newbo", "s_BirthDate1", $this);
        }
    }
//End Class_Initialize Event

//Validate Method @1108-C2100B2E
    function Validate()
    {
        global $CCSLocales;
        $Validation = true;
        $Where = "";
        $Validation = ($this->s_BirthDate->Validate() && $Validation);
        $Validation = ($this->s_BirthDate1->Validate() && $Validation);
        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "OnValidate", $this);
        $Validation =  $Validation && ($this->s_BirthDate->Errors->Count() == 0);
        $Validation =  $Validation && ($this->s_BirthDate1->Errors->Count() == 0);
        return (($this->Errors->Count() == 0) && $Validation);
    }
//End Validate Method

//CheckErrors Method @1108-F115D629
    function CheckErrors()
    {
        $errors = false;
        $errors = ($errors || $this->s_BirthDate->Errors->Count());
        $errors = ($errors || $this->DatePicker_s_BirthDate->Errors->Count());
        $errors = ($errors || $this->s_BirthDate1->Errors->Count());
        $errors = ($errors || $this->DatePicker_s_BirthDate1->Errors->Count());
        $errors = ($errors || $this->Errors->Count());
        return $errors;
    }
//End CheckErrors Method

//MasterDetail @1108-ED598703
function SetPrimaryKeys($keyArray)
{
    $this->PrimaryKeys = $keyArray;
}
function GetPrimaryKeys()
{
    return $this->PrimaryKeys;
}
function GetPrimaryKey($keyName)
{
    return $this->PrimaryKeys[$keyName];
}
//End MasterDetail

//Operation Method @1108-F8DC3E14
    function Operation()
    {
        if(!$this->Visible)
            return;

        global $Redirect;
        global $FileName;

        if(!$this->FormSubmitted) {
            return;
        }

        if($this->FormSubmitted) {
            $this->PressedButton = "Button_DoSearch";
            if($this->Button_DoSearch->Pressed) {
                $this->PressedButton = "Button_DoSearch";
            }
        }
        $Redirect = "report_died_before_labor.php";
        if($this->Validate()) {
            if($this->PressedButton == "Button_DoSearch") {
                $Redirect = "report_died_before_labor.php" . "?" . CCMergeQueryStrings(CCGetQueryString("Form", array("Button_DoSearch", "Button_DoSearch_x", "Button_DoSearch_y")));
                if(!CCGetEvent($this->Button_DoSearch->CCSEvents, "OnClick", $this->Button_DoSearch)) {
                    $Redirect = "";
                }
            }
        } else {
            $Redirect = "";
        }
    }
//End Operation Method

//Show Method @1108-D9618E04
    function Show()
    {
        global $CCSUseAmp;
        global $Tpl;
        global $FileName;
        global $CCSLocales;
        $Error = "";

        if(!$this->Visible)
            return;

        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeSelect", $this);


        $RecordBlock = "Record " . $this->ComponentName;
        $ParentPath = $Tpl->block_path;
        $Tpl->block_path = $ParentPath . "/" . $RecordBlock;
        $this->EditMode = $this->EditMode && $this->ReadAllowed;
        if (!$this->FormSubmitted) {
        }

        if($this->FormSubmitted || $this->CheckErrors()) {
            $Error = "";
            $Error = ComposeStrings($Error, $this->s_BirthDate->Errors->ToString());
            $Error = ComposeStrings($Error, $this->DatePicker_s_BirthDate->Errors->ToString());
            $Error = ComposeStrings($Error, $this->s_BirthDate1->Errors->ToString());
            $Error = ComposeStrings($Error, $this->DatePicker_s_BirthDate1->Errors->ToString());
            $Error = ComposeStrings($Error, $this->Errors->ToString());
            $Tpl->SetVar("Error", $Error);
            $Tpl->Parse("Error", false);
        }
        $CCSForm = $this->EditMode ? $this->ComponentName . ":" . "Edit" : $this->ComponentName;
        $this->HTMLFormAction = $FileName . "?" . CCAddParam(CCGetQueryString("QueryString", ""), "ccsForm", $CCSForm);
        $Tpl->SetVar("Action", !$CCSUseAmp ? $this->HTMLFormAction : str_replace("&", "&amp;", $this->HTMLFormAction));
        $Tpl->SetVar("HTMLFormName", $this->ComponentName);
        $Tpl->SetVar("HTMLFormEnctype", $this->FormEnctype);

        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeShow", $this);
        $this->Attributes->Show();
        if(!$this->Visible) {
            $Tpl->block_path = $ParentPath;
            return;
        }

        $this->Button_DoSearch->Show();
        $this->s_BirthDate->Show();
        $this->DatePicker_s_BirthDate->Show();
        $this->s_BirthDate1->Show();
        $this->DatePicker_s_BirthDate1->Show();
        $Tpl->parse();
        $Tpl->block_path = $ParentPath;
    }
//End Show Method

} //End delivery_facilities_newbo Class @1108-FCB6E20C

class clsRecorddelivery_facilities_newbo1 { //delivery_facilities_newbo1 Class @1113-8DAE602E

//Variables @1113-9E315808

    // Public variables
    public $ComponentType = "Record";
    public $ComponentName;
    public $Parent;
    public $HTMLFormAction;
    public $PressedButton;
    public $Errors;
    public $ErrorBlock;
    public $FormSubmitted;
    public $FormEnctype;
    public $Visible;
    public $IsEmpty;

    public $CCSEvents = "";
    public $CCSEventResult;

    public $RelativePath = "";

    public $InsertAllowed = false;
    public $UpdateAllowed = false;
    public $DeleteAllowed = false;
    public $ReadAllowed   = false;
    public $EditMode      = false;
    public $ds;
    public $DataSource;
    public $ValidatingControls;
    public $Controls;
    public $Attributes;

    // Class variables
//End Variables

//Class_Initialize Event @1113-40F4EF35
    function clsRecorddelivery_facilities_newbo1($RelativePath, & $Parent)
    {

        global $FileName;
        global $CCSLocales;
        global $DefaultDateFormat;
        $this->Visible = true;
        $this->Parent = & $Parent;
        $this->RelativePath = $RelativePath;
        $this->Errors = new clsErrors();
        $this->ErrorBlock = "Record delivery_facilities_newbo1/Error";
        $this->ReadAllowed = true;
        if($this->Visible)
        {
            $this->ComponentName = "delivery_facilities_newbo1";
            $this->Attributes = new clsAttributes($this->ComponentName . ":");
            $CCSForm = explode(":", CCGetFromGet("ccsForm", ""), 2);
            if(sizeof($CCSForm) == 1)
                $CCSForm[1] = "";
            list($FormName, $FormMethod) = $CCSForm;
            $this->FormEnctype = "application/x-www-form-urlencoded";
            $this->FormSubmitted = ($FormName == $this->ComponentName);
            $Method = $this->FormSubmitted ? ccsPost : ccsGet;
            $this->Button_DoSearch = new clsButton("Button_DoSearch", $Method, $this);
            $this->s_BirthDate = new clsControl(ccsTextBox, "s_BirthDate", "s_BirthDate", ccsDate, $DefaultDateFormat, CCGetRequestParam("s_BirthDate", $Method, NULL), $this);
            $this->DatePicker_s_BirthDate = new clsDatePicker("DatePicker_s_BirthDate", "delivery_facilities_newbo1", "s_BirthDate", $this);
            $this->s_BirthDate1 = new clsControl(ccsTextBox, "s_BirthDate1", "s_BirthDate1", ccsDate, $DefaultDateFormat, CCGetRequestParam("s_BirthDate1", $Method, NULL), $this);
            $this->DatePicker_s_BirthDate1 = new clsDatePicker("DatePicker_s_BirthDate1", "delivery_facilities_newbo1", "s_BirthDate1", $this);
            $this->s_FacilityName = new clsControl(ccsListBox, "s_FacilityName", "s_FacilityName", ccsText, "", CCGetRequestParam("s_FacilityName", $Method, NULL), $this);
            $this->s_FacilityName->DSType = dsTable;
            $this->s_FacilityName->DataSource = new clsDBregistry_db();
            $this->s_FacilityName->ds = & $this->s_FacilityName->DataSource;
            $this->s_FacilityName->DataSource->SQL = "SELECT * \n" .
"FROM facilities {SQL_Where} {SQL_OrderBy}";
            list($this->s_FacilityName->BoundColumn, $this->s_FacilityName->TextColumn, $this->s_FacilityName->DBFormat) = array("FacilityName", "FacilityName", "");
        }
    }
//End Class_Initialize Event

//Validate Method @1113-CC165021
    function Validate()
    {
        global $CCSLocales;
        $Validation = true;
        $Where = "";
        $Validation = ($this->s_BirthDate->Validate() && $Validation);
        $Validation = ($this->s_BirthDate1->Validate() && $Validation);
        $Validation = ($this->s_FacilityName->Validate() && $Validation);
        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "OnValidate", $this);
        $Validation =  $Validation && ($this->s_BirthDate->Errors->Count() == 0);
        $Validation =  $Validation && ($this->s_BirthDate1->Errors->Count() == 0);
        $Validation =  $Validation && ($this->s_FacilityName->Errors->Count() == 0);
        return (($this->Errors->Count() == 0) && $Validation);
    }
//End Validate Method

//CheckErrors Method @1113-277B1C79
    function CheckErrors()
    {
        $errors = false;
        $errors = ($errors || $this->s_BirthDate->Errors->Count());
        $errors = ($errors || $this->DatePicker_s_BirthDate->Errors->Count());
        $errors = ($errors || $this->s_BirthDate1->Errors->Count());
        $errors = ($errors || $this->DatePicker_s_BirthDate1->Errors->Count());
        $errors = ($errors || $this->s_FacilityName->Errors->Count());
        $errors = ($errors || $this->Errors->Count());
        return $errors;
    }
//End CheckErrors Method

//MasterDetail @1113-ED598703
function SetPrimaryKeys($keyArray)
{
    $this->PrimaryKeys = $keyArray;
}
function GetPrimaryKeys()
{
    return $this->PrimaryKeys;
}
function GetPrimaryKey($keyName)
{
    return $this->PrimaryKeys[$keyName];
}
//End MasterDetail

//Operation Method @1113-F8DC3E14
    function Operation()
    {
        if(!$this->Visible)
            return;

        global $Redirect;
        global $FileName;

        if(!$this->FormSubmitted) {
            return;
        }

        if($this->FormSubmitted) {
            $this->PressedButton = "Button_DoSearch";
            if($this->Button_DoSearch->Pressed) {
                $this->PressedButton = "Button_DoSearch";
            }
        }
        $Redirect = "report_died_before_labor.php";
        if($this->Validate()) {
            if($this->PressedButton == "Button_DoSearch") {
                $Redirect = "report_died_before_labor.php" . "?" . CCMergeQueryStrings(CCGetQueryString("Form", array("Button_DoSearch", "Button_DoSearch_x", "Button_DoSearch_y")));
                if(!CCGetEvent($this->Button_DoSearch->CCSEvents, "OnClick", $this->Button_DoSearch)) {
                    $Redirect = "";
                }
            }
        } else {
            $Redirect = "";
        }
    }
//End Operation Method

//Show Method @1113-B4D992C4
    function Show()
    {
        global $CCSUseAmp;
        global $Tpl;
        global $FileName;
        global $CCSLocales;
        $Error = "";

        if(!$this->Visible)
            return;

        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeSelect", $this);

        $this->s_FacilityName->Prepare();

        $RecordBlock = "Record " . $this->ComponentName;
        $ParentPath = $Tpl->block_path;
        $Tpl->block_path = $ParentPath . "/" . $RecordBlock;
        $this->EditMode = $this->EditMode && $this->ReadAllowed;
        if (!$this->FormSubmitted) {
        }

        if($this->FormSubmitted || $this->CheckErrors()) {
            $Error = "";
            $Error = ComposeStrings($Error, $this->s_BirthDate->Errors->ToString());
            $Error = ComposeStrings($Error, $this->DatePicker_s_BirthDate->Errors->ToString());
            $Error = ComposeStrings($Error, $this->s_BirthDate1->Errors->ToString());
            $Error = ComposeStrings($Error, $this->DatePicker_s_BirthDate1->Errors->ToString());
            $Error = ComposeStrings($Error, $this->s_FacilityName->Errors->ToString());
            $Error = ComposeStrings($Error, $this->Errors->ToString());
            $Tpl->SetVar("Error", $Error);
            $Tpl->Parse("Error", false);
        }
        $CCSForm = $this->EditMode ? $this->ComponentName . ":" . "Edit" : $this->ComponentName;
        $this->HTMLFormAction = $FileName . "?" . CCAddParam(CCGetQueryString("QueryString", ""), "ccsForm", $CCSForm);
        $Tpl->SetVar("Action", !$CCSUseAmp ? $this->HTMLFormAction : str_replace("&", "&amp;", $this->HTMLFormAction));
        $Tpl->SetVar("HTMLFormName", $this->ComponentName);
        $Tpl->SetVar("HTMLFormEnctype", $this->FormEnctype);

        $this->CCSEventResult = CCGetEvent($this->CCSEvents, "BeforeShow", $this);
        $this->Attributes->Show();
        if(!$this->Visible) {
            $Tpl->block_path = $ParentPath;
            return;
        }

        $this->Button_DoSearch->Show();
        $this->s_BirthDate->Show();
        $this->DatePicker_s_BirthDate->Show();
        $this->s_BirthDate1->Show();
        $this->DatePicker_s_BirthDate1->Show();
        $this->s_FacilityName->Show();
        $Tpl->parse();
        $Tpl->block_path = $ParentPath;
    }
//End Show Method

} //End delivery_facilities_newbo1 Class @1113-FCB6E20C

//Initialize Page @1-22247B90
// Variables
$FileName = "";
$Redirect = "";
$Tpl = "";
$TemplateFileName = "";
$BlockToParse = "";
$ComponentName = "";
$Attributes = "";

// Events;
$CCSEvents = "";
$CCSEventResult = "";

$FileName = FileName;
$Redirect = "";
$TemplateFileName = "report_died_before_labor.html";
$BlockToParse = "main";
$TemplateEncoding = "UTF-8";
$ContentType = "text/html";
$PathToRoot = "./";
$Charset = $Charset ? $Charset : "utf-8";
//End Initialize Page

//Include events file @1-4B3B62DE
include_once("./report_died_before_labor_events.php");
//End Include events file

//Before Initialize @1-E870CEBC
$CCSEventResult = CCGetEvent($CCSEvents, "BeforeInitialize", $MainPage);
//End Before Initialize

//Initialize Objects @1-4C775E7A
$DBregistry_db = new clsDBregistry_db();
$MainPage->Connections["registry_db"] = & $DBregistry_db;
$Attributes = new clsAttributes("page:");
$MainPage->Attributes = & $Attributes;

// Controls
$topmenu = new clstopmenu("", "topmenu", $MainPage);
$topmenu->Initialize();
$NewBorn27 = new clsReportNewBorn27("", $MainPage);
$NewBorn28 = new clsReportNewBorn28("", $MainPage);
$NewBorn29 = new clsReportNewBorn29("", $MainPage);
$NewBorn30 = new clsReportNewBorn30("", $MainPage);
$NewBorn31 = new clsReportNewBorn31("", $MainPage);
$NewBorn32 = new clsReportNewBorn32("", $MainPage);
$NewBorn33 = new clsReportNewBorn33("", $MainPage);
$NewBorn34 = new clsReportNewBorn34("", $MainPage);
$NewBorn35 = new clsReportNewBorn35("", $MainPage);
$NewBorn36 = new clsReportNewBorn36("", $MainPage);
$NewBorn37 = new clsReportNewBorn37("", $MainPage);
$NewBorn38 = new clsReportNewBorn38("", $MainPage);
$NewBorn39 = new clsReportNewBorn39("", $MainPage);
$NewBorn40 = new clsReportNewBorn40("", $MainPage);
$NewBorn41 = new clsReportNewBorn41("", $MainPage);
$NewBorn42 = new clsReportNewBorn42("", $MainPage);
$NewBorn43 = new clsReportNewBorn43("", $MainPage);
$NewBorn44 = new clsReportNewBorn44("", $MainPage);
$delivery_facilities_newbo = new clsRecorddelivery_facilities_newbo("", $MainPage);
$delivery_facilities_newbo1 = new clsRecorddelivery_facilities_newbo1("", $MainPage);
$MainPage->topmenu = & $topmenu;
$MainPage->NewBorn27 = & $NewBorn27;
$MainPage->NewBorn28 = & $NewBorn28;
$MainPage->NewBorn29 = & $NewBorn29;
$MainPage->NewBorn30 = & $NewBorn30;
$MainPage->NewBorn31 = & $NewBorn31;
$MainPage->NewBorn32 = & $NewBorn32;
$MainPage->NewBorn33 = & $NewBorn33;
$MainPage->NewBorn34 = & $NewBorn34;
$MainPage->NewBorn35 = & $NewBorn35;
$MainPage->NewBorn36 = & $NewBorn36;
$MainPage->NewBorn37 = & $NewBorn37;
$MainPage->NewBorn38 = & $NewBorn38;
$MainPage->NewBorn39 = & $NewBorn39;
$MainPage->NewBorn40 = & $NewBorn40;
$MainPage->NewBorn41 = & $NewBorn41;
$MainPage->NewBorn42 = & $NewBorn42;
$MainPage->NewBorn43 = & $NewBorn43;
$MainPage->NewBorn44 = & $NewBorn44;
$MainPage->delivery_facilities_newbo = & $delivery_facilities_newbo;
$MainPage->delivery_facilities_newbo1 = & $delivery_facilities_newbo1;
$NewBorn27->Initialize();
$NewBorn28->Initialize();
$NewBorn29->Initialize();
$NewBorn30->Initialize();
$NewBorn31->Initialize();
$NewBorn32->Initialize();
$NewBorn33->Initialize();
$NewBorn34->Initialize();
$NewBorn35->Initialize();
$NewBorn36->Initialize();
$NewBorn37->Initialize();
$NewBorn38->Initialize();
$NewBorn39->Initialize();
$NewBorn40->Initialize();
$NewBorn41->Initialize();
$NewBorn42->Initialize();
$NewBorn43->Initialize();
$NewBorn44->Initialize();

BindEvents();

$CCSEventResult = CCGetEvent($CCSEvents, "AfterInitialize", $MainPage);

if ($Charset) {
    header("Content-Type: " . $ContentType . "; charset=" . $Charset);
} else {
    header("Content-Type: " . $ContentType);
}
//End Initialize Objects

//Initialize HTML Template @1-A06E9207
$CCSEventResult = CCGetEvent($CCSEvents, "OnInitializeView", $MainPage);
$Tpl = new clsTemplate($FileEncoding, $TemplateEncoding);
$Tpl->LoadTemplate(PathToCurrentPage . $TemplateFileName, $BlockToParse, "UTF-8", "replace");
$Tpl->block_path = "/$BlockToParse";
$CCSEventResult = CCGetEvent($CCSEvents, "BeforeShow", $MainPage);
$Attributes->SetValue("pathToRoot", "");
$Attributes->Show();
//End Initialize HTML Template

//Execute Components @1-6DFDB1F7
$topmenu->Operations();
$delivery_facilities_newbo->Operation();
$delivery_facilities_newbo1->Operation();
//End Execute Components

//Go to destination page @1-926C484C
if($Redirect)
{
    $CCSEventResult = CCGetEvent($CCSEvents, "BeforeUnload", $MainPage);
    $DBregistry_db->close();
    header("Location: " . $Redirect);
    $topmenu->Class_Terminate();
    unset($topmenu);
    unset($NewBorn27);
    unset($NewBorn28);
    unset($NewBorn29);
    unset($NewBorn30);
    unset($NewBorn31);
    unset($NewBorn32);
    unset($NewBorn33);
    unset($NewBorn34);
    unset($NewBorn35);
    unset($NewBorn36);
    unset($NewBorn37);
    unset($NewBorn38);
    unset($NewBorn39);
    unset($NewBorn40);
    unset($NewBorn41);
    unset($NewBorn42);
    unset($NewBorn43);
    unset($NewBorn44);
    unset($delivery_facilities_newbo);
    unset($delivery_facilities_newbo1);
    unset($Tpl);
    exit;
}
//End Go to destination page

//Show Page @1-E33D97DD
$topmenu->Show();
$NewBorn27->Show();
$NewBorn28->Show();
$NewBorn29->Show();
$NewBorn30->Show();
$NewBorn31->Show();
$NewBorn32->Show();
$NewBorn33->Show();
$NewBorn34->Show();
$NewBorn35->Show();
$NewBorn36->Show();
$NewBorn37->Show();
$NewBorn38->Show();
$NewBorn39->Show();
$NewBorn40->Show();
$NewBorn41->Show();
$NewBorn42->Show();
$NewBorn43->Show();
$NewBorn44->Show();
$delivery_facilities_newbo->Show();
$delivery_facilities_newbo1->Show();
$Tpl->block_path = "";
$Tpl->Parse($BlockToParse, false);
if (!isset($main_block)) $main_block = $Tpl->GetVar($BlockToParse);
$CCSEventResult = CCGetEvent($CCSEvents, "BeforeOutput", $MainPage);
if ($CCSEventResult) echo $main_block;
//End Show Page

//Unload Page @1-9CC41EE6
$CCSEventResult = CCGetEvent($CCSEvents, "BeforeUnload", $MainPage);
$DBregistry_db->close();
$topmenu->Class_Terminate();
unset($topmenu);
unset($NewBorn27);
unset($NewBorn28);
unset($NewBorn29);
unset($NewBorn30);
unset($NewBorn31);
unset($NewBorn32);
unset($NewBorn33);
unset($NewBorn34);
unset($NewBorn35);
unset($NewBorn36);
unset($NewBorn37);
unset($NewBorn38);
unset($NewBorn39);
unset($NewBorn40);
unset($NewBorn41);
unset($NewBorn42);
unset($NewBorn43);
unset($NewBorn44);
unset($delivery_facilities_newbo);
unset($delivery_facilities_newbo1);
unset($Tpl);
//End Unload Page